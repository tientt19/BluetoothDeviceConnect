#if 0
#elif defined(__arm64e__) && __arm64e__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef TRUSANGBLUETOOTH_SWIFT_H
#define TRUSANGBLUETOOTH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TrusangBluetooth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 设备蓝牙状态
typedef SWIFT_ENUM(NSInteger, DeviceState, open) {
/// 没有任何动作
  DeviceStateDefault = 0,
/// 搜索中
  DeviceStateSearching = 1,
/// 连接中
  DeviceStateConnecting = 2,
/// 已连接
  DeviceStateConnected = 3,
/// 断开连接
  DeviceStateDisconnected = 4,
};

@class NSNumber;
@class NSString;

/// 表盘模板
SWIFT_CLASS("_TtC16TrusangBluetooth12DialTemplate")
@interface DialTemplate : NSObject
/// 模板id
@property (nonatomic) NSInteger id;
/// 模板地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ECGMeasuringState, open) {
/// 准备测量
  ECGMeasuringStatePrepare = 0,
/// 测量中
  ECGMeasuringStateMeasuring = 1,
/// 分析
  ECGMeasuringStateAnalysis = 2,
/// 测量失败
  ECGMeasuringStateFaild = 3,
/// 测量完成
  ECGMeasuringStateComplete = 4,
};

typedef SWIFT_ENUM(NSInteger, ECGResult, open) {
  ECGResultROT = 3,
/// VPB couple 双室性早搏比较严重的早搏，这种早搏需要马上进行就医，心脏某个部位发生了病变
  ECGResultCPT = 6,
/// accidental VPB 单个室性早搏 早搏是指异位起搏点发出的过早冲动引起的心脏搏动，为最常见的心律失常。早搏常见于健康人，如果偶尔发生，症 状缺如，一般不用服药
  ECGResultVPB = 7,
/// VPB bigeminy 室性二联律,室性二联律直接影响心脏的供血功能，导致心脏供血不足;
  ECGResultBGM = 8,
/// VPB trigeminy 室性三联律,心脏出现病变，有心悸、胸闷、心慌等表现
  ECGResultTGM = 9,
/// supraventricular tachycaridia 室上性心动过速,平静时每分钟心率超过 100 次。心动过速分生理性、病理性两种。 a.生理:情绪激动、剧烈运动、烟、酒、茶、咖啡刺激.b.病理:发热、贫血、休克、甲亢、心衰 临床表现:多属生理现象。无症状或者有心悸感 治疗:一般无需治疗，病理的可采用 B 受体阻滞 剂如普奈洛尔(心得安)减慢心率
  ECGResultTAC = 10,
/// supraventricular bradycaridia 室上性心动过缓(临床上低于 30 次每分钟) 正常成人的心率在每分钟 60~100 次之间，如果低于 30 次称为心动过缓。 病因:a、生理:健康的青年人，运动员等 b、病理:颅内高压、甲减、洋地黄中毒等 临床表现:多无症状，心排血量不足时头晕、乏力晕厥治疗:有症状可用阿托品等，用药症状不能缓解者可以安装心脏起搏器
  ECGResultBRD = 11,
/// missed beat 漏博 窦房结在一个不同长短时间内 不能产生冲动，导致心房和心室电活动和机械活 动暂停或者中断的现象 病因:a、迷走神经张力增高或者颈动脉窦过敏 b、急性下壁心肌梗死、窦房结变性与纤维化 c、脑血管病变、应用洋地黄或者乙酰胆碱等药物 临床表现:可发生头晕、黑朦、晕厥，严重者可 发生阿-斯综合征甚至死亡
  ECGResultMIS = 16,
/// 正常
  ECGResultOK = 22,
};

typedef SWIFT_ENUM(NSInteger, HealthDataAlarmType, open) {
/// 低心率
  HealthDataAlarmTypeLowHR = 0,
/// 高心率
  HealthDataAlarmTypeHighHR = 1,
/// 低舒张压
  HealthDataAlarmTypeLowDBP = 2,
/// 高舒张压
  HealthDataAlarmTypeHighDBP = 3,
/// 低收缩压
  HealthDataAlarmTypeLowSBP = 4,
/// 高收缩压
  HealthDataAlarmTypeHighSBP = 5,
/// 低血氧
  HealthDataAlarmTypeLowBO = 6,
/// 高体温
  HealthDataAlarmTypeHighTEMP = 7,
};

@class NSData;

@interface UIImage (SWIFT_EXTENSION(TrusangBluetooth))
/// 根据图片大小提取像素
/// \param size 图片大小
///
///
/// returns:
/// 像素数组
- (NSArray<NSNumber *> * _Nullable)extraPixelsIn:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)convertRGB565WithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

enum ZHJAlarmClockType : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJAlarmClock")
@interface ZHJAlarmClock : NSObject
/// 闹钟开关
@property (nonatomic) BOOL isOpen;
/// 时
@property (nonatomic) NSInteger hour;
/// 分
@property (nonatomic) NSInteger minute;
/// 闹钟类型
@property (nonatomic) enum ZHJAlarmClockType type;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 是否有效闹钟,无效闹钟相当于空闹钟，删除后此属性置为false
@property (nonatomic) BOOL isValid;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBaseProcessor")
@interface ZHJBaseProcessor : NSObject
@end

enum ZHJBLEError : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJAlarmClockProcessor")
@interface ZHJAlarmClockProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAlarmClockProcessor * _Nonnull shared;)
+ (ZHJAlarmClockProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备闹钟
/// \param alarmClockHandle 读取后的设备数据返回
///
- (void)readAlarmClockWithAlarmClockHandle:(void (^ _Nonnull)(NSArray<ZHJAlarmClock *> * _Nonnull))alarmClockHandle;
/// 写入闹钟
/// \param clocks 闹钟数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeAlarmClock:(NSArray<ZHJAlarmClock *> * _Nonnull)clocks setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJAlarmClockType, open) {
/// 默认
  ZHJAlarmClockTypeDefault = 0x00,
/// 喝水
  ZHJAlarmClockTypeDrink = 0x01,
/// 吃药
  ZHJAlarmClockTypeTakeMedicine = 0x02,
/// 吃饭
  ZHJAlarmClockTypeEat = 0x03,
/// 运动
  ZHJAlarmClockTypeSport = 0x04,
/// 睡觉
  ZHJAlarmClockTypeSleep = 0x05,
/// 起床
  ZHJAlarmClockTypeAwake = 0x06,
/// 约会
  ZHJAlarmClockTypeDate = 0x07,
/// 聚会
  ZHJAlarmClockTypeParty = 0x08,
/// 会议
  ZHJAlarmClockTypeMeeting = 0x09,
};


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJAutoSleepTime")
@interface ZHJAutoSleepTime : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 开始睡眠时间 小时
@property (nonatomic) NSInteger beginHour;
/// 开始睡眠时间 分
@property (nonatomic) NSInteger beginMinute;
/// 结束睡眠时间 小时
@property (nonatomic) NSInteger endHour;
/// 结束睡眠时间 分
@property (nonatomic) NSInteger endMinute;
/// 周期
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 勿扰模式
@property (nonatomic) BOOL notDisturb;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJAutoSleepTimeProcessor")
@interface ZHJAutoSleepTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAutoSleepTimeProcessor * _Nonnull shared;)
+ (ZHJAutoSleepTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备自动睡眠时间设置
/// \param autoSleepTimeHandle 读取后的设备数据返回
///
- (void)readAutoSleepTimeWithAutoSleepTimeHandle:(void (^ _Nonnull)(NSArray<ZHJAutoSleepTime *> * _Nonnull))autoSleepTimeHandle;
/// 写入自动睡眠时间
/// \param autoSleepTime 自动睡眠时间数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSleepSetting:(NSArray<ZHJAutoSleepTime *> * _Nonnull)autoSleepTimes setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLEError, open) {
/// 正确(成功)
  ZHJBLEErrorCorrect = 0x00,
/// 命令错误
  ZHJBLEErrorCmd_incorrect = 0x01,
/// 校验码错误
  ZHJBLEErrorCheckNum_incorrect = 0x02,
/// 命令长度
  ZHJBLEErrorCmdLen_incorrect = 0x03,
/// 子命令错误
  ZHJBLEErrorSubCmd_incorrect = 0x04,
/// 数据无效
  ZHJBLEErrorData_invalid = 0x05,
};

@class CBCentralManager;
@class ZHJBTDevice;
enum ZHJBTManagerState : NSInteger;
@class CBPeripheral;
@class CBCharacteristic;

SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJBLEManagerProvider")
@interface ZHJBLEManagerProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBLEManagerProvider * _Nonnull shared;)
+ (ZHJBLEManagerProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CBCentralManager * _Nullable btManager;
@property (nonatomic, strong) ZHJBTDevice * _Nullable currentDevice;
@property (nonatomic, copy) NSArray<ZHJBTDevice *> * _Nonnull deviceArr;
/// 设备连接状态
@property (nonatomic) enum DeviceState deviceState;
/// 是否搜索包含处于DFU状态的设备,默认否
@property (nonatomic) BOOL canScanDFU;
/// 命令交互完成
@property (nonatomic) BOOL cmdDone;
/// 心电数据完成
@property (nonatomic) BOOL ecgCmdDone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取蓝牙中心管理者的状态（外部调用,poweron之后才可以执行搜索）
/// \param state 状态
///
- (void)bluetoothProviderManagerStateDidUpdateWithState:(void (^ _Nonnull)(enum ZHJBTManagerState))state;
/// 设置数据接收超时时长，默认30秒
/// \param seconds 超时时长，单位：秒
///
- (void)setDataReceiveTimeout:(NSInteger)seconds;
/// 清除重连设备
- (void)removeAutoReconnectDevice;
/// 重连
- (void)autoReconnectWithSuccess:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail;
/// 连接设备（外部调用）
- (void)connectDeviceWithDevice:(ZHJBTDevice * _Nonnull)device success:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail timeout:(void (^ _Nonnull)(void))timeout;
/// 断开当前设备（外部调用）
- (void)disconnectDeviceWithDisconnect:(void (^ _Nonnull)(CBPeripheral * _Nonnull))disconnect;
/// 搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
- (void)scanWithDiscover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 设定搜索时间来搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
/// \param seconds 超时时间
///
- (void)scanWithSeconds:(NSTimeInterval)seconds discover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 停止搜索（外部调用）
- (void)stopScan;
/// 监听设备状态
/// \param stateUpdate 状态变化回调
///
- (void)deviceStateDidUpdatedWithStateUpdate:(void (^ _Nonnull)(enum DeviceState))stateUpdate;
/// 发现写数据服务特征通道
/// \param write 写数据的通道
///
- (void)discoverWriteCharacteristicWithWrite:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))write;
/// 发现读数据的服务特征通道
/// \param read 读数据的通道
///
- (void)discoverReadCharacteristicWithRead:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))read;
@end


@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth))
/// 设置身体信息
/// \param age 年龄，默认25岁
///
/// \param gender 性别，0男，1女，默认男
///
/// \param height 身高，单位cm，默认170cm
///
/// \param weight 体重，单位kg，默认60kg
///
/// \param calculateStaticCalories 是否计算静态卡路里，默认不计算
///
- (void)setBodyInfoWithGender:(NSInteger)gender age:(NSInteger)age height:(CGFloat)height weight:(CGFloat)weight calculateRMR:(BOOL)calculateRMR;
@end

@class CBService;

@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth)) <CBCentralManagerDelegate, CBPeripheralDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

enum ZHJBLE_Read_CMD : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJBLEMessage")
@interface ZHJBLEMessage : NSObject
/// 功能命令
@property (nonatomic) enum ZHJBLE_Read_CMD cmd;
/// 状态码
@property (nonatomic) enum ZHJBLEError state;
/// 消息
@property (nonatomic, copy) NSString * _Nullable message;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Read_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Read_CMDDeviceInfo = 0x81,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Read_CMDDeviceConfig = 0x82,
/// 获取/设置个人信息
  ZHJBLE_Read_CMDUserInfo = 0x83,
/// 获取/设置设备时间
  ZHJBLE_Read_CMDSyncTime = 0x84,
/// 获取/设置设备闹钟
  ZHJBLE_Read_CMDAlarmClock = 0x85,
/// 获取/设置设备久坐提醒
  ZHJBLE_Read_CMDSedentary = 0x86,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Read_CMDSportTarget = 0x87,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Read_CMDAutoSleepTime = 0x88,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Read_CMDMessageNotice = 0x89,
/// 自定义消息
  ZHJBLE_Read_CMDMessage = 0x8A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Read_CMDFirmwareUpgrade = 0x8B,
/// 校验链接有效性(预留)
  ZHJBLE_Read_CMDVerifyLink = 0x8C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Read_CMDDeviceControl = 0x90,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Read_CMDStep_sleep = 0xA0,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Read_CMDHR_BP_BO = 0xA1,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Read_CMDECG = 0xA2,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Read_CMDSportMode = 0xA3,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Read_CMDUv = 0xA4,
/// 获取/设置天气预报数据
  ZHJBLE_Read_CMDWeather = 0xA5,
/// 清除设备相关记录数据
  ZHJBLE_Read_CMDClearDeviceRecord = 0xA6,
/// 设备电池电量
  ZHJBLE_Read_CMDBattery = 0xA7,
/// 设备硬件参数设置(预留)
  ZHJBLE_Read_CMDHardwareConfig = 0xA8,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Read_CMDHighPrecisionSleep = 0xA9,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Read_CMDRealTimeHealthData = 0xAA,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Read_CMDTemperature = 0xAC,
/// 表盘
  ZHJBLE_Read_CMDDial = 0xAD,
/// 事件提醒
  ZHJBLE_Read_CMDEventReminder = 0xAE,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Read_CMDDeviceFeature = 0xAF,
/// 新版久坐提醒
  ZHJBLE_Read_CMDSedentaryB = 0xC1,
/// 翻腕亮屏
  ZHJBLE_Read_CMDTurnWristWakeScreen = 0xC2,
/// 查询连接验证的类型
  ZHJBLE_Read_CMDConnectVeriticationType = 0xC3,
/// 新版表盘
  ZHJBLE_Read_CMDDialB = 0xC4,
/// 支持温度区间的天气
  ZHJBLE_Read_CMDWeatherB = 0xC5,
/// 未知命令（不处理）
  ZHJBLE_Read_CMDUnknow = 0x00,
};

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Write_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Write_CMDDeviceInfo = 0x01,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Write_CMDDeviceConfig = 0x02,
/// 获取/设置个人信息
  ZHJBLE_Write_CMDUserInfo = 0x03,
/// 获取/设置设备时间
  ZHJBLE_Write_CMDSyncTime = 0x04,
/// 获取/设置设备闹钟
  ZHJBLE_Write_CMDAlarmClock = 0x05,
/// 获取/设置设备久坐提醒
  ZHJBLE_Write_CMDSedentary = 0x06,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Write_CMDSportTarget = 0x07,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Write_CMDAutoSleepTime = 0x08,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Write_CMDMessageNotice = 0x09,
/// 自定义消息
  ZHJBLE_Write_CMDMessage = 0x0A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Write_CMDFirmwareUpgrade = 0x0B,
/// 校验链接有效性(预留)
  ZHJBLE_Write_CMDVerifyLink = 0x0C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Write_CMDDeviceControl = 0x10,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Write_CMDStep_sleep = 0x20,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Write_CMDHR_BP_BO = 0x21,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Write_CMDECG = 0x22,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Write_CMDSportMode = 0x23,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Write_CMDUv = 0x24,
/// 获取/设置天气预报数据
  ZHJBLE_Write_CMDWeather = 0x25,
/// 清除设备相关记录数据
  ZHJBLE_Write_CMDClearDeviceRecord = 0x26,
/// 设备电池电量
  ZHJBLE_Write_CMDBattery = 0x27,
/// 设备硬件参数设置(预留)
  ZHJBLE_Write_CMDHardwareConfig = 0x28,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Write_CMDHighPrecisionSleep = 0x29,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Write_CMDTemperature = 0x2C,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Write_CMDRealTimeHealthData = 0x2A,
/// 表盘
  ZHJBLE_Write_CMDDial = 0x2D,
/// 事件提醒
  ZHJBLE_Write_CMDEventReminder = 0x2E,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Write_CMDDeviceFeature = 0x2F,
/// 新版久坐提醒
  ZHJBLE_Write_CMDSedentaryB = 0x41,
/// 翻腕亮屏
  ZHJBLE_Write_CMDTurnWristWakeScreen = 0x42,
/// 查询连接验证的类型
  ZHJBLE_Write_CMDConnectVeriticationType = 0x43,
/// 新版表盘
  ZHJBLE_Write_CMDDialB = 0x44,
/// 支持温度区间的天气
  ZHJBLE_Write_CMDWeatherB = 0x45,
/// 未知命令（不处理）
  ZHJBLE_Write_CMDUnknow = 0x00,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBOAlarm_t")
@interface ZHJBOAlarm_t : NSObject
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBPAlarm_t")
@interface ZHJBPAlarm_t : NSObject
/// 舒张压高值
@property (nonatomic) NSInteger maxDBP;
/// 舒张压低值
@property (nonatomic) NSInteger minDBP;
/// 收缩压高值
@property (nonatomic) NSInteger maxSBP;
/// 收缩压低值
@property (nonatomic) NSInteger minSBP;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJBTDevice")
@interface ZHJBTDevice : NSObject
/// 设备名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 设备UUID
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// 设备MAC地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 设备信号强度
@property (nonatomic, strong) NSNumber * _Nonnull rssi;
/// 设备版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 原始设备
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
/// 产品型号
@property (nonatomic, copy) NSString * _Nullable model;
/// 电量
@property (nonatomic) NSInteger power;
/// 是否已经连接
@property (nonatomic) BOOL isConnected;
/// 是否已与ANCS配对
@property (nonatomic) BOOL isANCSAuthorized;
/// 设备SN号
@property (nonatomic, copy) NSString * _Nonnull sn;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 蓝牙中心状态
typedef SWIFT_ENUM(NSInteger, ZHJBTManagerState, open) {
  ZHJBTManagerStateUnknown = 0,
  ZHJBTManagerStateResetting = 1,
  ZHJBTManagerStateUnsupported = 2,
  ZHJBTManagerStateUnauthorized = 3,
  ZHJBTManagerStatePoweredOff = 4,
  ZHJBTManagerStatePoweredOn = 5,
};



SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJBatteryProcessor")
@interface ZHJBatteryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBatteryProcessor * _Nonnull shared;)
+ (ZHJBatteryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备电量
/// \param batteryHandle 电量数据返回
///
- (void)readBatteryPowerWithBatteryHandle:(void (^ _Nonnull)(NSInteger))batteryHandle;
@end

/// Api类型列表
typedef SWIFT_ENUM(NSInteger, ZHJBleApiCMD, open) {
/// 读取消息提醒设置
  ZHJBleApiCMDReadMessageNotice = 0,
/// 写入消息提醒设置
  ZHJBleApiCMDWriteMessageNotice = 1,
/// 读取历史运动模式数据
  ZHJBleApiCMDReadSportModeHistoryRecord = 2,
/// 清除全部运动记录
  ZHJBleApiCMDClearAllSportRecord = 3,
/// 恢复出厂设置
  ZHJBleApiCMDResetDevice = 4,
/// 重启设备
  ZHJBleApiCMDRebootDevice = 5,
/// 读取设备时间
  ZHJBleApiCMDReadDeviceTime = 6,
/// 写入时间
  ZHJBleApiCMDWriteTime = 7,
/// 读取设备久坐设置
  ZHJBleApiCMDReadSedentary = 8,
/// 写入久坐提醒
  ZHJBleApiCMDWriteSedentary = 9,
/// 读取设备运动目标信息
  ZHJBleApiCMDReadSportTarget = 10,
/// 写入运动目标
  ZHJBleApiCMDWriteSportTarget = 11,
/// 接收到设备主动发来的数据
  ZHJBleApiCMDReadDeviceControlRealTimeData = 12,
/// 查找设备
  ZHJBleApiCMDFindDevice = 13,
/// 拍照
  ZHJBleApiCMDTakePhoto = 14,
/// 退出拍照
  ZHJBleApiCMDTakePhotoCancel = 15,
/// 设置心率告警区间
  ZHJBleApiCMDSetHeartRateAlarmLimit = 16,
/// 设置心率自动检测
  ZHJBleApiCMDSetAutoDetectHeartRate = 17,
/// 开始心率检测
  ZHJBleApiCMDStartDetectHeartRate = 18,
/// 结束心率检测
  ZHJBleApiCMDEndDetectHeartRate = 19,
/// 读取当前设备心率血压血氧数据
  ZHJBleApiCMDReadCurrentHR_BP_BO = 20,
/// 获取手环心率高、低报警限制开启使能设置
  ZHJBleApiCMDReadHeartAlarmSetting = 21,
/// 获取手环自动心率采样设置
  ZHJBleApiCMDReadHeartTimingDetectSetting = 22,
/// 设置心率血压血氧校准值
  ZHJBleApiCMDSetHR_BP_BOCalibration = 23,
/// 读取心率血压血氧校准值
  ZHJBleApiCMDReadHR_BP_BOCalibration = 24,
/// 获取历史心率血压血氧记录
  ZHJBleApiCMDReadHR_BP_BOHistoryRecord = 25,
/// 开始心电
  ZHJBleApiCMDEcgStart = 26,
/// 结束心电
  ZHJBleApiCMDEcgEnd = 27,
/// 获取单次心电数据
  ZHJBleApiCMDReadEcgHistoryRecord = 28,
/// 读取个人信息
  ZHJBleApiCMDReadUserInfo = 29,
/// 写入个人信息
  ZHJBleApiCMDWriteUserInfo = 30,
/// 进入升级模式
  ZHJBleApiCMDStartFirmwareUpgrade = 31,
/// 读取设备电量
  ZHJBleApiCMDReadBatteryPower = 32,
/// 读取设备闹钟
  ZHJBleApiCMDReadAlarmClock = 33,
/// 写入闹钟
  ZHJBleApiCMDWriteAlarmClock = 34,
/// 读取设备信息
  ZHJBleApiCMDReadDeviceInfo = 35,
/// 读取设备自动睡眠时间设置
  ZHJBleApiCMDReadAutoSleepTime = 36,
/// 写入自动睡眠时间
  ZHJBleApiCMDWriteSleepSetting = 37,
/// 发送开启配对指令
  ZHJBleApiCMDEnablePair = 38,
/// 读取当前设备计步数据
  ZHJBleApiCMDReadCurrentStep = 39,
/// 读取历史计步睡眠数据记录
  ZHJBleApiCMDReadStepAndSleepHistoryRecord = 40,
/// 发送4位随机配对码
  ZHJBleApiCMDSendPairingCode = 41,
/// 关闭手环配对码页面
  ZHJBleApiCMDClosePairingCodeUI = 42,
/// 发送自定义消息
  ZHJBleApiCMDSendMessage = 43,
/// 读取设备基本配置信息
  ZHJBleApiCMDReadDeviceConfig = 44,
/// 写入设备配置
  ZHJBleApiCMDWriteDeviceConfig = 45,
/// 设置体温告警
  ZHJBleApiCMDSetTemperatureAlarmLimit = 46,
/// 设置体温自动检测
  ZHJBleApiCMDSetAutoDetectTemperature = 47,
/// 读取当前设备体温数据
  ZHJBleApiCMDReadCurrentTemperature = 48,
/// 获取手环体温高报警设置
  ZHJBleApiCMDReadTemperatureAlarmSetting = 49,
/// 获取手环自动体温采样设置
  ZHJBleApiCMDReadTemperatureTimingDetectSetting = 50,
/// 读取历史体温记录
  ZHJBleApiCMDReadTemperatureHistoryRecord = 51,
/// 读取运动模式配置
  ZHJBleApiCMDReadSportConfig = 52,
/// 写入运动模式配置
  ZHJBleApiCMDWriteSportConfig = 53,
/// 发送表盘
  ZHJBleApiCMDSendDial = 54,
/// 读取喝水提醒设置
  ZHJBleApiCMDReadDrinkWaterConfig = 55,
/// 写入运动模式配置
  ZHJBleApiCMDWriteDrinkWaterConfig = 56,
/// 读取实时健康数据
  ZHJBleApiCMDReadRealTimeHealthData = 57,
/// 清除体温历史记录
  ZHJBleApiCMDClearTemperatureRecord = 58,
/// 清除运动模式历史记录
  ZHJBleApiCMDClearSportModeRecord = 59,
/// 清除心率血压血氧历史记录
  ZHJBleApiCMDClearHR_BP_BORecord = 60,
/// 清除计步睡眠历史记录
  ZHJBleApiCMDClearStepAndSleepRecord = 61,
/// 发送天气
  ZHJBleApiCMDSyncWeather = 62,
/// 发送支持天气区间的天气
  ZHJBleApiCMDSyncWeatherB = 63,
/// 发送表盘(B类表盘)
  ZHJBleApiCMDSendDialB = 64,
/// 切换表盘(B类表盘)
  ZHJBleApiCMDSwitchDial = 65,
/// 删除表盘(B类表盘)
  ZHJBleApiCMDDeleteDial = 66,
/// 读取设备表盘配置信息（B类表盘，当前表盘和已安装表盘ID）
  ZHJBleApiCMDReadDialBaseInfo = 67,
};


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceDataBaseModel")
@interface ZHJDeviceDataBaseModel : NSObject
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 设备mac
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 日期
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 上传状态
@property (nonatomic) NSInteger uploadStatus;
/// 设备类型 0:手环，1：手机
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodOxygenDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJBloodOxygen")
@interface ZHJBloodOxygen : ZHJDeviceDataBaseModel
/// 最大血氧
@property (nonatomic) NSInteger max;
/// 最小血氧
@property (nonatomic) NSInteger min;
/// 平均血氧
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodOxygenDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJBloodOxygenDetail")
@interface ZHJBloodOxygenDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 血氧值
@property (nonatomic) NSInteger BO;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodPressureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBloodPressure")
@interface ZHJBloodPressure : ZHJDeviceDataBaseModel
/// 最大血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull max;
/// 最小血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull min;
/// 平均血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodPressureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJBloodPressureDetail")
@interface ZHJBloodPressureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 舒张压(diastolic blood pressure，DBP)
@property (nonatomic) NSInteger DBP;
/// 收缩压(systolic blood pressure ，SBP)
@property (nonatomic) NSInteger SBP;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJCallContrl, open) {
/// 无效
  ZHJCallContrlDefault = 0x00,
/// 接电话
  ZHJCallContrlAnswer = 0x01,
/// 挂断电话
  ZHJCallContrlHangUp = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJClearDeviceProcessor")
@interface ZHJClearDeviceProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJClearDeviceProcessor * _Nonnull shared;)
+ (ZHJClearDeviceProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 清除全部运动记录数据
- (void)clearAllSportRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 恢复出厂设置
- (void)resetDeviceWithResetHandle:(void (^ _Nonnull)(enum ZHJBLEError))resetHandle;
/// 重启设备
- (void)rebootDeviceWithRebootHandle:(void (^ _Nonnull)(enum ZHJBLEError))rebootHandle;
@end

enum ZHJlLanguage : NSInteger;
enum ZHJUnit : NSInteger;
enum ZHJTimeMode : NSInteger;
enum ZHJTemperatureUnit : NSInteger;
enum ZHJWearStyle : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJDeviceConfig")
@interface ZHJDeviceConfig : NSObject
/// 屏幕亮度
@property (nonatomic) NSInteger brightness;
/// 亮屏时长
@property (nonatomic) NSInteger brightDuration;
/// 主题皮肤
@property (nonatomic) NSInteger theme;
/// 语言选择
@property (nonatomic) enum ZHJlLanguage language;
/// 单位
@property (nonatomic) enum ZHJUnit unit;
/// 时间制式
@property (nonatomic) enum ZHJTimeMode timeMode;
/// 翻腕亮屏
@property (nonatomic) BOOL trunWrist;
/// 音乐控制
@property (nonatomic) BOOL musicCtrl;
/// 通知
@property (nonatomic) BOOL notice;
/// 温度单位
@property (nonatomic) enum ZHJTemperatureUnit temperatureUnit;
/// 佩戴方式
@property (nonatomic) enum ZHJWearStyle wearStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJDeviceConfigProcessor")
@interface ZHJDeviceConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceConfigProcessor * _Nonnull shared;)
+ (ZHJDeviceConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备基本配置信息
/// \param deviceConfigHandle 读取后的设备数据返回
///
- (void)readDeviceConfigWithDeviceConfigHandle:(void (^ _Nonnull)(ZHJDeviceConfig * _Nonnull))deviceConfigHandle;
/// 写入设备配置
/// \param config 配置对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDeviceConfig:(ZHJDeviceConfig * _Nonnull)config setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceControlProcessor")
@interface ZHJDeviceControlProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceControlProcessor * _Nonnull shared;)
+ (ZHJDeviceControlProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 接收到设备主动发来的数据
- (void)readDeviceControlRealTimeDataWithTakePhotoContrlHandle:(void (^ _Nonnull)(NSInteger))takePhotoContrlHandle musicContrlHandle:(void (^ _Nonnull)(NSInteger))musicContrlHandle findContrlHandle:(void (^ _Nonnull)(NSInteger))findContrlHandle;
/// 查找设备
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)findDeviceWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 退出拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoCancelWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJDeviceControlType, open) {
  ZHJDeviceControlTypeCall = 0,
  ZHJDeviceControlTypeSos = 1,
  ZHJDeviceControlTypePhoto = 2,
  ZHJDeviceControlTypeMusic = 3,
  ZHJDeviceControlTypeFind = 4,
  ZHJDeviceControlTypeQuickReply = 5,
  ZHJDeviceControlTypeFamilyCall = 6,
  ZHJDeviceControlTypeGps = 7,
  ZHJDeviceControlTypeDefault = 8,
};


@class ZHJSportConfig;

SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceFeatureProcessor")
@interface ZHJDeviceFeatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceFeatureProcessor * _Nonnull shared;)
+ (ZHJDeviceFeatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动模式配置
/// \param sportConfigHandle 读取后的设备数据返回
///
- (void)readSportConfigWithSportConfigHandle:(void (^ _Nonnull)(ZHJSportConfig * _Nonnull))sportConfigHandle;
/// 写入通知配置
/// \param sportConfig 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSportConfigWithSportConfig:(ZHJSportConfig * _Nonnull)sportConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDeviceFirmware")
@interface ZHJDeviceFirmware : NSObject
/// 版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 升级包下载路径
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 文件名称
@property (nonatomic, copy) NSString * _Nonnull fileName;
/// 提示内容
@property (nonatomic, copy) NSString * _Nonnull tip;
/// 是否升级
@property (nonatomic) BOOL update;
/// 是否强制升级
@property (nonatomic) BOOL forceUpdate;
/// 设备类型 0 noridc,1手机，2.Telink
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceInfoProcessor")
@interface ZHJDeviceInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceInfoProcessor * _Nonnull shared;)
+ (ZHJDeviceInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 手动读取设备信息
/// \param deviceInfoHandle 设备信息返回
///
- (void)readDeviceInfoWithDeviceInfoHandle:(void (^ _Nonnull)(ZHJBTDevice * _Nonnull))deviceInfoHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJDial")
@interface ZHJDial : NSObject
/// 背景图(后景)
@property (nonatomic, strong) UIImage * _Nullable image;
/// 背景图(后景)网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 模板图（前景）
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 模板图（前景）网络地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
/// 表盘(模板前景)ID编号，设备自带需严格按照自带序号来填写
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1用户自定义
@property (nonatomic) NSInteger type;
/// 图片实际数据格式，0:16bit rgb(565)(默认) 1:16bit bgr(565)(预留) 2:24bit rgb(888)(预留)
@property (nonatomic) NSInteger format;
/// 主题背景图片尺寸
@property (nonatomic) CGSize imageSize;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响（服务器可忽略此属性）
@property (nonatomic) BOOL isSelected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJDialB")
@interface ZHJDialB : NSObject
/// 网络扩展属性， 服务器自增编号，用于上传表盘
@property (nonatomic) NSInteger serverId;
/// 网络扩展属性，分类ID
@property (nonatomic) NSInteger categoryId;
/// 网络扩展属性，设备适配ID，一个设备型号对应唯一的adapterId，用于查询该设备的表盘配置信息
@property (nonatomic) NSInteger adapterId;
/// 表盘编号
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1自定义
@property (nonatomic) NSInteger type;
/// 表盘预览图网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 表盘bin文件网络地址
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 表盘文件数据，通过fileUrl获取
@property (nonatomic, copy) NSData * _Nonnull fileData;
/// 表盘物理尺寸，用于用户自动表盘时的发送
@property (nonatomic) CGSize dialSize;
/// 背景图(后景),  用于自定义表盘发送，如是用户自定义背景的表盘，则需要给此属性赋值
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
/// 扩展属性，模板图（前景，与backgroundImage叠加成一张表盘图片），  用于自定义表盘本地存储，不对表盘发送产生实质影响
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响
@property (nonatomic) BOOL isSelected;
/// 扩展属性，是否当前设备正在显示的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isCurrent;
/// 扩展属性，是否当前设备已安装并且存在在当前的设备的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isInstalled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialBCategory")
@interface ZHJDialBCategory : NSObject
/// 表盘类别id
@property (nonatomic) NSInteger id;
/// 标签名称
@property (nonatomic, copy) NSString * _Nonnull categoryName;
/// 表盘数组
@property (nonatomic, copy) NSArray<ZHJDialB *> * _Nonnull dials;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJDialBConfig")
@interface ZHJDialBConfig : NSObject
/// 适配ID，用于请求分类表盘的详细信息
@property (nonatomic) NSInteger adapterId;
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 设备分类
@property (nonatomic, copy) NSArray<ZHJDialBCategory *> * _Nonnull dialALables;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 手表当前显示的表盘
@property (nonatomic) NSInteger currentDialID;
/// 手表现有已安装的表盘
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull installedIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDialBProcessor")
@interface ZHJDialBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialBProcessor * _Nonnull shared;)
+ (ZHJDialBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备的表盘基础信息（表盘id与表盘状态）
/// \param dialBBaseInfoBlock 信息返回
///
- (void)readDialBaseInfoWithDialBBaseInfoBlock:(void (^ _Nonnull)(NSArray<ZHJDialB *> * _Nonnull))dialBBaseInfoBlock;
/// 删除表盘
/// \param dialID 表盘ID
///
/// \param setHandle 删除结果
///
- (void)deleteDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送表盘到设备
/// \param dial 表盘模型
///
/// \param progress 发送进度回调
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
- (void)sendDialWithDial:(ZHJDialB * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 切换表盘
/// \param dialID 表盘ID
///
/// \param setHandle 切换结果回调
///
- (void)switchDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJDialConfig")
@interface ZHJDialConfig : NSObject
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘尺寸，例：80<em>160，240</em>240，中间用“|”符号隔开
@property (nonatomic, copy) NSString * _Nonnull dialSizeString;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 表盘尺寸字符串
@property (nonatomic, copy) NSString * _Nonnull dialShapeString;
/// 设备表盘
@property (nonatomic, copy) NSArray<ZHJDial *> * _Nonnull details;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 模板
@property (nonatomic, copy) NSArray<DialTemplate *> * _Nonnull templates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialProcessor")
@interface ZHJDialProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialProcessor * _Nonnull shared;)
+ (ZHJDialProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)sendDialWithDial:(ZHJDial * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 接收到蓝牙数据的通知处理
/// \param notify 通知数据
///
- (void)dataDidReceivedWithNotification:(NSNotification * _Nonnull)notification;
@end

@class ZHJTime;

SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJDrinkWaterConfig")
@interface ZHJDrinkWaterConfig : NSObject
/// 提醒时间段数组
@property (nonatomic, copy) NSArray<ZHJTime *> * _Nonnull reminderArray;
/// 提醒开关
@property (nonatomic) BOOL reminderSwitch;
/// 喝水目标
@property (nonatomic) NSInteger target;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 这个类能处理多类型事件，如有需要则要修改下参数命名等，暂只处理喝水
SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJDrinkWaterConfigProcessor")
@interface ZHJDrinkWaterConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDrinkWaterConfigProcessor * _Nonnull shared;)
+ (ZHJDrinkWaterConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取事件提醒
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readDrinkWaterConfigWithDrinkWaterConfigHandle:(void (^ _Nonnull)(ZHJDrinkWaterConfig * _Nonnull))drinkWaterConfigHandle;
/// 写入提醒事件
/// \param sedentary 事件数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDrinkWaterConfigWithDrinkWaterConfig:(ZHJDrinkWaterConfig * _Nonnull)drinkWaterConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth6ZHJECG")
@interface ZHJECG : ZHJDeviceDataBaseModel
/// 心率
@property (nonatomic) NSInteger HR;
/// ecg数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull ecgValues;
/// 增益
@property (nonatomic) CGFloat gain;
/// 走速
@property (nonatomic) CGFloat speed;
/// 心电结果数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull results;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZHJECG (SWIFT_EXTENSION(TrusangBluetooth))
- (BOOL)isException SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJECGProcessor")
@interface ZHJECGProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJECGProcessor * _Nonnull shared;)
+ (ZHJECGProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)ecgStartWithStartHandle:(void (^ _Nonnull)(enum ZHJBLEError))startHandle;
- (void)ecgEndWithEndHandle:(void (^ _Nonnull)(enum ZHJBLEError))endHandle;
/// 获取单次心电数据
/// \param ecgHandle 数据返回
///
- (void)readEcgHistoryRecordWithEcgHandle:(void (^ _Nonnull)(ZHJECG * _Nonnull))ecgHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
- (void)readECGWithMeasuring:(void (^ _Nonnull)(CGFloat))measuring;
- (void)readHeartRateWithHeartRate:(void (^ _Nonnull)(NSInteger))heartRate;
- (void)readECGStateWithMeasuringState:(void (^ _Nonnull)(enum ECGMeasuringState))measuringState;
- (void)readECGReportWithReport:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nonnull))report;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJEnablePairProcessor")
@interface ZHJEnablePairProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJEnablePairProcessor * _Nonnull shared;)
+ (ZHJEnablePairProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送开启配对指令
- (void)enablePairWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJFamliyCallContrl, open) {
/// 无效
  ZHJFamliyCallContrlDefault = 0x00,
/// 开始呼叫
  ZHJFamliyCallContrlStart = 0x01,
/// 结束呼叫
  ZHJFamliyCallContrlEnd = 0x02,
};

typedef SWIFT_ENUM(NSInteger, ZHJFindContrl, open) {
/// 无效
  ZHJFindContrlDefault = 0x00,
/// 查找
  ZHJFindContrlFind = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth27ZHJFirmwareUpgradeProcessor")
@interface ZHJFirmwareUpgradeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJFirmwareUpgradeProcessor * _Nonnull shared;)
+ (ZHJFirmwareUpgradeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 进入升级模式
- (void)startFirmwareUpgradeWithReadHandle:(void (^ _Nonnull)(enum ZHJBLEError))readHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJGPSContrl, open) {
/// 无效
  ZHJGPSContrlDefault = 0x00,
/// 开启
  ZHJGPSContrlEnable = 0x01,
/// 关闭
  ZHJGPSContrlDisable = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHRAlarm_t")
@interface ZHJHRAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJHRTimingDetect_t")
@interface ZHJHRTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJHeartRateDetail;
@class ZHJHeartRate;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJHR_BP_BOProcessor")
@interface ZHJHR_BP_BOProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJHR_BP_BOProcessor * _Nonnull shared;)
+ (ZHJHR_BP_BOProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除心率血压血氧历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearHR_BP_BORecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置心率告警区间
/// \param maxHR 最大心率
///
/// \param minHR 最小心率
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setHeartRateAlarmLimitWithMaxHR:(NSInteger)maxHR minHR:(NSInteger)minHR isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率、血压、血氧告警区间(与设置心率的方法二选一)
/// \param HRAlarm 心率告警模型
///
/// \param BPAlarm 血压告警模型
///
/// \param BOAlarm 血氧告警模型
///
/// \param setHandle 设置返回
///
- (void)setHR_BP_BOAlarmLimitWithHRAlarm:(ZHJHRAlarm_t * _Nonnull)HRAlarm BPAlarm:(ZHJBPAlarm_t * _Nonnull)BPAlarm BOAlarm:(ZHJBOAlarm_t * _Nonnull)BOAlarm setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectHeartRateWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 开始心率检测
/// \param setHandle 设置返回
///
- (void)startDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 结束心率检测
/// \param setHandle 设置返回
///
- (void)endDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备心率血压血氧数据
/// \param currentStepHandle 当前心率血压血氧数据返回
///
- (void)readCurrentHR_BP_BOWithCurrentDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull))currentDataHandle;
/// 获取手环心率高、低报警限制开启使能设置
/// \param HRAlarmHandle 设置返回
///
- (void)readHeartAlarmSettingWithHRAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull))HRAlarmHandle;
/// 获取手环心率、血压、血氧报警限制开启使能设置
/// \param alarmHandle 设置返回
///
- (void)readHR_BP_BOAlarmSettingWithAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull, ZHJBPAlarm_t * _Nonnull, ZHJBOAlarm_t * _Nonnull))alarmHandle;
/// 获取手环自动心率采样设置
/// \param HRTimingDetectHandle 设置返回
///
- (void)readHeartTimingDetectSettingWithHRTimingDetectHandle:(void (^ _Nonnull)(ZHJHRTimingDetect_t * _Nonnull))HRTimingDetectHandle;
/// 设置心率、舒张压、收缩压、血氧校准值
/// \param HR 心率
///
/// \param DBP 舒张压
///
/// \param SBP 收缩压
///
/// \param BO 血氧
///
/// \param setHandle 设置结果回调
///
- (void)setHR_BP_BOCalibrationWithHR:(NSInteger)HR DBP:(NSInteger)DBP SBP:(NSInteger)SBP BO:(NSInteger)BO setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取心率血压血氧校准数据
/// \param currentStepHandle 依次返回心率、舒张压、收缩压、血氧校准值
///
- (void)readHR_BP_BOCalibrationWithHR_BP_BOCalibrationHandle:(void (^ _Nonnull)(NSInteger, NSInteger, NSInteger, NSInteger))HR_BP_BOCalibrationHandle;
/// 获取历史心率血压血氧记录
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readHR_BP_BOHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJHeartRate * _Nonnull, ZHJBloodPressure * _Nonnull, ZHJBloodOxygen * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJHR_BP_BOSelectType, open) {
/// 获取当前心率、血压、血氧数据(设备显示)
  ZHJHR_BP_BOSelectTypeCurrentHR_BP_BO = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJHR_BP_BOSelectTypeHistoryHR_BP_BO = 0x01,
/// 清除所有数据
  ZHJHR_BP_BOSelectTypeClearAll = 0x02,
/// 设置心率高、低限制开启使能
  ZHJHR_BP_BOSelectTypeHR_Max_Min = 0x03,
/// 设置自动心率采样
  ZHJHR_BP_BOSelectTypeAutoDetect_HR = 0x04,
/// APP 设置设备进入心率检测模式
  ZHJHR_BP_BOSelectTypeStartDetect_HR = 0x05,
/// APP 设置设备退出心率检测模式
  ZHJHR_BP_BOSelectTypeEndDetect_HR = 0x06,
/// 获取手环心率高、低限制开启使能设置
  ZHJHR_BP_BOSelectTypeGET_HR_Max_Min = 0x07,
/// 获取手环自动心率采样设置
  ZHJHR_BP_BOSelectTypeGET_autoDetect_HR = 0x08,
  ZHJHR_BP_BOSelectTypeHR_BP_BOCalibration = 0x09,
/// 获取心率血压血氧校准值
  ZHJHR_BP_BOSelectTypeGET_HR_BP_BOCalibration = 0x0a,
};


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHealthDataAlarm")
@interface ZHJHealthDataAlarm : NSObject
/// 报警数据类型
@property (nonatomic) enum HealthDataAlarmType type;
/// 值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHeartRate")
@interface ZHJHeartRate : ZHJDeviceDataBaseModel
/// 最大心率
@property (nonatomic) NSInteger max;
/// 最小心率
@property (nonatomic) NSInteger min;
/// 平均心率
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJHeartRateDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHeartRateDetail")
@interface ZHJHeartRateDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 心率值
@property (nonatomic) NSInteger HR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJMessageNotice")
@interface ZHJMessageNotice : NSObject
@property (nonatomic) BOOL twitter;
@property (nonatomic) BOOL facebook;
@property (nonatomic) BOOL email;
@property (nonatomic) BOOL sms;
@property (nonatomic) BOOL incoming;
@property (nonatomic) BOOL whatsapp;
@property (nonatomic) BOOL line;
@property (nonatomic) BOOL skype;
@property (nonatomic) BOOL qq;
@property (nonatomic) BOOL wechat;
@property (nonatomic) BOOL instagram;
@property (nonatomic) BOOL linkedin;
@property (nonatomic) BOOL messenger;
@property (nonatomic) BOOL vk;
@property (nonatomic) BOOL viber;
@property (nonatomic) BOOL dingtalk;
@property (nonatomic) BOOL telegram;
@property (nonatomic) BOOL sinaweibo;
@property (nonatomic) BOOL kakao;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJMessageNoticeProcessor")
@interface ZHJMessageNoticeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageNoticeProcessor * _Nonnull shared;)
+ (ZHJMessageNoticeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取消息通知配置(暂时支持16种应用消息)
/// \param messageNoticeHandle 读取后的设备数据返回
///
- (void)readMessageNoticeWithMessageNoticeHandle:(void (^ _Nonnull)(ZHJMessageNotice * _Nonnull))messageNoticeHandle;
/// 写入通知配置
/// \param notice 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeMessageNotice:(ZHJMessageNotice * _Nonnull)notice setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMessageNoticeType, open) {
  ZHJMessageNoticeTypeTwitter = 0,
  ZHJMessageNoticeTypeFacebook = 1,
  ZHJMessageNoticeTypeEmail = 2,
  ZHJMessageNoticeTypeSms = 3,
  ZHJMessageNoticeTypeIncoming = 4,
  ZHJMessageNoticeTypeWhatsapp = 5,
  ZHJMessageNoticeTypeLine = 6,
  ZHJMessageNoticeTypeSkype = 7,
  ZHJMessageNoticeTypeQq = 8,
  ZHJMessageNoticeTypeWechat = 9,
  ZHJMessageNoticeTypeInstagram = 10,
  ZHJMessageNoticeTypeLinkedin = 11,
  ZHJMessageNoticeTypeMessager = 12,
  ZHJMessageNoticeTypeVk = 13,
  ZHJMessageNoticeTypeViber = 14,
  ZHJMessageNoticeTypeDingtalk = 15,
  ZHJMessageNoticeTypeTelegram = 16,
  ZHJMessageNoticeTypeSinaweibo = 17,
};


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJMessageProcessor")
@interface ZHJMessageProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageProcessor * _Nonnull shared;)
+ (ZHJMessageProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送自定义消息
- (void)sendMessageWithMessage:(NSString * _Nonnull)message setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送震动
- (void)sendVibrate;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMusicContrl, open) {
/// 无效
  ZHJMusicContrlDefault = 0x00,
/// 播放/暂停
  ZHJMusicContrlPlayPause = 0x01,
/// 上一首
  ZHJMusicContrlPrevious = 0x02,
/// 下一首
  ZHJMusicContrlNext = 0x03,
/// 停止
  ZHJMusicContrlStop = 0x04,
/// 音量+
  ZHJMusicContrlVolumePlus = 0x05,
/// 音量-
  ZHJMusicContrlVolumeDecrease = 0x06,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJPairingCodeProcessor")
@interface ZHJPairingCodeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJPairingCodeProcessor * _Nonnull shared;)
+ (ZHJPairingCodeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送4位随机配对码
- (NSString * _Nonnull)sendPairingCodeWithPairResult:(void (^ _Nonnull)(enum ZHJBLEError))pairResult SWIFT_WARN_UNUSED_RESULT;
/// 关闭手环配对码页面
/// 关闭手环配对码页面
/// \param pairCodeError 配对码是否错误（由APP来判断）
///
/// \param setHandle 设备回应
///
- (void)closePairingCodeUIWithPairCodeError:(BOOL)pairCodeError setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJPhotoContrl, open) {
/// 无效
  ZHJPhotoContrlDefault = 0x00,
/// 开始拍照
  ZHJPhotoContrlStart = 0x01,
/// 拍照
  ZHJPhotoContrlTakePhoto = 0x02,
/// 结束拍照
  ZHJPhotoContrlEnd = 0x03,
};

typedef SWIFT_ENUM(NSInteger, ZHJQuickReplyContrl, open) {
/// 无效
  ZHJQuickReplyContrlDefault = 0x00,
/// 开始回复
  ZHJQuickReplyContrlStart = 0x01,
/// 取消回复
  ZHJQuickReplyContrlCancel = 0x02,
};

@class ZHJStepDetail;
@class ZHJTemperatureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth30ZHJRealTimeHealthDataProcessor")
@interface ZHJRealTimeHealthDataProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJRealTimeHealthDataProcessor * _Nonnull shared;)
+ (ZHJRealTimeHealthDataProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取实时健康数据
/// \param readHealthDataHandle 实时健康数据回调
///
- (void)readRealTimeHealthDataWithReadHealthDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull, ZHJStepDetail * _Nonnull, ZHJTemperatureDetail * _Nonnull))readHealthDataHandle;
/// 接收实时健康数据预警
/// \param alarms 预警数据数组
///
/// \param healthDataAlarmHandle 预警回调
///
- (void)realTimeHealthDataAlarmDidReceivedWithHealthDataAlarmHandle:(void (^ _Nonnull)(NSArray<ZHJHealthDataAlarm *> * _Nonnull))healthDataAlarmHandle;
@end

enum ZHJServerStatusCode : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSDKNetworkService")
@interface ZHJSDKNetworkService : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSDKNetworkService * _Nonnull shared;)
+ (ZHJSDKNetworkService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 查询固件升级信息
/// \param model 设备型号
///
/// \param version 设备固件版本号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectFirmwareUpgradeWithModel:(NSString * _Nonnull)model version:(NSString * _Nonnull)version success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDeviceFirmware * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置信息
/// \param model 设备型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectDialConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param model 型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)selectDialBConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialBConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param adapterId 型号适配ID
///
/// \param categoryId 分类ID
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)getDialBFromCategoryWithAdapterId:(NSInteger)adapterId categoryId:(NSInteger)categoryId success:(void (^ _Nonnull)(enum ZHJServerStatusCode, NSArray<ZHJDialB *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJServerStatusCode, open) {
/// 初始状态，默认
  ZHJServerStatusCodeDefault = 0,
/// 请求成功
  ZHJServerStatusCodeDone = 200,
/// 请求失败
  ZHJServerStatusCodeFail = 500,
};

typedef SWIFT_ENUM(NSInteger, ZHJSOSContrl, open) {
/// 无效
  ZHJSOSContrlDefault = 0x00,
/// 呼叫SOS
  ZHJSOSContrlAnswer = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSedentary")
@interface ZHJSedentary : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 生效开始时间（小时）
@property (nonatomic) NSInteger beginTime;
/// 生效结束时间（小时）
@property (nonatomic) NSInteger endTime;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 检测周期（单位5分钟） 范围0~255，当为0时由设备自行决策检测时间
@property (nonatomic) NSInteger intervals;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSedentaryProcessor")
@interface ZHJSedentaryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSedentaryProcessor * _Nonnull shared;)
+ (ZHJSedentaryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备久坐设置
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readSedentaryWithSedentaryHandle:(void (^ _Nonnull)(ZHJSedentary * _Nonnull))sedentaryHandle;
/// 写入久坐提醒
/// \param sedentary 久坐数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSedentary:(ZHJSedentary * _Nonnull)sedentary setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSex, open) {
/// 男
  ZHJSexMale = 0x00,
/// 女
  ZHJSexFemale = 0x01,
/// 未知其他
  ZHJSexUnknow = 0x02,
};

@class ZHJSleepDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJSleep")
@interface ZHJSleep : ZHJDeviceDataBaseModel
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJSleepDetail *> * _Nonnull details;
/// 入睡睡眠时长
@property (nonatomic) NSInteger beginDuration;
/// 浅睡时长
@property (nonatomic) NSInteger lightDuration;
/// 深睡时长
@property (nonatomic) NSInteger deepDuration;
/// 清醒时长
@property (nonatomic) NSInteger awakeDuration;
/// 快速眼动时长
@property (nonatomic) NSInteger REMDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSleepDetail")
@interface ZHJSleepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 睡眠类型 ZHJSleepType
@property (nonatomic) NSInteger type;
/// 时长单位分
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSleepType, open) {
/// 入睡
  ZHJSleepTypeBegin = 0x01,
/// 浅睡
  ZHJSleepTypeLight = 0x02,
/// 深睡
  ZHJSleepTypeDeep = 0x03,
/// 清醒
  ZHJSleepTypeAwake = 0x04,
/// 快速眼动睡眠
  ZHJSleepTypeREM = 0x05,
};


/// 用于自定义手环运动模式
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportConfig")
@interface ZHJSportConfig : NSObject
/// 步行(室外)
@property (nonatomic) BOOL walk;
/// 跑步(室外)
@property (nonatomic) BOOL run;
/// 游泳
@property (nonatomic) BOOL swim;
/// 骑行(室外)
@property (nonatomic) BOOL ride;
/// 室内跑步
@property (nonatomic) BOOL indoorRun;
/// 自由训练
@property (nonatomic) BOOL freeTrain;
/// 足球
@property (nonatomic) BOOL football;
/// 篮球
@property (nonatomic) BOOL basketball;
/// 羽毛球
@property (nonatomic) BOOL badminton;
/// 跳绳
@property (nonatomic) BOOL ropeSkip;
/// 俯卧撑
@property (nonatomic) BOOL pushUps;
/// 仰卧起坐
@property (nonatomic) BOOL sitUps;
/// 登山
@property (nonatomic) BOOL climb;
/// 网球
@property (nonatomic) BOOL tennis;
/// 高强度训练
@property (nonatomic) BOOL HIT;
/// 室内骑行
@property (nonatomic) BOOL indoorBike;
/// 健身
@property (nonatomic) BOOL fitness;
/// 橄榄球
@property (nonatomic) BOOL rugby;
/// 高尔夫球
@property (nonatomic) BOOL golf;
/// 动感单车
@property (nonatomic) BOOL happyBike;
/// 举重
@property (nonatomic) BOOL weightlift;
/// 轮滑
@property (nonatomic) BOOL rollerSkate;
/// 跳舞
@property (nonatomic) BOOL dance;
/// 瑜伽
@property (nonatomic) BOOL yoga;
/// 室内步行
@property (nonatomic) BOOL indoorWalk;
/// 徒步
@property (nonatomic) BOOL onFoot;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSportMode")
@interface ZHJSportMode : ZHJDeviceDataBaseModel
/// 运动类型 ZHJSportModeType
@property (nonatomic) NSInteger sportType;
/// 时长
@property (nonatomic) NSInteger duration;
/// 步数
@property (nonatomic) NSInteger step;
/// 心率
@property (nonatomic) NSInteger heartRate;
/// 配速
@property (nonatomic) NSInteger pace;
/// 速度
@property (nonatomic) NSInteger speed;
/// 卡路里
@property (nonatomic) NSInteger calories;
/// 距离
@property (nonatomic) NSInteger distance;
/// 采样间隔
@property (nonatomic) NSInteger interval;
/// 心率详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull heartRateArr;
/// 计步详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stepArr;
/// 配速详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull paceArr;
/// 经纬度数组 字符串数组 [纬度|经度, 纬度|经度, 纬度|经度]
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull coordinateArr;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeDataType, open) {
/// 单次运动数据总记录
  ZHJSportModeDataTypeSummary = 0x00,
/// 单次采样间隔数据(详情)
  ZHJSportModeDataTypeDetail = 0x01,
/// 传输完成
  ZHJSportModeDataTypeDone = 0x02,
/// 无运动记录
  ZHJSportModeDataTypeNoRecord = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSportModeProcessor")
@interface ZHJSportModeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportModeProcessor * _Nonnull shared;)
+ (ZHJSportModeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除运动历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearSportModeRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 获取单次运动模式数据
/// \param sportModeHandle 数据返回
///
- (void)readSportModeHistoryRecordWithSportModeHandle:(void (^ _Nonnull)(ZHJSportMode * _Nullable))sportModeHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeType, open) {
/// 🚶步行
  ZHJSportModeTypeWalk = 0x00,
/// 🏃跑步
  ZHJSportModeTypeRun = 0x01,
/// 🏊‍♀️游泳
  ZHJSportModeTypeSwim = 0x02,
/// 🚴骑行
  ZHJSportModeTypeRide = 0x03,
/// 🏠室内跑
  ZHJSportModeTypeIndoorRun = 0x04,
/// 🏋自由训练
  ZHJSportModeTypeFreeTrain = 0x05,
/// ⚽️足球
  ZHJSportModeTypeFootball = 0x06,
/// 🏀篮球
  ZHJSportModeTypeBasketball = 0x07,
/// 🏸羽毛球
  ZHJSportModeTypeBadminton = 0x08,
/// 跳绳
  ZHJSportModeTypeRopeSkip = 0x09,
/// 俯卧撑
  ZHJSportModeTypePushUps = 0x0A,
/// 仰卧起坐
  ZHJSportModeTypeSitUps = 0x0B,
/// 登山
  ZHJSportModeTypeClimb = 0x0C,
/// 网球
  ZHJSportModeTypeTennis = 0x0D,
/// 高强度训练
  ZHJSportModeTypeHIT = 0x0E,
/// 室内骑行
  ZHJSportModeTypeIndoorBike = 0x0F,
/// 健身
  ZHJSportModeTypeFitness = 0x10,
/// 橄榄球
  ZHJSportModeTypeRugby = 0x11,
/// 高尔夫球
  ZHJSportModeTypeGolf = 0x12,
/// 动感单车
  ZHJSportModeTypeHappyBike = 0x13,
/// 举重
  ZHJSportModeTypeWeightlift = 0x14,
/// 轮滑
  ZHJSportModeTypeRollerSkate = 0x15,
/// 跳舞
  ZHJSportModeTypeDance = 0x16,
/// 瑜伽
  ZHJSportModeTypeYoga = 0x17,
/// 室内步行
  ZHJSportModeTypeIndoorWalk = 0x18,
/// 徒步
  ZHJSportModeTypeOnFoot = 0x19,
/// 棒球
  ZHJSportModeTypeBaseball = 0x1A,
/// 滑板
  ZHJSportModeTypeSkateboard = 0x1B,
/// 冰球
  ZHJSportModeTypeIceHockey = 0x1C,
/// 滑雪
  ZHJSportModeTypeSkiing = 0x1D,
/// 赛车
  ZHJSportModeTypeRacingCar = 0x1E,
/// 健走
  ZHJSportModeTypeFastWalking = 0x1F,
/// 椭圆机
  ZHJSportModeTypeEllipticalMachine = 0x20,
/// 力量训练
  ZHJSportModeTypeStrengthTraining = 0x21,
/// 划船机
  ZHJSportModeTypeRowingMachine = 0x22,
/// 平板支撑
  ZHJSportModeTypePlankExercise = 0x23,
/// 开合跳
  ZHJSportModeTypeJumpingMovement = 0x24,
/// 波比跳
  ZHJSportModeTypeBobbyJump = 0x25,
/// 深蹲
  ZHJSportModeTypeSquatMovement = 0x26,
/// 高抬腿运动
  ZHJSportModeTypeHighLegLiftExercise = 0x27,
/// 臂力训练
  ZHJSportModeTypeArmStrengthTraining = 0x28,
/// 腿部训练
  ZHJSportModeTypeLegTraining = 0x29,
/// 踏步机
  ZHJSportModeTypeStepper = 0x2A,
/// 漫步器
  ZHJSportModeTypeWalker = 0x2B,
/// 健身操
  ZHJSportModeTypeAerobics = 0x2C,
/// 团体操
  ZHJSportModeTypeGroupGymnastics = 0x2D,
/// 普拉提
  ZHJSportModeTypePilates = 0x2E,
/// Cross fit
  ZHJSportModeTypeCrossFit = 0x2F,
/// 功能性训练
  ZHJSportModeTypeFunctionalTraining = 0x30,
/// 体能训练
  ZHJSportModeTypePhysicaTraining = 0x31,
/// 跆拳道
  ZHJSportModeTypeTaekwondo = 0x32,
/// 拳击
  ZHJSportModeTypeBoxing = 0x33,
/// 自由搏击
  ZHJSportModeTypeFreeSparring = 0x34,
/// 空手道
  ZHJSportModeTypeKarate = 0x35,
/// 击剑
  ZHJSportModeTypeFencing = 0x36,
/// 核心训练
  ZHJSportModeTypeCoreTraining = 0x37,
/// 搏击操
  ZHJSportModeTypeFightTraining = 0x38,
/// 剑道
  ZHJSportModeTypeKendo = 0x39,
/// 单杠
  ZHJSportModeTypeHorizontalBar = 0x3A,
/// 双杠
  ZHJSportModeTypeParallelBars = 0x3B,
/// 肚皮舞
  ZHJSportModeTypeBellyDance = 0x3C,
/// 爵士舞
  ZHJSportModeTypeJazz = 0x3D,
/// 拉丁舞
  ZHJSportModeTypeLatinDance = 0x3E,
/// 芭蕾
  ZHJSportModeTypeBallet = 0x3F,
/// 街舞
  ZHJSportModeTypeStreetDance = 0x40,
/// 广场舞
  ZHJSportModeTypeSquareDance = 0x41,
/// 武术
  ZHJSportModeTypeMartialArts = 0x42,
/// 太极拳
  ZHJSportModeTypeTaiChi = 0x43,
/// 呼啦圈
  ZHJSportModeTypeHulaHoop = 0x44,
/// 飞盘
  ZHJSportModeTypeFrisbee = 0x45,
/// 飞镖
  ZHJSportModeTypeDarts = 0x46,
/// 射箭
  ZHJSportModeTypeArchery = 0x47,
/// 骑马
  ZHJSportModeTypeHorseRiding = 0x48,
/// 对战游戏
  ZHJSportModeTypeBattleGame = 0x49,
/// 放风筝
  ZHJSportModeTypeFlyKite = 0x4A,
/// 拔河
  ZHJSportModeTypeTugOfWar = 0x4B,
/// 秋千
  ZHJSportModeTypeSwing = 0x4C,
/// 爬楼
  ZHJSportModeTypeClimbStairs = 0x4D,
/// 障碍赛
  ZHJSportModeTypeObstacleCourse = 0x4E,
/// 钓鱼
  ZHJSportModeTypeFishing = 0x4F,
/// 乒乓球
  ZHJSportModeTypePingpong = 0x50,
/// 台球
  ZHJSportModeTypeBilliards = 0x51,
/// 保龄球
  ZHJSportModeTypeBowling = 0x52,
/// 排球
  ZHJSportModeTypeVolleyball = 0x53,
/// 毽球
  ZHJSportModeTypeShuttlecock = 0x54,
/// 手球
  ZHJSportModeTypeHandball = 0x55,
/// 垒球
  ZHJSportModeTypeSoftball = 0x56,
/// 板球
  ZHJSportModeTypeCricketBall = 0x57,
/// 沙滩足球
  ZHJSportModeTypeBeachFootball = 0x58,
/// 门球
  ZHJSportModeTypeCroquet = 0x59,
/// 曲棍球
  ZHJSportModeTypeHockey = 0x5A,
/// 壁球
  ZHJSportModeTypeSquash = 0x5B,
/// 藤球
  ZHJSportModeTypeSepakTakraw = 0x5C,
/// 躲避球
  ZHJSportModeTypeDodgeBall = 0x5D,
/// 滑冰
  ZHJSportModeTypeSkate = 0x5E,
/// 冰壶
  ZHJSportModeTypeCurling = 0x5F,
/// 雪车
  ZHJSportModeTypeSnowCar = 0x60,
/// 雪橇
  ZHJSportModeTypeSled = 0x61,
/// 冬季两项
  ZHJSportModeTypeBiathlon = 0x62,
/// 攀岩
  ZHJSportModeTypeRockClimbing = 0x63,
/// 蹦极
  ZHJSportModeTypeBungeeJumping = 0x64,
/// 跑酷
  ZHJSportModeTypeParkour = 0x65,
/// BMX
  ZHJSportModeTypeBMX = 0x66,
/// 定向越野
  ZHJSportModeTypeOrienteering = 0x67,
/// 跳伞
  ZHJSportModeTypeParachute = 0x68,
/// 其他
  ZHJSportModeTypeDefault = 0xFF,
};

@class ZHJSportTargetInfo;

/// 设备运动目标
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportTarget")
@interface ZHJSportTarget : NSObject
/// 睡眠目标(单位小时)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull sleepTarget;
/// 计步目标
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull stepTarget;
/// 卡路里目标(单位大卡)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull caloriesTarget;
/// 距离目标(单位 KM)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull distanceTarget;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJSportTargetInfo")
@interface ZHJSportTargetInfo : NSObject
/// 是否开启
@property (nonatomic) BOOL enable;
/// 目标值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJSportTargetProcessor")
@interface ZHJSportTargetProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportTargetProcessor * _Nonnull shared;)
+ (ZHJSportTargetProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动目标信息
/// \param sportTargetHandle 读取后的设备数据返回
///
- (void)readSportTargetWithSportTargetHandle:(void (^ _Nonnull)(ZHJSportTarget * _Nonnull))sportTargetHandle;
/// 写入运动目标
/// \param target 运动目标
///
/// \param setHandel 写入后的设备数据返回
///
- (void)writeSportTarget:(ZHJSportTarget * _Nonnull)target setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportTargetType, open) {
/// 睡眠目标
  ZHJSportTargetTypeSleep = 0,
/// 步数目标
  ZHJSportTargetTypeStep = 1,
/// 卡路里目标
  ZHJSportTargetTypeCalories = 2,
/// 距离目标
  ZHJSportTargetTypeDistance = 3,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJStep")
@interface ZHJStep : ZHJDeviceDataBaseModel
/// 总步数
@property (nonatomic) NSInteger step;
/// 总卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 总距离 单位米
@property (nonatomic) CGFloat distance;
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJStepDetail *> * _Nonnull details;
/// 运动时长 单位分钟
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepDataType, open) {
/// 走路
  ZHJStepAndSleepDataTypeWalk = 0x00,
/// 跑步
  ZHJStepAndSleepDataTypeRun = 0x01,
/// 慢跑
  ZHJStepAndSleepDataTypeSlowRun = 0x02,
/// 睡眠相关数据（睡眠标志)
  ZHJStepAndSleepDataTypeSleep = 0x0F,
};


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJStepAndSleepProcessor")
@interface ZHJStepAndSleepProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJStepAndSleepProcessor * _Nonnull shared;)
+ (ZHJStepAndSleepProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除计步睡眠历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearStepAndSleepRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 读取当前设备计步数据
/// \param currentStepHandle 当前计步数据返回
///
- (void)readCurrentStepWithCurrentStepHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull))currentStepHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDataHandle 历史数据返回
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readStepAndSleepHistoryRecordWithDate:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull, ZHJSleep * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepSelectType, open) {
/// 当前计步
  ZHJStepAndSleepSelectTypeCurrentStep = 0x00,
/// 历史计步和睡眠
  ZHJStepAndSleepSelectTypeHistoryStepAndSleep = 0x01,
/// 清除所有计步和睡眠数据
  ZHJStepAndSleepSelectTypeClearAll = 0x02,
/// 最近的一次睡眠数据（暂时没用）
  ZHJStepAndSleepSelectTypeRecentSleep = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJStepDetail")
@interface ZHJStepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 计步类型 ZHJStepAndSleepDataType
@property (nonatomic) NSInteger type;
/// 卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 距离 单位米
@property (nonatomic) CGFloat distance;
/// 步数
@property (nonatomic) NSInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJSyncTime")
@interface ZHJSyncTime : NSObject
/// 年
@property (nonatomic) NSInteger year;
/// 月
@property (nonatomic) NSInteger month;
/// 日
@property (nonatomic) NSInteger day;
/// 小时
@property (nonatomic) NSInteger hour;
/// 分钟
@property (nonatomic) NSInteger minute;
/// 秒
@property (nonatomic) NSInteger second;
/// 时区
@property (nonatomic) NSInteger timeZone;
@end

@class NSDate;

@interface ZHJSyncTime (SWIFT_EXTENSION(TrusangBluetooth))
- (nonnull instancetype)init:(NSDate * _Nonnull)date;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSyncTimeProcessor")
@interface ZHJSyncTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSyncTimeProcessor * _Nonnull shared;)
+ (ZHJSyncTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备时间
/// \param syncTimeHandle 读取后的设备数据返回
///
- (void)readDeviceTimeWithSyncTimeHandle:(void (^ _Nonnull)(ZHJSyncTime * _Nonnull))syncTimeHandle;
/// 写入时间
/// \param time 时间
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeTime:(ZHJSyncTime * _Nonnull)time setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


/// 温度（单位0.01,如365，就是3.65℃）
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJTemperature")
@interface ZHJTemperature : ZHJDeviceDataBaseModel
/// 额头温度（历史数据只有手腕）
/// 最高温度
@property (nonatomic) NSInteger max;
/// 最低温度
@property (nonatomic) NSInteger min;
/// 平均温度
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJTemperatureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJTemperatureAlarm_t")
@interface ZHJTemperatureAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJTemperatureDetail")
@interface ZHJTemperatureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 手腕体温
@property (nonatomic) NSInteger wristTemperature;
/// 额头体温
@property (nonatomic) NSInteger headTemperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJTemperatureTimingDetect_t;

SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJTemperatureProcessor")
@interface ZHJTemperatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJTemperatureProcessor * _Nonnull shared;)
+ (ZHJTemperatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除体温历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearTemperatureRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置体温告警
/// \param maxTemperature 报警体温值
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setTemperatureAlarmLimitWithMaxTemperature:(NSInteger)maxTemperature isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置体温自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectTemperatureWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备体温数据
/// \param currentDataHandle 当前体温数据返回
///
- (void)readCurrentTemperatureWithCurrentDataHandle:(void (^ _Nonnull)(ZHJTemperatureDetail * _Nonnull))currentDataHandle;
/// 获取手环体温高报警设置
/// \param temperatureAlarmHandle 设置返回
///
- (void)readTemperatureAlarmSettingWithTemperatureAlarmHandle:(void (^ _Nonnull)(ZHJTemperatureAlarm_t * _Nonnull))temperatureAlarmHandle;
/// 获取手环自动体温采样设置
/// \param temperatureTimingDetectHandle 设置返回
///
- (void)readTemperatureTimingDetectSettingWithTemperatureTimingDetectHandle:(void (^ _Nonnull)(ZHJTemperatureTimingDetect_t * _Nonnull))temperatureTimingDetectHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readTemperatureHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJTemperature * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureSelectType, open) {
/// 获取当前人体温度数据(设备显示)
  ZHJTemperatureSelectTypeCurrent = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJTemperatureSelectTypeHistory = 0x01,
/// 清除所有数据
  ZHJTemperatureSelectTypeClearAll = 0x02,
/// 设置温度报警
  ZHJTemperatureSelectTypeSetAlarm = 0x03,
/// 设置自动温度采样
  ZHJTemperatureSelectTypeSetAutoDetect = 0x04,
/// 获取手环温度报警设置
  ZHJTemperatureSelectTypeGetAlarm = 0x05,
/// 获取手环自动体温采样设置
  ZHJTemperatureSelectTypeGetAutoDetect = 0x06,
/// APP 设置设备进入体温检测模式
  ZHJTemperatureSelectTypeStartDetect = 0x07,
/// APP 设置设备退出体温检测模式
  ZHJTemperatureSelectTypeEndDetect = 0x08,
};


SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJTemperatureTimingDetect_t")
@interface ZHJTemperatureTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureUnit, open) {
/// 摄氏（默认）
  ZHJTemperatureUnitCelsius = 0x00,
/// 华氏
  ZHJTemperatureUnitFahrenheit = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJTime")
@interface ZHJTime : NSObject
@property (nonatomic) NSInteger year;
@property (nonatomic) NSInteger month;
@property (nonatomic) NSInteger day;
@property (nonatomic) NSInteger hour;
@property (nonatomic) NSInteger minute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTimeMode, open) {
/// 24小时制（默认）
  ZHJTimeModeHour24 = 0x00,
/// 12小时制
  ZHJTimeModeHour12 = 0x01,
};

typedef SWIFT_ENUM(NSInteger, ZHJUnit, open) {
/// 公制（默认）
  ZHJUnitMetric = 0x00,
/// 英制
  ZHJUnitImperial = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJUserInfo")
@interface ZHJUserInfo : NSObject
/// 设备mac地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 性别(默认男，0男,1女)
@property (nonatomic) NSInteger sex;
/// 年龄 (0x06~0x64,默认 20)
@property (nonatomic) NSInteger age;
/// 身高（单位 cm，默认 170)
@property (nonatomic) NSInteger height;
/// 体重(单位 0.1kg，默认 600)
@property (nonatomic) NSInteger weight;
/// 身高描述
@property (nonatomic, copy) NSString * _Nonnull heightDesc;
/// 体重描述
@property (nonatomic, copy) NSString * _Nonnull weightDesc;
/// 生日
@property (nonatomic, copy) NSString * _Nonnull birthday;
/// 昵称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 单位0公制 1英制
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJUserInfoProcessor")
@interface ZHJUserInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJUserInfoProcessor * _Nonnull shared;)
+ (ZHJUserInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取个人信息
/// \param userInfoHandle 读取后的设备数据返回
///
- (void)readUserInfoWithUserInfoHandle:(void (^ _Nonnull)(ZHJUserInfo * _Nonnull))userInfoHandle;
/// 写入个人信息
/// \param info 个人信息对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeUserInfo:(ZHJUserInfo * _Nonnull)info setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJWearStyle, open) {
/// 左手（默认）
  ZHJWearStyleLeftHand = 0x01,
/// 右手
  ZHJWearStyleRightHand = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth10ZHJWeather")
@interface ZHJWeather : NSObject
/// 温度
@property (nonatomic, copy) NSString * _Nonnull temp;
/// 最低温度
@property (nonatomic, copy) NSString * _Nonnull temp_min;
/// 最高温度
@property (nonatomic, copy) NSString * _Nonnull temp_max;
/// 天气状态代号
@property (nonatomic, copy) NSString * _Nonnull weatherConditionCode;
/// 单位,0摄氏，1华氏
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJWeatherBProcessor")
@interface ZHJWeatherBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherBProcessor * _Nonnull shared;)
+ (ZHJWeatherBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备,支持今天的天气类型，温度，最低温和最高温，支持明天的天气类型，最低温和最高温，支持后天的天气类型，最低温和最高温
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJWeatherProcessor")
@interface ZHJWeatherProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherProcessor * _Nonnull shared;)
+ (ZHJWeatherProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJlLanguage, open) {
/// 🇬🇧英语（默认）
  ZHJlLanguageEnglish = 0x00,
/// 🇨🇳中文
  ZHJlLanguageChinese = 0x01,
/// 🇷🇺俄语
  ZHJlLanguageRussian = 0x02,
/// 🇺🇦乌克兰语
  ZHJlLanguageUkrainian = 0x03,
/// 🇫🇷法语
  ZHJlLanguageFrench = 0x04,
/// 🇪🇸西班牙语
  ZHJlLanguageSpanish = 0x05,
/// 🇵🇹葡萄牙语
  ZHJlLanguagePortuguese = 0x06,
/// 🇩🇪德语
  ZHJlLanguageGerman = 0x07,
/// 🇯🇵日语
  ZHJlLanguageJapan = 0x08,
/// 🇵🇱波兰语
  ZHJlLanguagePoland = 0x09,
/// 🇮🇹意大利语
  ZHJlLanguageItaly = 0x0A,
/// 🇷🇴罗马尼亚语
  ZHJlLanguageRomania = 0x0B,
/// 🇨🇳繁体中文
  ZHJlLanguageTd_chinese = 0x0C,
/// 🇰🇷韩语
  ZHJlLanguageKorean = 0x0D,
/// 🇹🇭泰语
  ZHJlLanguageThai = 0x0E,
/// 🇳🇱荷兰语
  ZHJlLanguageNetherlands = 0x0F,
/// 🇹🇷土耳其语
  ZHJlLanguageTurkish = 0x10,
/// 🇸🇦阿拉伯语
  ZHJlLanguageArabic = 0x11,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef TRUSANGBLUETOOTH_SWIFT_H
#define TRUSANGBLUETOOTH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TrusangBluetooth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 设备蓝牙状态
typedef SWIFT_ENUM(NSInteger, DeviceState, open) {
/// 没有任何动作
  DeviceStateDefault = 0,
/// 搜索中
  DeviceStateSearching = 1,
/// 连接中
  DeviceStateConnecting = 2,
/// 已连接
  DeviceStateConnected = 3,
/// 断开连接
  DeviceStateDisconnected = 4,
};

@class NSNumber;
@class NSString;

/// 表盘模板
SWIFT_CLASS("_TtC16TrusangBluetooth12DialTemplate")
@interface DialTemplate : NSObject
/// 模板id
@property (nonatomic) NSInteger id;
/// 模板地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ECGMeasuringState, open) {
/// 准备测量
  ECGMeasuringStatePrepare = 0,
/// 测量中
  ECGMeasuringStateMeasuring = 1,
/// 分析
  ECGMeasuringStateAnalysis = 2,
/// 测量失败
  ECGMeasuringStateFaild = 3,
/// 测量完成
  ECGMeasuringStateComplete = 4,
};

typedef SWIFT_ENUM(NSInteger, ECGResult, open) {
  ECGResultROT = 3,
/// VPB couple 双室性早搏比较严重的早搏，这种早搏需要马上进行就医，心脏某个部位发生了病变
  ECGResultCPT = 6,
/// accidental VPB 单个室性早搏 早搏是指异位起搏点发出的过早冲动引起的心脏搏动，为最常见的心律失常。早搏常见于健康人，如果偶尔发生，症 状缺如，一般不用服药
  ECGResultVPB = 7,
/// VPB bigeminy 室性二联律,室性二联律直接影响心脏的供血功能，导致心脏供血不足;
  ECGResultBGM = 8,
/// VPB trigeminy 室性三联律,心脏出现病变，有心悸、胸闷、心慌等表现
  ECGResultTGM = 9,
/// supraventricular tachycaridia 室上性心动过速,平静时每分钟心率超过 100 次。心动过速分生理性、病理性两种。 a.生理:情绪激动、剧烈运动、烟、酒、茶、咖啡刺激.b.病理:发热、贫血、休克、甲亢、心衰 临床表现:多属生理现象。无症状或者有心悸感 治疗:一般无需治疗，病理的可采用 B 受体阻滞 剂如普奈洛尔(心得安)减慢心率
  ECGResultTAC = 10,
/// supraventricular bradycaridia 室上性心动过缓(临床上低于 30 次每分钟) 正常成人的心率在每分钟 60~100 次之间，如果低于 30 次称为心动过缓。 病因:a、生理:健康的青年人，运动员等 b、病理:颅内高压、甲减、洋地黄中毒等 临床表现:多无症状，心排血量不足时头晕、乏力晕厥治疗:有症状可用阿托品等，用药症状不能缓解者可以安装心脏起搏器
  ECGResultBRD = 11,
/// missed beat 漏博 窦房结在一个不同长短时间内 不能产生冲动，导致心房和心室电活动和机械活 动暂停或者中断的现象 病因:a、迷走神经张力增高或者颈动脉窦过敏 b、急性下壁心肌梗死、窦房结变性与纤维化 c、脑血管病变、应用洋地黄或者乙酰胆碱等药物 临床表现:可发生头晕、黑朦、晕厥，严重者可 发生阿-斯综合征甚至死亡
  ECGResultMIS = 16,
/// 正常
  ECGResultOK = 22,
};

typedef SWIFT_ENUM(NSInteger, HealthDataAlarmType, open) {
/// 低心率
  HealthDataAlarmTypeLowHR = 0,
/// 高心率
  HealthDataAlarmTypeHighHR = 1,
/// 低舒张压
  HealthDataAlarmTypeLowDBP = 2,
/// 高舒张压
  HealthDataAlarmTypeHighDBP = 3,
/// 低收缩压
  HealthDataAlarmTypeLowSBP = 4,
/// 高收缩压
  HealthDataAlarmTypeHighSBP = 5,
/// 低血氧
  HealthDataAlarmTypeLowBO = 6,
/// 高体温
  HealthDataAlarmTypeHighTEMP = 7,
};

@class NSData;

@interface UIImage (SWIFT_EXTENSION(TrusangBluetooth))
/// 根据图片大小提取像素
/// \param size 图片大小
///
///
/// returns:
/// 像素数组
- (NSArray<NSNumber *> * _Nullable)extraPixelsIn:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)convertRGB565WithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

enum ZHJAlarmClockType : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJAlarmClock")
@interface ZHJAlarmClock : NSObject
/// 闹钟开关
@property (nonatomic) BOOL isOpen;
/// 时
@property (nonatomic) NSInteger hour;
/// 分
@property (nonatomic) NSInteger minute;
/// 闹钟类型
@property (nonatomic) enum ZHJAlarmClockType type;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 是否有效闹钟,无效闹钟相当于空闹钟，删除后此属性置为false
@property (nonatomic) BOOL isValid;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBaseProcessor")
@interface ZHJBaseProcessor : NSObject
@end

enum ZHJBLEError : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJAlarmClockProcessor")
@interface ZHJAlarmClockProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAlarmClockProcessor * _Nonnull shared;)
+ (ZHJAlarmClockProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备闹钟
/// \param alarmClockHandle 读取后的设备数据返回
///
- (void)readAlarmClockWithAlarmClockHandle:(void (^ _Nonnull)(NSArray<ZHJAlarmClock *> * _Nonnull))alarmClockHandle;
/// 写入闹钟
/// \param clocks 闹钟数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeAlarmClock:(NSArray<ZHJAlarmClock *> * _Nonnull)clocks setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJAlarmClockType, open) {
/// 默认
  ZHJAlarmClockTypeDefault = 0x00,
/// 喝水
  ZHJAlarmClockTypeDrink = 0x01,
/// 吃药
  ZHJAlarmClockTypeTakeMedicine = 0x02,
/// 吃饭
  ZHJAlarmClockTypeEat = 0x03,
/// 运动
  ZHJAlarmClockTypeSport = 0x04,
/// 睡觉
  ZHJAlarmClockTypeSleep = 0x05,
/// 起床
  ZHJAlarmClockTypeAwake = 0x06,
/// 约会
  ZHJAlarmClockTypeDate = 0x07,
/// 聚会
  ZHJAlarmClockTypeParty = 0x08,
/// 会议
  ZHJAlarmClockTypeMeeting = 0x09,
};


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJAutoSleepTime")
@interface ZHJAutoSleepTime : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 开始睡眠时间 小时
@property (nonatomic) NSInteger beginHour;
/// 开始睡眠时间 分
@property (nonatomic) NSInteger beginMinute;
/// 结束睡眠时间 小时
@property (nonatomic) NSInteger endHour;
/// 结束睡眠时间 分
@property (nonatomic) NSInteger endMinute;
/// 周期
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 勿扰模式
@property (nonatomic) BOOL notDisturb;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJAutoSleepTimeProcessor")
@interface ZHJAutoSleepTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAutoSleepTimeProcessor * _Nonnull shared;)
+ (ZHJAutoSleepTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备自动睡眠时间设置
/// \param autoSleepTimeHandle 读取后的设备数据返回
///
- (void)readAutoSleepTimeWithAutoSleepTimeHandle:(void (^ _Nonnull)(NSArray<ZHJAutoSleepTime *> * _Nonnull))autoSleepTimeHandle;
/// 写入自动睡眠时间
/// \param autoSleepTime 自动睡眠时间数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSleepSetting:(NSArray<ZHJAutoSleepTime *> * _Nonnull)autoSleepTimes setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLEError, open) {
/// 正确(成功)
  ZHJBLEErrorCorrect = 0x00,
/// 命令错误
  ZHJBLEErrorCmd_incorrect = 0x01,
/// 校验码错误
  ZHJBLEErrorCheckNum_incorrect = 0x02,
/// 命令长度
  ZHJBLEErrorCmdLen_incorrect = 0x03,
/// 子命令错误
  ZHJBLEErrorSubCmd_incorrect = 0x04,
/// 数据无效
  ZHJBLEErrorData_invalid = 0x05,
};

@class CBCentralManager;
@class ZHJBTDevice;
enum ZHJBTManagerState : NSInteger;
@class CBPeripheral;
@class CBCharacteristic;

SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJBLEManagerProvider")
@interface ZHJBLEManagerProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBLEManagerProvider * _Nonnull shared;)
+ (ZHJBLEManagerProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CBCentralManager * _Nullable btManager;
@property (nonatomic, strong) ZHJBTDevice * _Nullable currentDevice;
@property (nonatomic, copy) NSArray<ZHJBTDevice *> * _Nonnull deviceArr;
/// 设备连接状态
@property (nonatomic) enum DeviceState deviceState;
/// 是否搜索包含处于DFU状态的设备,默认否
@property (nonatomic) BOOL canScanDFU;
/// 命令交互完成
@property (nonatomic) BOOL cmdDone;
/// 心电数据完成
@property (nonatomic) BOOL ecgCmdDone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取蓝牙中心管理者的状态（外部调用,poweron之后才可以执行搜索）
/// \param state 状态
///
- (void)bluetoothProviderManagerStateDidUpdateWithState:(void (^ _Nonnull)(enum ZHJBTManagerState))state;
/// 设置数据接收超时时长，默认30秒
/// \param seconds 超时时长，单位：秒
///
- (void)setDataReceiveTimeout:(NSInteger)seconds;
/// 清除重连设备
- (void)removeAutoReconnectDevice;
/// 重连
- (void)autoReconnectWithSuccess:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail;
/// 连接设备（外部调用）
- (void)connectDeviceWithDevice:(ZHJBTDevice * _Nonnull)device success:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail timeout:(void (^ _Nonnull)(void))timeout;
/// 断开当前设备（外部调用）
- (void)disconnectDeviceWithDisconnect:(void (^ _Nonnull)(CBPeripheral * _Nonnull))disconnect;
/// 搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
- (void)scanWithDiscover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 设定搜索时间来搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
/// \param seconds 超时时间
///
- (void)scanWithSeconds:(NSTimeInterval)seconds discover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 停止搜索（外部调用）
- (void)stopScan;
/// 监听设备状态
/// \param stateUpdate 状态变化回调
///
- (void)deviceStateDidUpdatedWithStateUpdate:(void (^ _Nonnull)(enum DeviceState))stateUpdate;
/// 发现写数据服务特征通道
/// \param write 写数据的通道
///
- (void)discoverWriteCharacteristicWithWrite:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))write;
/// 发现读数据的服务特征通道
/// \param read 读数据的通道
///
- (void)discoverReadCharacteristicWithRead:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))read;
@end


@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth))
/// 设置身体信息
/// \param age 年龄，默认25岁
///
/// \param gender 性别，0男，1女，默认男
///
/// \param height 身高，单位cm，默认170cm
///
/// \param weight 体重，单位kg，默认60kg
///
/// \param calculateStaticCalories 是否计算静态卡路里，默认不计算
///
- (void)setBodyInfoWithGender:(NSInteger)gender age:(NSInteger)age height:(CGFloat)height weight:(CGFloat)weight calculateRMR:(BOOL)calculateRMR;
@end

@class CBService;

@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth)) <CBCentralManagerDelegate, CBPeripheralDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

enum ZHJBLE_Read_CMD : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJBLEMessage")
@interface ZHJBLEMessage : NSObject
/// 功能命令
@property (nonatomic) enum ZHJBLE_Read_CMD cmd;
/// 状态码
@property (nonatomic) enum ZHJBLEError state;
/// 消息
@property (nonatomic, copy) NSString * _Nullable message;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Read_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Read_CMDDeviceInfo = 0x81,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Read_CMDDeviceConfig = 0x82,
/// 获取/设置个人信息
  ZHJBLE_Read_CMDUserInfo = 0x83,
/// 获取/设置设备时间
  ZHJBLE_Read_CMDSyncTime = 0x84,
/// 获取/设置设备闹钟
  ZHJBLE_Read_CMDAlarmClock = 0x85,
/// 获取/设置设备久坐提醒
  ZHJBLE_Read_CMDSedentary = 0x86,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Read_CMDSportTarget = 0x87,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Read_CMDAutoSleepTime = 0x88,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Read_CMDMessageNotice = 0x89,
/// 自定义消息
  ZHJBLE_Read_CMDMessage = 0x8A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Read_CMDFirmwareUpgrade = 0x8B,
/// 校验链接有效性(预留)
  ZHJBLE_Read_CMDVerifyLink = 0x8C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Read_CMDDeviceControl = 0x90,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Read_CMDStep_sleep = 0xA0,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Read_CMDHR_BP_BO = 0xA1,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Read_CMDECG = 0xA2,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Read_CMDSportMode = 0xA3,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Read_CMDUv = 0xA4,
/// 获取/设置天气预报数据
  ZHJBLE_Read_CMDWeather = 0xA5,
/// 清除设备相关记录数据
  ZHJBLE_Read_CMDClearDeviceRecord = 0xA6,
/// 设备电池电量
  ZHJBLE_Read_CMDBattery = 0xA7,
/// 设备硬件参数设置(预留)
  ZHJBLE_Read_CMDHardwareConfig = 0xA8,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Read_CMDHighPrecisionSleep = 0xA9,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Read_CMDRealTimeHealthData = 0xAA,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Read_CMDTemperature = 0xAC,
/// 表盘
  ZHJBLE_Read_CMDDial = 0xAD,
/// 事件提醒
  ZHJBLE_Read_CMDEventReminder = 0xAE,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Read_CMDDeviceFeature = 0xAF,
/// 新版久坐提醒
  ZHJBLE_Read_CMDSedentaryB = 0xC1,
/// 翻腕亮屏
  ZHJBLE_Read_CMDTurnWristWakeScreen = 0xC2,
/// 查询连接验证的类型
  ZHJBLE_Read_CMDConnectVeriticationType = 0xC3,
/// 新版表盘
  ZHJBLE_Read_CMDDialB = 0xC4,
/// 支持温度区间的天气
  ZHJBLE_Read_CMDWeatherB = 0xC5,
/// 未知命令（不处理）
  ZHJBLE_Read_CMDUnknow = 0x00,
};

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Write_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Write_CMDDeviceInfo = 0x01,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Write_CMDDeviceConfig = 0x02,
/// 获取/设置个人信息
  ZHJBLE_Write_CMDUserInfo = 0x03,
/// 获取/设置设备时间
  ZHJBLE_Write_CMDSyncTime = 0x04,
/// 获取/设置设备闹钟
  ZHJBLE_Write_CMDAlarmClock = 0x05,
/// 获取/设置设备久坐提醒
  ZHJBLE_Write_CMDSedentary = 0x06,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Write_CMDSportTarget = 0x07,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Write_CMDAutoSleepTime = 0x08,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Write_CMDMessageNotice = 0x09,
/// 自定义消息
  ZHJBLE_Write_CMDMessage = 0x0A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Write_CMDFirmwareUpgrade = 0x0B,
/// 校验链接有效性(预留)
  ZHJBLE_Write_CMDVerifyLink = 0x0C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Write_CMDDeviceControl = 0x10,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Write_CMDStep_sleep = 0x20,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Write_CMDHR_BP_BO = 0x21,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Write_CMDECG = 0x22,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Write_CMDSportMode = 0x23,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Write_CMDUv = 0x24,
/// 获取/设置天气预报数据
  ZHJBLE_Write_CMDWeather = 0x25,
/// 清除设备相关记录数据
  ZHJBLE_Write_CMDClearDeviceRecord = 0x26,
/// 设备电池电量
  ZHJBLE_Write_CMDBattery = 0x27,
/// 设备硬件参数设置(预留)
  ZHJBLE_Write_CMDHardwareConfig = 0x28,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Write_CMDHighPrecisionSleep = 0x29,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Write_CMDTemperature = 0x2C,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Write_CMDRealTimeHealthData = 0x2A,
/// 表盘
  ZHJBLE_Write_CMDDial = 0x2D,
/// 事件提醒
  ZHJBLE_Write_CMDEventReminder = 0x2E,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Write_CMDDeviceFeature = 0x2F,
/// 新版久坐提醒
  ZHJBLE_Write_CMDSedentaryB = 0x41,
/// 翻腕亮屏
  ZHJBLE_Write_CMDTurnWristWakeScreen = 0x42,
/// 查询连接验证的类型
  ZHJBLE_Write_CMDConnectVeriticationType = 0x43,
/// 新版表盘
  ZHJBLE_Write_CMDDialB = 0x44,
/// 支持温度区间的天气
  ZHJBLE_Write_CMDWeatherB = 0x45,
/// 未知命令（不处理）
  ZHJBLE_Write_CMDUnknow = 0x00,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBOAlarm_t")
@interface ZHJBOAlarm_t : NSObject
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBPAlarm_t")
@interface ZHJBPAlarm_t : NSObject
/// 舒张压高值
@property (nonatomic) NSInteger maxDBP;
/// 舒张压低值
@property (nonatomic) NSInteger minDBP;
/// 收缩压高值
@property (nonatomic) NSInteger maxSBP;
/// 收缩压低值
@property (nonatomic) NSInteger minSBP;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJBTDevice")
@interface ZHJBTDevice : NSObject
/// 设备名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 设备UUID
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// 设备MAC地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 设备信号强度
@property (nonatomic, strong) NSNumber * _Nonnull rssi;
/// 设备版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 原始设备
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
/// 产品型号
@property (nonatomic, copy) NSString * _Nullable model;
/// 电量
@property (nonatomic) NSInteger power;
/// 是否已经连接
@property (nonatomic) BOOL isConnected;
/// 是否已与ANCS配对
@property (nonatomic) BOOL isANCSAuthorized;
/// 设备SN号
@property (nonatomic, copy) NSString * _Nonnull sn;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 蓝牙中心状态
typedef SWIFT_ENUM(NSInteger, ZHJBTManagerState, open) {
  ZHJBTManagerStateUnknown = 0,
  ZHJBTManagerStateResetting = 1,
  ZHJBTManagerStateUnsupported = 2,
  ZHJBTManagerStateUnauthorized = 3,
  ZHJBTManagerStatePoweredOff = 4,
  ZHJBTManagerStatePoweredOn = 5,
};



SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJBatteryProcessor")
@interface ZHJBatteryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBatteryProcessor * _Nonnull shared;)
+ (ZHJBatteryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备电量
/// \param batteryHandle 电量数据返回
///
- (void)readBatteryPowerWithBatteryHandle:(void (^ _Nonnull)(NSInteger))batteryHandle;
@end

/// Api类型列表
typedef SWIFT_ENUM(NSInteger, ZHJBleApiCMD, open) {
/// 读取消息提醒设置
  ZHJBleApiCMDReadMessageNotice = 0,
/// 写入消息提醒设置
  ZHJBleApiCMDWriteMessageNotice = 1,
/// 读取历史运动模式数据
  ZHJBleApiCMDReadSportModeHistoryRecord = 2,
/// 清除全部运动记录
  ZHJBleApiCMDClearAllSportRecord = 3,
/// 恢复出厂设置
  ZHJBleApiCMDResetDevice = 4,
/// 重启设备
  ZHJBleApiCMDRebootDevice = 5,
/// 读取设备时间
  ZHJBleApiCMDReadDeviceTime = 6,
/// 写入时间
  ZHJBleApiCMDWriteTime = 7,
/// 读取设备久坐设置
  ZHJBleApiCMDReadSedentary = 8,
/// 写入久坐提醒
  ZHJBleApiCMDWriteSedentary = 9,
/// 读取设备运动目标信息
  ZHJBleApiCMDReadSportTarget = 10,
/// 写入运动目标
  ZHJBleApiCMDWriteSportTarget = 11,
/// 接收到设备主动发来的数据
  ZHJBleApiCMDReadDeviceControlRealTimeData = 12,
/// 查找设备
  ZHJBleApiCMDFindDevice = 13,
/// 拍照
  ZHJBleApiCMDTakePhoto = 14,
/// 退出拍照
  ZHJBleApiCMDTakePhotoCancel = 15,
/// 设置心率告警区间
  ZHJBleApiCMDSetHeartRateAlarmLimit = 16,
/// 设置心率自动检测
  ZHJBleApiCMDSetAutoDetectHeartRate = 17,
/// 开始心率检测
  ZHJBleApiCMDStartDetectHeartRate = 18,
/// 结束心率检测
  ZHJBleApiCMDEndDetectHeartRate = 19,
/// 读取当前设备心率血压血氧数据
  ZHJBleApiCMDReadCurrentHR_BP_BO = 20,
/// 获取手环心率高、低报警限制开启使能设置
  ZHJBleApiCMDReadHeartAlarmSetting = 21,
/// 获取手环自动心率采样设置
  ZHJBleApiCMDReadHeartTimingDetectSetting = 22,
/// 设置心率血压血氧校准值
  ZHJBleApiCMDSetHR_BP_BOCalibration = 23,
/// 读取心率血压血氧校准值
  ZHJBleApiCMDReadHR_BP_BOCalibration = 24,
/// 获取历史心率血压血氧记录
  ZHJBleApiCMDReadHR_BP_BOHistoryRecord = 25,
/// 开始心电
  ZHJBleApiCMDEcgStart = 26,
/// 结束心电
  ZHJBleApiCMDEcgEnd = 27,
/// 获取单次心电数据
  ZHJBleApiCMDReadEcgHistoryRecord = 28,
/// 读取个人信息
  ZHJBleApiCMDReadUserInfo = 29,
/// 写入个人信息
  ZHJBleApiCMDWriteUserInfo = 30,
/// 进入升级模式
  ZHJBleApiCMDStartFirmwareUpgrade = 31,
/// 读取设备电量
  ZHJBleApiCMDReadBatteryPower = 32,
/// 读取设备闹钟
  ZHJBleApiCMDReadAlarmClock = 33,
/// 写入闹钟
  ZHJBleApiCMDWriteAlarmClock = 34,
/// 读取设备信息
  ZHJBleApiCMDReadDeviceInfo = 35,
/// 读取设备自动睡眠时间设置
  ZHJBleApiCMDReadAutoSleepTime = 36,
/// 写入自动睡眠时间
  ZHJBleApiCMDWriteSleepSetting = 37,
/// 发送开启配对指令
  ZHJBleApiCMDEnablePair = 38,
/// 读取当前设备计步数据
  ZHJBleApiCMDReadCurrentStep = 39,
/// 读取历史计步睡眠数据记录
  ZHJBleApiCMDReadStepAndSleepHistoryRecord = 40,
/// 发送4位随机配对码
  ZHJBleApiCMDSendPairingCode = 41,
/// 关闭手环配对码页面
  ZHJBleApiCMDClosePairingCodeUI = 42,
/// 发送自定义消息
  ZHJBleApiCMDSendMessage = 43,
/// 读取设备基本配置信息
  ZHJBleApiCMDReadDeviceConfig = 44,
/// 写入设备配置
  ZHJBleApiCMDWriteDeviceConfig = 45,
/// 设置体温告警
  ZHJBleApiCMDSetTemperatureAlarmLimit = 46,
/// 设置体温自动检测
  ZHJBleApiCMDSetAutoDetectTemperature = 47,
/// 读取当前设备体温数据
  ZHJBleApiCMDReadCurrentTemperature = 48,
/// 获取手环体温高报警设置
  ZHJBleApiCMDReadTemperatureAlarmSetting = 49,
/// 获取手环自动体温采样设置
  ZHJBleApiCMDReadTemperatureTimingDetectSetting = 50,
/// 读取历史体温记录
  ZHJBleApiCMDReadTemperatureHistoryRecord = 51,
/// 读取运动模式配置
  ZHJBleApiCMDReadSportConfig = 52,
/// 写入运动模式配置
  ZHJBleApiCMDWriteSportConfig = 53,
/// 发送表盘
  ZHJBleApiCMDSendDial = 54,
/// 读取喝水提醒设置
  ZHJBleApiCMDReadDrinkWaterConfig = 55,
/// 写入运动模式配置
  ZHJBleApiCMDWriteDrinkWaterConfig = 56,
/// 读取实时健康数据
  ZHJBleApiCMDReadRealTimeHealthData = 57,
/// 清除体温历史记录
  ZHJBleApiCMDClearTemperatureRecord = 58,
/// 清除运动模式历史记录
  ZHJBleApiCMDClearSportModeRecord = 59,
/// 清除心率血压血氧历史记录
  ZHJBleApiCMDClearHR_BP_BORecord = 60,
/// 清除计步睡眠历史记录
  ZHJBleApiCMDClearStepAndSleepRecord = 61,
/// 发送天气
  ZHJBleApiCMDSyncWeather = 62,
/// 发送支持天气区间的天气
  ZHJBleApiCMDSyncWeatherB = 63,
/// 发送表盘(B类表盘)
  ZHJBleApiCMDSendDialB = 64,
/// 切换表盘(B类表盘)
  ZHJBleApiCMDSwitchDial = 65,
/// 删除表盘(B类表盘)
  ZHJBleApiCMDDeleteDial = 66,
/// 读取设备表盘配置信息（B类表盘，当前表盘和已安装表盘ID）
  ZHJBleApiCMDReadDialBaseInfo = 67,
};


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceDataBaseModel")
@interface ZHJDeviceDataBaseModel : NSObject
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 设备mac
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 日期
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 上传状态
@property (nonatomic) NSInteger uploadStatus;
/// 设备类型 0:手环，1：手机
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodOxygenDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJBloodOxygen")
@interface ZHJBloodOxygen : ZHJDeviceDataBaseModel
/// 最大血氧
@property (nonatomic) NSInteger max;
/// 最小血氧
@property (nonatomic) NSInteger min;
/// 平均血氧
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodOxygenDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJBloodOxygenDetail")
@interface ZHJBloodOxygenDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 血氧值
@property (nonatomic) NSInteger BO;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodPressureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBloodPressure")
@interface ZHJBloodPressure : ZHJDeviceDataBaseModel
/// 最大血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull max;
/// 最小血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull min;
/// 平均血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodPressureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJBloodPressureDetail")
@interface ZHJBloodPressureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 舒张压(diastolic blood pressure，DBP)
@property (nonatomic) NSInteger DBP;
/// 收缩压(systolic blood pressure ，SBP)
@property (nonatomic) NSInteger SBP;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJCallContrl, open) {
/// 无效
  ZHJCallContrlDefault = 0x00,
/// 接电话
  ZHJCallContrlAnswer = 0x01,
/// 挂断电话
  ZHJCallContrlHangUp = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJClearDeviceProcessor")
@interface ZHJClearDeviceProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJClearDeviceProcessor * _Nonnull shared;)
+ (ZHJClearDeviceProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 清除全部运动记录数据
- (void)clearAllSportRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 恢复出厂设置
- (void)resetDeviceWithResetHandle:(void (^ _Nonnull)(enum ZHJBLEError))resetHandle;
/// 重启设备
- (void)rebootDeviceWithRebootHandle:(void (^ _Nonnull)(enum ZHJBLEError))rebootHandle;
@end

enum ZHJlLanguage : NSInteger;
enum ZHJUnit : NSInteger;
enum ZHJTimeMode : NSInteger;
enum ZHJTemperatureUnit : NSInteger;
enum ZHJWearStyle : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJDeviceConfig")
@interface ZHJDeviceConfig : NSObject
/// 屏幕亮度
@property (nonatomic) NSInteger brightness;
/// 亮屏时长
@property (nonatomic) NSInteger brightDuration;
/// 主题皮肤
@property (nonatomic) NSInteger theme;
/// 语言选择
@property (nonatomic) enum ZHJlLanguage language;
/// 单位
@property (nonatomic) enum ZHJUnit unit;
/// 时间制式
@property (nonatomic) enum ZHJTimeMode timeMode;
/// 翻腕亮屏
@property (nonatomic) BOOL trunWrist;
/// 音乐控制
@property (nonatomic) BOOL musicCtrl;
/// 通知
@property (nonatomic) BOOL notice;
/// 温度单位
@property (nonatomic) enum ZHJTemperatureUnit temperatureUnit;
/// 佩戴方式
@property (nonatomic) enum ZHJWearStyle wearStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJDeviceConfigProcessor")
@interface ZHJDeviceConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceConfigProcessor * _Nonnull shared;)
+ (ZHJDeviceConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备基本配置信息
/// \param deviceConfigHandle 读取后的设备数据返回
///
- (void)readDeviceConfigWithDeviceConfigHandle:(void (^ _Nonnull)(ZHJDeviceConfig * _Nonnull))deviceConfigHandle;
/// 写入设备配置
/// \param config 配置对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDeviceConfig:(ZHJDeviceConfig * _Nonnull)config setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceControlProcessor")
@interface ZHJDeviceControlProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceControlProcessor * _Nonnull shared;)
+ (ZHJDeviceControlProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 接收到设备主动发来的数据
- (void)readDeviceControlRealTimeDataWithTakePhotoContrlHandle:(void (^ _Nonnull)(NSInteger))takePhotoContrlHandle musicContrlHandle:(void (^ _Nonnull)(NSInteger))musicContrlHandle findContrlHandle:(void (^ _Nonnull)(NSInteger))findContrlHandle;
/// 查找设备
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)findDeviceWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 退出拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoCancelWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJDeviceControlType, open) {
  ZHJDeviceControlTypeCall = 0,
  ZHJDeviceControlTypeSos = 1,
  ZHJDeviceControlTypePhoto = 2,
  ZHJDeviceControlTypeMusic = 3,
  ZHJDeviceControlTypeFind = 4,
  ZHJDeviceControlTypeQuickReply = 5,
  ZHJDeviceControlTypeFamilyCall = 6,
  ZHJDeviceControlTypeGps = 7,
  ZHJDeviceControlTypeDefault = 8,
};


@class ZHJSportConfig;

SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceFeatureProcessor")
@interface ZHJDeviceFeatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceFeatureProcessor * _Nonnull shared;)
+ (ZHJDeviceFeatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动模式配置
/// \param sportConfigHandle 读取后的设备数据返回
///
- (void)readSportConfigWithSportConfigHandle:(void (^ _Nonnull)(ZHJSportConfig * _Nonnull))sportConfigHandle;
/// 写入通知配置
/// \param sportConfig 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSportConfigWithSportConfig:(ZHJSportConfig * _Nonnull)sportConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDeviceFirmware")
@interface ZHJDeviceFirmware : NSObject
/// 版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 升级包下载路径
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 文件名称
@property (nonatomic, copy) NSString * _Nonnull fileName;
/// 提示内容
@property (nonatomic, copy) NSString * _Nonnull tip;
/// 是否升级
@property (nonatomic) BOOL update;
/// 是否强制升级
@property (nonatomic) BOOL forceUpdate;
/// 设备类型 0 noridc,1手机，2.Telink
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceInfoProcessor")
@interface ZHJDeviceInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceInfoProcessor * _Nonnull shared;)
+ (ZHJDeviceInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 手动读取设备信息
/// \param deviceInfoHandle 设备信息返回
///
- (void)readDeviceInfoWithDeviceInfoHandle:(void (^ _Nonnull)(ZHJBTDevice * _Nonnull))deviceInfoHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJDial")
@interface ZHJDial : NSObject
/// 背景图(后景)
@property (nonatomic, strong) UIImage * _Nullable image;
/// 背景图(后景)网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 模板图（前景）
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 模板图（前景）网络地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
/// 表盘(模板前景)ID编号，设备自带需严格按照自带序号来填写
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1用户自定义
@property (nonatomic) NSInteger type;
/// 图片实际数据格式，0:16bit rgb(565)(默认) 1:16bit bgr(565)(预留) 2:24bit rgb(888)(预留)
@property (nonatomic) NSInteger format;
/// 主题背景图片尺寸
@property (nonatomic) CGSize imageSize;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响（服务器可忽略此属性）
@property (nonatomic) BOOL isSelected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJDialB")
@interface ZHJDialB : NSObject
/// 网络扩展属性， 服务器自增编号，用于上传表盘
@property (nonatomic) NSInteger serverId;
/// 网络扩展属性，分类ID
@property (nonatomic) NSInteger categoryId;
/// 网络扩展属性，设备适配ID，一个设备型号对应唯一的adapterId，用于查询该设备的表盘配置信息
@property (nonatomic) NSInteger adapterId;
/// 表盘编号
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1自定义
@property (nonatomic) NSInteger type;
/// 表盘预览图网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 表盘bin文件网络地址
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 表盘文件数据，通过fileUrl获取
@property (nonatomic, copy) NSData * _Nonnull fileData;
/// 表盘物理尺寸，用于用户自动表盘时的发送
@property (nonatomic) CGSize dialSize;
/// 背景图(后景),  用于自定义表盘发送，如是用户自定义背景的表盘，则需要给此属性赋值
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
/// 扩展属性，模板图（前景，与backgroundImage叠加成一张表盘图片），  用于自定义表盘本地存储，不对表盘发送产生实质影响
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响
@property (nonatomic) BOOL isSelected;
/// 扩展属性，是否当前设备正在显示的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isCurrent;
/// 扩展属性，是否当前设备已安装并且存在在当前的设备的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isInstalled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialBCategory")
@interface ZHJDialBCategory : NSObject
/// 表盘类别id
@property (nonatomic) NSInteger id;
/// 标签名称
@property (nonatomic, copy) NSString * _Nonnull categoryName;
/// 表盘数组
@property (nonatomic, copy) NSArray<ZHJDialB *> * _Nonnull dials;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJDialBConfig")
@interface ZHJDialBConfig : NSObject
/// 适配ID，用于请求分类表盘的详细信息
@property (nonatomic) NSInteger adapterId;
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 设备分类
@property (nonatomic, copy) NSArray<ZHJDialBCategory *> * _Nonnull dialALables;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 手表当前显示的表盘
@property (nonatomic) NSInteger currentDialID;
/// 手表现有已安装的表盘
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull installedIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDialBProcessor")
@interface ZHJDialBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialBProcessor * _Nonnull shared;)
+ (ZHJDialBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备的表盘基础信息（表盘id与表盘状态）
/// \param dialBBaseInfoBlock 信息返回
///
- (void)readDialBaseInfoWithDialBBaseInfoBlock:(void (^ _Nonnull)(NSArray<ZHJDialB *> * _Nonnull))dialBBaseInfoBlock;
/// 删除表盘
/// \param dialID 表盘ID
///
/// \param setHandle 删除结果
///
- (void)deleteDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送表盘到设备
/// \param dial 表盘模型
///
/// \param progress 发送进度回调
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
- (void)sendDialWithDial:(ZHJDialB * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 切换表盘
/// \param dialID 表盘ID
///
/// \param setHandle 切换结果回调
///
- (void)switchDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJDialConfig")
@interface ZHJDialConfig : NSObject
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘尺寸，例：80<em>160，240</em>240，中间用“|”符号隔开
@property (nonatomic, copy) NSString * _Nonnull dialSizeString;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 表盘尺寸字符串
@property (nonatomic, copy) NSString * _Nonnull dialShapeString;
/// 设备表盘
@property (nonatomic, copy) NSArray<ZHJDial *> * _Nonnull details;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 模板
@property (nonatomic, copy) NSArray<DialTemplate *> * _Nonnull templates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialProcessor")
@interface ZHJDialProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialProcessor * _Nonnull shared;)
+ (ZHJDialProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)sendDialWithDial:(ZHJDial * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 接收到蓝牙数据的通知处理
/// \param notify 通知数据
///
- (void)dataDidReceivedWithNotification:(NSNotification * _Nonnull)notification;
@end

@class ZHJTime;

SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJDrinkWaterConfig")
@interface ZHJDrinkWaterConfig : NSObject
/// 提醒时间段数组
@property (nonatomic, copy) NSArray<ZHJTime *> * _Nonnull reminderArray;
/// 提醒开关
@property (nonatomic) BOOL reminderSwitch;
/// 喝水目标
@property (nonatomic) NSInteger target;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 这个类能处理多类型事件，如有需要则要修改下参数命名等，暂只处理喝水
SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJDrinkWaterConfigProcessor")
@interface ZHJDrinkWaterConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDrinkWaterConfigProcessor * _Nonnull shared;)
+ (ZHJDrinkWaterConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取事件提醒
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readDrinkWaterConfigWithDrinkWaterConfigHandle:(void (^ _Nonnull)(ZHJDrinkWaterConfig * _Nonnull))drinkWaterConfigHandle;
/// 写入提醒事件
/// \param sedentary 事件数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDrinkWaterConfigWithDrinkWaterConfig:(ZHJDrinkWaterConfig * _Nonnull)drinkWaterConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth6ZHJECG")
@interface ZHJECG : ZHJDeviceDataBaseModel
/// 心率
@property (nonatomic) NSInteger HR;
/// ecg数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull ecgValues;
/// 增益
@property (nonatomic) CGFloat gain;
/// 走速
@property (nonatomic) CGFloat speed;
/// 心电结果数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull results;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZHJECG (SWIFT_EXTENSION(TrusangBluetooth))
- (BOOL)isException SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJECGProcessor")
@interface ZHJECGProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJECGProcessor * _Nonnull shared;)
+ (ZHJECGProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)ecgStartWithStartHandle:(void (^ _Nonnull)(enum ZHJBLEError))startHandle;
- (void)ecgEndWithEndHandle:(void (^ _Nonnull)(enum ZHJBLEError))endHandle;
/// 获取单次心电数据
/// \param ecgHandle 数据返回
///
- (void)readEcgHistoryRecordWithEcgHandle:(void (^ _Nonnull)(ZHJECG * _Nonnull))ecgHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
- (void)readECGWithMeasuring:(void (^ _Nonnull)(CGFloat))measuring;
- (void)readHeartRateWithHeartRate:(void (^ _Nonnull)(NSInteger))heartRate;
- (void)readECGStateWithMeasuringState:(void (^ _Nonnull)(enum ECGMeasuringState))measuringState;
- (void)readECGReportWithReport:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nonnull))report;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJEnablePairProcessor")
@interface ZHJEnablePairProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJEnablePairProcessor * _Nonnull shared;)
+ (ZHJEnablePairProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送开启配对指令
- (void)enablePairWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJFamliyCallContrl, open) {
/// 无效
  ZHJFamliyCallContrlDefault = 0x00,
/// 开始呼叫
  ZHJFamliyCallContrlStart = 0x01,
/// 结束呼叫
  ZHJFamliyCallContrlEnd = 0x02,
};

typedef SWIFT_ENUM(NSInteger, ZHJFindContrl, open) {
/// 无效
  ZHJFindContrlDefault = 0x00,
/// 查找
  ZHJFindContrlFind = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth27ZHJFirmwareUpgradeProcessor")
@interface ZHJFirmwareUpgradeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJFirmwareUpgradeProcessor * _Nonnull shared;)
+ (ZHJFirmwareUpgradeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 进入升级模式
- (void)startFirmwareUpgradeWithReadHandle:(void (^ _Nonnull)(enum ZHJBLEError))readHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJGPSContrl, open) {
/// 无效
  ZHJGPSContrlDefault = 0x00,
/// 开启
  ZHJGPSContrlEnable = 0x01,
/// 关闭
  ZHJGPSContrlDisable = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHRAlarm_t")
@interface ZHJHRAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJHRTimingDetect_t")
@interface ZHJHRTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJHeartRateDetail;
@class ZHJHeartRate;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJHR_BP_BOProcessor")
@interface ZHJHR_BP_BOProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJHR_BP_BOProcessor * _Nonnull shared;)
+ (ZHJHR_BP_BOProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除心率血压血氧历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearHR_BP_BORecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置心率告警区间
/// \param maxHR 最大心率
///
/// \param minHR 最小心率
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setHeartRateAlarmLimitWithMaxHR:(NSInteger)maxHR minHR:(NSInteger)minHR isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率、血压、血氧告警区间(与设置心率的方法二选一)
/// \param HRAlarm 心率告警模型
///
/// \param BPAlarm 血压告警模型
///
/// \param BOAlarm 血氧告警模型
///
/// \param setHandle 设置返回
///
- (void)setHR_BP_BOAlarmLimitWithHRAlarm:(ZHJHRAlarm_t * _Nonnull)HRAlarm BPAlarm:(ZHJBPAlarm_t * _Nonnull)BPAlarm BOAlarm:(ZHJBOAlarm_t * _Nonnull)BOAlarm setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectHeartRateWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 开始心率检测
/// \param setHandle 设置返回
///
- (void)startDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 结束心率检测
/// \param setHandle 设置返回
///
- (void)endDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备心率血压血氧数据
/// \param currentStepHandle 当前心率血压血氧数据返回
///
- (void)readCurrentHR_BP_BOWithCurrentDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull))currentDataHandle;
/// 获取手环心率高、低报警限制开启使能设置
/// \param HRAlarmHandle 设置返回
///
- (void)readHeartAlarmSettingWithHRAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull))HRAlarmHandle;
/// 获取手环心率、血压、血氧报警限制开启使能设置
/// \param alarmHandle 设置返回
///
- (void)readHR_BP_BOAlarmSettingWithAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull, ZHJBPAlarm_t * _Nonnull, ZHJBOAlarm_t * _Nonnull))alarmHandle;
/// 获取手环自动心率采样设置
/// \param HRTimingDetectHandle 设置返回
///
- (void)readHeartTimingDetectSettingWithHRTimingDetectHandle:(void (^ _Nonnull)(ZHJHRTimingDetect_t * _Nonnull))HRTimingDetectHandle;
/// 设置心率、舒张压、收缩压、血氧校准值
/// \param HR 心率
///
/// \param DBP 舒张压
///
/// \param SBP 收缩压
///
/// \param BO 血氧
///
/// \param setHandle 设置结果回调
///
- (void)setHR_BP_BOCalibrationWithHR:(NSInteger)HR DBP:(NSInteger)DBP SBP:(NSInteger)SBP BO:(NSInteger)BO setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取心率血压血氧校准数据
/// \param currentStepHandle 依次返回心率、舒张压、收缩压、血氧校准值
///
- (void)readHR_BP_BOCalibrationWithHR_BP_BOCalibrationHandle:(void (^ _Nonnull)(NSInteger, NSInteger, NSInteger, NSInteger))HR_BP_BOCalibrationHandle;
/// 获取历史心率血压血氧记录
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readHR_BP_BOHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJHeartRate * _Nonnull, ZHJBloodPressure * _Nonnull, ZHJBloodOxygen * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJHR_BP_BOSelectType, open) {
/// 获取当前心率、血压、血氧数据(设备显示)
  ZHJHR_BP_BOSelectTypeCurrentHR_BP_BO = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJHR_BP_BOSelectTypeHistoryHR_BP_BO = 0x01,
/// 清除所有数据
  ZHJHR_BP_BOSelectTypeClearAll = 0x02,
/// 设置心率高、低限制开启使能
  ZHJHR_BP_BOSelectTypeHR_Max_Min = 0x03,
/// 设置自动心率采样
  ZHJHR_BP_BOSelectTypeAutoDetect_HR = 0x04,
/// APP 设置设备进入心率检测模式
  ZHJHR_BP_BOSelectTypeStartDetect_HR = 0x05,
/// APP 设置设备退出心率检测模式
  ZHJHR_BP_BOSelectTypeEndDetect_HR = 0x06,
/// 获取手环心率高、低限制开启使能设置
  ZHJHR_BP_BOSelectTypeGET_HR_Max_Min = 0x07,
/// 获取手环自动心率采样设置
  ZHJHR_BP_BOSelectTypeGET_autoDetect_HR = 0x08,
  ZHJHR_BP_BOSelectTypeHR_BP_BOCalibration = 0x09,
/// 获取心率血压血氧校准值
  ZHJHR_BP_BOSelectTypeGET_HR_BP_BOCalibration = 0x0a,
};


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHealthDataAlarm")
@interface ZHJHealthDataAlarm : NSObject
/// 报警数据类型
@property (nonatomic) enum HealthDataAlarmType type;
/// 值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHeartRate")
@interface ZHJHeartRate : ZHJDeviceDataBaseModel
/// 最大心率
@property (nonatomic) NSInteger max;
/// 最小心率
@property (nonatomic) NSInteger min;
/// 平均心率
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJHeartRateDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHeartRateDetail")
@interface ZHJHeartRateDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 心率值
@property (nonatomic) NSInteger HR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJMessageNotice")
@interface ZHJMessageNotice : NSObject
@property (nonatomic) BOOL twitter;
@property (nonatomic) BOOL facebook;
@property (nonatomic) BOOL email;
@property (nonatomic) BOOL sms;
@property (nonatomic) BOOL incoming;
@property (nonatomic) BOOL whatsapp;
@property (nonatomic) BOOL line;
@property (nonatomic) BOOL skype;
@property (nonatomic) BOOL qq;
@property (nonatomic) BOOL wechat;
@property (nonatomic) BOOL instagram;
@property (nonatomic) BOOL linkedin;
@property (nonatomic) BOOL messenger;
@property (nonatomic) BOOL vk;
@property (nonatomic) BOOL viber;
@property (nonatomic) BOOL dingtalk;
@property (nonatomic) BOOL telegram;
@property (nonatomic) BOOL sinaweibo;
@property (nonatomic) BOOL kakao;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJMessageNoticeProcessor")
@interface ZHJMessageNoticeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageNoticeProcessor * _Nonnull shared;)
+ (ZHJMessageNoticeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取消息通知配置(暂时支持16种应用消息)
/// \param messageNoticeHandle 读取后的设备数据返回
///
- (void)readMessageNoticeWithMessageNoticeHandle:(void (^ _Nonnull)(ZHJMessageNotice * _Nonnull))messageNoticeHandle;
/// 写入通知配置
/// \param notice 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeMessageNotice:(ZHJMessageNotice * _Nonnull)notice setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMessageNoticeType, open) {
  ZHJMessageNoticeTypeTwitter = 0,
  ZHJMessageNoticeTypeFacebook = 1,
  ZHJMessageNoticeTypeEmail = 2,
  ZHJMessageNoticeTypeSms = 3,
  ZHJMessageNoticeTypeIncoming = 4,
  ZHJMessageNoticeTypeWhatsapp = 5,
  ZHJMessageNoticeTypeLine = 6,
  ZHJMessageNoticeTypeSkype = 7,
  ZHJMessageNoticeTypeQq = 8,
  ZHJMessageNoticeTypeWechat = 9,
  ZHJMessageNoticeTypeInstagram = 10,
  ZHJMessageNoticeTypeLinkedin = 11,
  ZHJMessageNoticeTypeMessager = 12,
  ZHJMessageNoticeTypeVk = 13,
  ZHJMessageNoticeTypeViber = 14,
  ZHJMessageNoticeTypeDingtalk = 15,
  ZHJMessageNoticeTypeTelegram = 16,
  ZHJMessageNoticeTypeSinaweibo = 17,
};


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJMessageProcessor")
@interface ZHJMessageProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageProcessor * _Nonnull shared;)
+ (ZHJMessageProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送自定义消息
- (void)sendMessageWithMessage:(NSString * _Nonnull)message setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送震动
- (void)sendVibrate;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMusicContrl, open) {
/// 无效
  ZHJMusicContrlDefault = 0x00,
/// 播放/暂停
  ZHJMusicContrlPlayPause = 0x01,
/// 上一首
  ZHJMusicContrlPrevious = 0x02,
/// 下一首
  ZHJMusicContrlNext = 0x03,
/// 停止
  ZHJMusicContrlStop = 0x04,
/// 音量+
  ZHJMusicContrlVolumePlus = 0x05,
/// 音量-
  ZHJMusicContrlVolumeDecrease = 0x06,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJPairingCodeProcessor")
@interface ZHJPairingCodeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJPairingCodeProcessor * _Nonnull shared;)
+ (ZHJPairingCodeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送4位随机配对码
- (NSString * _Nonnull)sendPairingCodeWithPairResult:(void (^ _Nonnull)(enum ZHJBLEError))pairResult SWIFT_WARN_UNUSED_RESULT;
/// 关闭手环配对码页面
/// 关闭手环配对码页面
/// \param pairCodeError 配对码是否错误（由APP来判断）
///
/// \param setHandle 设备回应
///
- (void)closePairingCodeUIWithPairCodeError:(BOOL)pairCodeError setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJPhotoContrl, open) {
/// 无效
  ZHJPhotoContrlDefault = 0x00,
/// 开始拍照
  ZHJPhotoContrlStart = 0x01,
/// 拍照
  ZHJPhotoContrlTakePhoto = 0x02,
/// 结束拍照
  ZHJPhotoContrlEnd = 0x03,
};

typedef SWIFT_ENUM(NSInteger, ZHJQuickReplyContrl, open) {
/// 无效
  ZHJQuickReplyContrlDefault = 0x00,
/// 开始回复
  ZHJQuickReplyContrlStart = 0x01,
/// 取消回复
  ZHJQuickReplyContrlCancel = 0x02,
};

@class ZHJStepDetail;
@class ZHJTemperatureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth30ZHJRealTimeHealthDataProcessor")
@interface ZHJRealTimeHealthDataProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJRealTimeHealthDataProcessor * _Nonnull shared;)
+ (ZHJRealTimeHealthDataProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取实时健康数据
/// \param readHealthDataHandle 实时健康数据回调
///
- (void)readRealTimeHealthDataWithReadHealthDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull, ZHJStepDetail * _Nonnull, ZHJTemperatureDetail * _Nonnull))readHealthDataHandle;
/// 接收实时健康数据预警
/// \param alarms 预警数据数组
///
/// \param healthDataAlarmHandle 预警回调
///
- (void)realTimeHealthDataAlarmDidReceivedWithHealthDataAlarmHandle:(void (^ _Nonnull)(NSArray<ZHJHealthDataAlarm *> * _Nonnull))healthDataAlarmHandle;
@end

enum ZHJServerStatusCode : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSDKNetworkService")
@interface ZHJSDKNetworkService : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSDKNetworkService * _Nonnull shared;)
+ (ZHJSDKNetworkService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 查询固件升级信息
/// \param model 设备型号
///
/// \param version 设备固件版本号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectFirmwareUpgradeWithModel:(NSString * _Nonnull)model version:(NSString * _Nonnull)version success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDeviceFirmware * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置信息
/// \param model 设备型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectDialConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param model 型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)selectDialBConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialBConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param adapterId 型号适配ID
///
/// \param categoryId 分类ID
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)getDialBFromCategoryWithAdapterId:(NSInteger)adapterId categoryId:(NSInteger)categoryId success:(void (^ _Nonnull)(enum ZHJServerStatusCode, NSArray<ZHJDialB *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJServerStatusCode, open) {
/// 初始状态，默认
  ZHJServerStatusCodeDefault = 0,
/// 请求成功
  ZHJServerStatusCodeDone = 200,
/// 请求失败
  ZHJServerStatusCodeFail = 500,
};

typedef SWIFT_ENUM(NSInteger, ZHJSOSContrl, open) {
/// 无效
  ZHJSOSContrlDefault = 0x00,
/// 呼叫SOS
  ZHJSOSContrlAnswer = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSedentary")
@interface ZHJSedentary : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 生效开始时间（小时）
@property (nonatomic) NSInteger beginTime;
/// 生效结束时间（小时）
@property (nonatomic) NSInteger endTime;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 检测周期（单位5分钟） 范围0~255，当为0时由设备自行决策检测时间
@property (nonatomic) NSInteger intervals;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSedentaryProcessor")
@interface ZHJSedentaryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSedentaryProcessor * _Nonnull shared;)
+ (ZHJSedentaryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备久坐设置
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readSedentaryWithSedentaryHandle:(void (^ _Nonnull)(ZHJSedentary * _Nonnull))sedentaryHandle;
/// 写入久坐提醒
/// \param sedentary 久坐数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSedentary:(ZHJSedentary * _Nonnull)sedentary setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSex, open) {
/// 男
  ZHJSexMale = 0x00,
/// 女
  ZHJSexFemale = 0x01,
/// 未知其他
  ZHJSexUnknow = 0x02,
};

@class ZHJSleepDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJSleep")
@interface ZHJSleep : ZHJDeviceDataBaseModel
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJSleepDetail *> * _Nonnull details;
/// 入睡睡眠时长
@property (nonatomic) NSInteger beginDuration;
/// 浅睡时长
@property (nonatomic) NSInteger lightDuration;
/// 深睡时长
@property (nonatomic) NSInteger deepDuration;
/// 清醒时长
@property (nonatomic) NSInteger awakeDuration;
/// 快速眼动时长
@property (nonatomic) NSInteger REMDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSleepDetail")
@interface ZHJSleepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 睡眠类型 ZHJSleepType
@property (nonatomic) NSInteger type;
/// 时长单位分
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSleepType, open) {
/// 入睡
  ZHJSleepTypeBegin = 0x01,
/// 浅睡
  ZHJSleepTypeLight = 0x02,
/// 深睡
  ZHJSleepTypeDeep = 0x03,
/// 清醒
  ZHJSleepTypeAwake = 0x04,
/// 快速眼动睡眠
  ZHJSleepTypeREM = 0x05,
};


/// 用于自定义手环运动模式
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportConfig")
@interface ZHJSportConfig : NSObject
/// 步行(室外)
@property (nonatomic) BOOL walk;
/// 跑步(室外)
@property (nonatomic) BOOL run;
/// 游泳
@property (nonatomic) BOOL swim;
/// 骑行(室外)
@property (nonatomic) BOOL ride;
/// 室内跑步
@property (nonatomic) BOOL indoorRun;
/// 自由训练
@property (nonatomic) BOOL freeTrain;
/// 足球
@property (nonatomic) BOOL football;
/// 篮球
@property (nonatomic) BOOL basketball;
/// 羽毛球
@property (nonatomic) BOOL badminton;
/// 跳绳
@property (nonatomic) BOOL ropeSkip;
/// 俯卧撑
@property (nonatomic) BOOL pushUps;
/// 仰卧起坐
@property (nonatomic) BOOL sitUps;
/// 登山
@property (nonatomic) BOOL climb;
/// 网球
@property (nonatomic) BOOL tennis;
/// 高强度训练
@property (nonatomic) BOOL HIT;
/// 室内骑行
@property (nonatomic) BOOL indoorBike;
/// 健身
@property (nonatomic) BOOL fitness;
/// 橄榄球
@property (nonatomic) BOOL rugby;
/// 高尔夫球
@property (nonatomic) BOOL golf;
/// 动感单车
@property (nonatomic) BOOL happyBike;
/// 举重
@property (nonatomic) BOOL weightlift;
/// 轮滑
@property (nonatomic) BOOL rollerSkate;
/// 跳舞
@property (nonatomic) BOOL dance;
/// 瑜伽
@property (nonatomic) BOOL yoga;
/// 室内步行
@property (nonatomic) BOOL indoorWalk;
/// 徒步
@property (nonatomic) BOOL onFoot;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSportMode")
@interface ZHJSportMode : ZHJDeviceDataBaseModel
/// 运动类型 ZHJSportModeType
@property (nonatomic) NSInteger sportType;
/// 时长
@property (nonatomic) NSInteger duration;
/// 步数
@property (nonatomic) NSInteger step;
/// 心率
@property (nonatomic) NSInteger heartRate;
/// 配速
@property (nonatomic) NSInteger pace;
/// 速度
@property (nonatomic) NSInteger speed;
/// 卡路里
@property (nonatomic) NSInteger calories;
/// 距离
@property (nonatomic) NSInteger distance;
/// 采样间隔
@property (nonatomic) NSInteger interval;
/// 心率详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull heartRateArr;
/// 计步详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stepArr;
/// 配速详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull paceArr;
/// 经纬度数组 字符串数组 [纬度|经度, 纬度|经度, 纬度|经度]
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull coordinateArr;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeDataType, open) {
/// 单次运动数据总记录
  ZHJSportModeDataTypeSummary = 0x00,
/// 单次采样间隔数据(详情)
  ZHJSportModeDataTypeDetail = 0x01,
/// 传输完成
  ZHJSportModeDataTypeDone = 0x02,
/// 无运动记录
  ZHJSportModeDataTypeNoRecord = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSportModeProcessor")
@interface ZHJSportModeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportModeProcessor * _Nonnull shared;)
+ (ZHJSportModeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除运动历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearSportModeRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 获取单次运动模式数据
/// \param sportModeHandle 数据返回
///
- (void)readSportModeHistoryRecordWithSportModeHandle:(void (^ _Nonnull)(ZHJSportMode * _Nullable))sportModeHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeType, open) {
/// 🚶步行
  ZHJSportModeTypeWalk = 0x00,
/// 🏃跑步
  ZHJSportModeTypeRun = 0x01,
/// 🏊‍♀️游泳
  ZHJSportModeTypeSwim = 0x02,
/// 🚴骑行
  ZHJSportModeTypeRide = 0x03,
/// 🏠室内跑
  ZHJSportModeTypeIndoorRun = 0x04,
/// 🏋自由训练
  ZHJSportModeTypeFreeTrain = 0x05,
/// ⚽️足球
  ZHJSportModeTypeFootball = 0x06,
/// 🏀篮球
  ZHJSportModeTypeBasketball = 0x07,
/// 🏸羽毛球
  ZHJSportModeTypeBadminton = 0x08,
/// 跳绳
  ZHJSportModeTypeRopeSkip = 0x09,
/// 俯卧撑
  ZHJSportModeTypePushUps = 0x0A,
/// 仰卧起坐
  ZHJSportModeTypeSitUps = 0x0B,
/// 登山
  ZHJSportModeTypeClimb = 0x0C,
/// 网球
  ZHJSportModeTypeTennis = 0x0D,
/// 高强度训练
  ZHJSportModeTypeHIT = 0x0E,
/// 室内骑行
  ZHJSportModeTypeIndoorBike = 0x0F,
/// 健身
  ZHJSportModeTypeFitness = 0x10,
/// 橄榄球
  ZHJSportModeTypeRugby = 0x11,
/// 高尔夫球
  ZHJSportModeTypeGolf = 0x12,
/// 动感单车
  ZHJSportModeTypeHappyBike = 0x13,
/// 举重
  ZHJSportModeTypeWeightlift = 0x14,
/// 轮滑
  ZHJSportModeTypeRollerSkate = 0x15,
/// 跳舞
  ZHJSportModeTypeDance = 0x16,
/// 瑜伽
  ZHJSportModeTypeYoga = 0x17,
/// 室内步行
  ZHJSportModeTypeIndoorWalk = 0x18,
/// 徒步
  ZHJSportModeTypeOnFoot = 0x19,
/// 棒球
  ZHJSportModeTypeBaseball = 0x1A,
/// 滑板
  ZHJSportModeTypeSkateboard = 0x1B,
/// 冰球
  ZHJSportModeTypeIceHockey = 0x1C,
/// 滑雪
  ZHJSportModeTypeSkiing = 0x1D,
/// 赛车
  ZHJSportModeTypeRacingCar = 0x1E,
/// 健走
  ZHJSportModeTypeFastWalking = 0x1F,
/// 椭圆机
  ZHJSportModeTypeEllipticalMachine = 0x20,
/// 力量训练
  ZHJSportModeTypeStrengthTraining = 0x21,
/// 划船机
  ZHJSportModeTypeRowingMachine = 0x22,
/// 平板支撑
  ZHJSportModeTypePlankExercise = 0x23,
/// 开合跳
  ZHJSportModeTypeJumpingMovement = 0x24,
/// 波比跳
  ZHJSportModeTypeBobbyJump = 0x25,
/// 深蹲
  ZHJSportModeTypeSquatMovement = 0x26,
/// 高抬腿运动
  ZHJSportModeTypeHighLegLiftExercise = 0x27,
/// 臂力训练
  ZHJSportModeTypeArmStrengthTraining = 0x28,
/// 腿部训练
  ZHJSportModeTypeLegTraining = 0x29,
/// 踏步机
  ZHJSportModeTypeStepper = 0x2A,
/// 漫步器
  ZHJSportModeTypeWalker = 0x2B,
/// 健身操
  ZHJSportModeTypeAerobics = 0x2C,
/// 团体操
  ZHJSportModeTypeGroupGymnastics = 0x2D,
/// 普拉提
  ZHJSportModeTypePilates = 0x2E,
/// Cross fit
  ZHJSportModeTypeCrossFit = 0x2F,
/// 功能性训练
  ZHJSportModeTypeFunctionalTraining = 0x30,
/// 体能训练
  ZHJSportModeTypePhysicaTraining = 0x31,
/// 跆拳道
  ZHJSportModeTypeTaekwondo = 0x32,
/// 拳击
  ZHJSportModeTypeBoxing = 0x33,
/// 自由搏击
  ZHJSportModeTypeFreeSparring = 0x34,
/// 空手道
  ZHJSportModeTypeKarate = 0x35,
/// 击剑
  ZHJSportModeTypeFencing = 0x36,
/// 核心训练
  ZHJSportModeTypeCoreTraining = 0x37,
/// 搏击操
  ZHJSportModeTypeFightTraining = 0x38,
/// 剑道
  ZHJSportModeTypeKendo = 0x39,
/// 单杠
  ZHJSportModeTypeHorizontalBar = 0x3A,
/// 双杠
  ZHJSportModeTypeParallelBars = 0x3B,
/// 肚皮舞
  ZHJSportModeTypeBellyDance = 0x3C,
/// 爵士舞
  ZHJSportModeTypeJazz = 0x3D,
/// 拉丁舞
  ZHJSportModeTypeLatinDance = 0x3E,
/// 芭蕾
  ZHJSportModeTypeBallet = 0x3F,
/// 街舞
  ZHJSportModeTypeStreetDance = 0x40,
/// 广场舞
  ZHJSportModeTypeSquareDance = 0x41,
/// 武术
  ZHJSportModeTypeMartialArts = 0x42,
/// 太极拳
  ZHJSportModeTypeTaiChi = 0x43,
/// 呼啦圈
  ZHJSportModeTypeHulaHoop = 0x44,
/// 飞盘
  ZHJSportModeTypeFrisbee = 0x45,
/// 飞镖
  ZHJSportModeTypeDarts = 0x46,
/// 射箭
  ZHJSportModeTypeArchery = 0x47,
/// 骑马
  ZHJSportModeTypeHorseRiding = 0x48,
/// 对战游戏
  ZHJSportModeTypeBattleGame = 0x49,
/// 放风筝
  ZHJSportModeTypeFlyKite = 0x4A,
/// 拔河
  ZHJSportModeTypeTugOfWar = 0x4B,
/// 秋千
  ZHJSportModeTypeSwing = 0x4C,
/// 爬楼
  ZHJSportModeTypeClimbStairs = 0x4D,
/// 障碍赛
  ZHJSportModeTypeObstacleCourse = 0x4E,
/// 钓鱼
  ZHJSportModeTypeFishing = 0x4F,
/// 乒乓球
  ZHJSportModeTypePingpong = 0x50,
/// 台球
  ZHJSportModeTypeBilliards = 0x51,
/// 保龄球
  ZHJSportModeTypeBowling = 0x52,
/// 排球
  ZHJSportModeTypeVolleyball = 0x53,
/// 毽球
  ZHJSportModeTypeShuttlecock = 0x54,
/// 手球
  ZHJSportModeTypeHandball = 0x55,
/// 垒球
  ZHJSportModeTypeSoftball = 0x56,
/// 板球
  ZHJSportModeTypeCricketBall = 0x57,
/// 沙滩足球
  ZHJSportModeTypeBeachFootball = 0x58,
/// 门球
  ZHJSportModeTypeCroquet = 0x59,
/// 曲棍球
  ZHJSportModeTypeHockey = 0x5A,
/// 壁球
  ZHJSportModeTypeSquash = 0x5B,
/// 藤球
  ZHJSportModeTypeSepakTakraw = 0x5C,
/// 躲避球
  ZHJSportModeTypeDodgeBall = 0x5D,
/// 滑冰
  ZHJSportModeTypeSkate = 0x5E,
/// 冰壶
  ZHJSportModeTypeCurling = 0x5F,
/// 雪车
  ZHJSportModeTypeSnowCar = 0x60,
/// 雪橇
  ZHJSportModeTypeSled = 0x61,
/// 冬季两项
  ZHJSportModeTypeBiathlon = 0x62,
/// 攀岩
  ZHJSportModeTypeRockClimbing = 0x63,
/// 蹦极
  ZHJSportModeTypeBungeeJumping = 0x64,
/// 跑酷
  ZHJSportModeTypeParkour = 0x65,
/// BMX
  ZHJSportModeTypeBMX = 0x66,
/// 定向越野
  ZHJSportModeTypeOrienteering = 0x67,
/// 跳伞
  ZHJSportModeTypeParachute = 0x68,
/// 其他
  ZHJSportModeTypeDefault = 0xFF,
};

@class ZHJSportTargetInfo;

/// 设备运动目标
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportTarget")
@interface ZHJSportTarget : NSObject
/// 睡眠目标(单位小时)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull sleepTarget;
/// 计步目标
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull stepTarget;
/// 卡路里目标(单位大卡)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull caloriesTarget;
/// 距离目标(单位 KM)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull distanceTarget;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJSportTargetInfo")
@interface ZHJSportTargetInfo : NSObject
/// 是否开启
@property (nonatomic) BOOL enable;
/// 目标值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJSportTargetProcessor")
@interface ZHJSportTargetProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportTargetProcessor * _Nonnull shared;)
+ (ZHJSportTargetProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动目标信息
/// \param sportTargetHandle 读取后的设备数据返回
///
- (void)readSportTargetWithSportTargetHandle:(void (^ _Nonnull)(ZHJSportTarget * _Nonnull))sportTargetHandle;
/// 写入运动目标
/// \param target 运动目标
///
/// \param setHandel 写入后的设备数据返回
///
- (void)writeSportTarget:(ZHJSportTarget * _Nonnull)target setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportTargetType, open) {
/// 睡眠目标
  ZHJSportTargetTypeSleep = 0,
/// 步数目标
  ZHJSportTargetTypeStep = 1,
/// 卡路里目标
  ZHJSportTargetTypeCalories = 2,
/// 距离目标
  ZHJSportTargetTypeDistance = 3,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJStep")
@interface ZHJStep : ZHJDeviceDataBaseModel
/// 总步数
@property (nonatomic) NSInteger step;
/// 总卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 总距离 单位米
@property (nonatomic) CGFloat distance;
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJStepDetail *> * _Nonnull details;
/// 运动时长 单位分钟
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepDataType, open) {
/// 走路
  ZHJStepAndSleepDataTypeWalk = 0x00,
/// 跑步
  ZHJStepAndSleepDataTypeRun = 0x01,
/// 慢跑
  ZHJStepAndSleepDataTypeSlowRun = 0x02,
/// 睡眠相关数据（睡眠标志)
  ZHJStepAndSleepDataTypeSleep = 0x0F,
};


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJStepAndSleepProcessor")
@interface ZHJStepAndSleepProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJStepAndSleepProcessor * _Nonnull shared;)
+ (ZHJStepAndSleepProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除计步睡眠历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearStepAndSleepRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 读取当前设备计步数据
/// \param currentStepHandle 当前计步数据返回
///
- (void)readCurrentStepWithCurrentStepHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull))currentStepHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDataHandle 历史数据返回
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readStepAndSleepHistoryRecordWithDate:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull, ZHJSleep * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepSelectType, open) {
/// 当前计步
  ZHJStepAndSleepSelectTypeCurrentStep = 0x00,
/// 历史计步和睡眠
  ZHJStepAndSleepSelectTypeHistoryStepAndSleep = 0x01,
/// 清除所有计步和睡眠数据
  ZHJStepAndSleepSelectTypeClearAll = 0x02,
/// 最近的一次睡眠数据（暂时没用）
  ZHJStepAndSleepSelectTypeRecentSleep = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJStepDetail")
@interface ZHJStepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 计步类型 ZHJStepAndSleepDataType
@property (nonatomic) NSInteger type;
/// 卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 距离 单位米
@property (nonatomic) CGFloat distance;
/// 步数
@property (nonatomic) NSInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJSyncTime")
@interface ZHJSyncTime : NSObject
/// 年
@property (nonatomic) NSInteger year;
/// 月
@property (nonatomic) NSInteger month;
/// 日
@property (nonatomic) NSInteger day;
/// 小时
@property (nonatomic) NSInteger hour;
/// 分钟
@property (nonatomic) NSInteger minute;
/// 秒
@property (nonatomic) NSInteger second;
/// 时区
@property (nonatomic) NSInteger timeZone;
@end

@class NSDate;

@interface ZHJSyncTime (SWIFT_EXTENSION(TrusangBluetooth))
- (nonnull instancetype)init:(NSDate * _Nonnull)date;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSyncTimeProcessor")
@interface ZHJSyncTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSyncTimeProcessor * _Nonnull shared;)
+ (ZHJSyncTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备时间
/// \param syncTimeHandle 读取后的设备数据返回
///
- (void)readDeviceTimeWithSyncTimeHandle:(void (^ _Nonnull)(ZHJSyncTime * _Nonnull))syncTimeHandle;
/// 写入时间
/// \param time 时间
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeTime:(ZHJSyncTime * _Nonnull)time setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


/// 温度（单位0.01,如365，就是3.65℃）
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJTemperature")
@interface ZHJTemperature : ZHJDeviceDataBaseModel
/// 额头温度（历史数据只有手腕）
/// 最高温度
@property (nonatomic) NSInteger max;
/// 最低温度
@property (nonatomic) NSInteger min;
/// 平均温度
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJTemperatureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJTemperatureAlarm_t")
@interface ZHJTemperatureAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJTemperatureDetail")
@interface ZHJTemperatureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 手腕体温
@property (nonatomic) NSInteger wristTemperature;
/// 额头体温
@property (nonatomic) NSInteger headTemperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJTemperatureTimingDetect_t;

SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJTemperatureProcessor")
@interface ZHJTemperatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJTemperatureProcessor * _Nonnull shared;)
+ (ZHJTemperatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除体温历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearTemperatureRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置体温告警
/// \param maxTemperature 报警体温值
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setTemperatureAlarmLimitWithMaxTemperature:(NSInteger)maxTemperature isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置体温自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectTemperatureWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备体温数据
/// \param currentDataHandle 当前体温数据返回
///
- (void)readCurrentTemperatureWithCurrentDataHandle:(void (^ _Nonnull)(ZHJTemperatureDetail * _Nonnull))currentDataHandle;
/// 获取手环体温高报警设置
/// \param temperatureAlarmHandle 设置返回
///
- (void)readTemperatureAlarmSettingWithTemperatureAlarmHandle:(void (^ _Nonnull)(ZHJTemperatureAlarm_t * _Nonnull))temperatureAlarmHandle;
/// 获取手环自动体温采样设置
/// \param temperatureTimingDetectHandle 设置返回
///
- (void)readTemperatureTimingDetectSettingWithTemperatureTimingDetectHandle:(void (^ _Nonnull)(ZHJTemperatureTimingDetect_t * _Nonnull))temperatureTimingDetectHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readTemperatureHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJTemperature * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureSelectType, open) {
/// 获取当前人体温度数据(设备显示)
  ZHJTemperatureSelectTypeCurrent = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJTemperatureSelectTypeHistory = 0x01,
/// 清除所有数据
  ZHJTemperatureSelectTypeClearAll = 0x02,
/// 设置温度报警
  ZHJTemperatureSelectTypeSetAlarm = 0x03,
/// 设置自动温度采样
  ZHJTemperatureSelectTypeSetAutoDetect = 0x04,
/// 获取手环温度报警设置
  ZHJTemperatureSelectTypeGetAlarm = 0x05,
/// 获取手环自动体温采样设置
  ZHJTemperatureSelectTypeGetAutoDetect = 0x06,
/// APP 设置设备进入体温检测模式
  ZHJTemperatureSelectTypeStartDetect = 0x07,
/// APP 设置设备退出体温检测模式
  ZHJTemperatureSelectTypeEndDetect = 0x08,
};


SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJTemperatureTimingDetect_t")
@interface ZHJTemperatureTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureUnit, open) {
/// 摄氏（默认）
  ZHJTemperatureUnitCelsius = 0x00,
/// 华氏
  ZHJTemperatureUnitFahrenheit = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJTime")
@interface ZHJTime : NSObject
@property (nonatomic) NSInteger year;
@property (nonatomic) NSInteger month;
@property (nonatomic) NSInteger day;
@property (nonatomic) NSInteger hour;
@property (nonatomic) NSInteger minute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTimeMode, open) {
/// 24小时制（默认）
  ZHJTimeModeHour24 = 0x00,
/// 12小时制
  ZHJTimeModeHour12 = 0x01,
};

typedef SWIFT_ENUM(NSInteger, ZHJUnit, open) {
/// 公制（默认）
  ZHJUnitMetric = 0x00,
/// 英制
  ZHJUnitImperial = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJUserInfo")
@interface ZHJUserInfo : NSObject
/// 设备mac地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 性别(默认男，0男,1女)
@property (nonatomic) NSInteger sex;
/// 年龄 (0x06~0x64,默认 20)
@property (nonatomic) NSInteger age;
/// 身高（单位 cm，默认 170)
@property (nonatomic) NSInteger height;
/// 体重(单位 0.1kg，默认 600)
@property (nonatomic) NSInteger weight;
/// 身高描述
@property (nonatomic, copy) NSString * _Nonnull heightDesc;
/// 体重描述
@property (nonatomic, copy) NSString * _Nonnull weightDesc;
/// 生日
@property (nonatomic, copy) NSString * _Nonnull birthday;
/// 昵称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 单位0公制 1英制
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJUserInfoProcessor")
@interface ZHJUserInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJUserInfoProcessor * _Nonnull shared;)
+ (ZHJUserInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取个人信息
/// \param userInfoHandle 读取后的设备数据返回
///
- (void)readUserInfoWithUserInfoHandle:(void (^ _Nonnull)(ZHJUserInfo * _Nonnull))userInfoHandle;
/// 写入个人信息
/// \param info 个人信息对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeUserInfo:(ZHJUserInfo * _Nonnull)info setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJWearStyle, open) {
/// 左手（默认）
  ZHJWearStyleLeftHand = 0x01,
/// 右手
  ZHJWearStyleRightHand = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth10ZHJWeather")
@interface ZHJWeather : NSObject
/// 温度
@property (nonatomic, copy) NSString * _Nonnull temp;
/// 最低温度
@property (nonatomic, copy) NSString * _Nonnull temp_min;
/// 最高温度
@property (nonatomic, copy) NSString * _Nonnull temp_max;
/// 天气状态代号
@property (nonatomic, copy) NSString * _Nonnull weatherConditionCode;
/// 单位,0摄氏，1华氏
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJWeatherBProcessor")
@interface ZHJWeatherBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherBProcessor * _Nonnull shared;)
+ (ZHJWeatherBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备,支持今天的天气类型，温度，最低温和最高温，支持明天的天气类型，最低温和最高温，支持后天的天气类型，最低温和最高温
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJWeatherProcessor")
@interface ZHJWeatherProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherProcessor * _Nonnull shared;)
+ (ZHJWeatherProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJlLanguage, open) {
/// 🇬🇧英语（默认）
  ZHJlLanguageEnglish = 0x00,
/// 🇨🇳中文
  ZHJlLanguageChinese = 0x01,
/// 🇷🇺俄语
  ZHJlLanguageRussian = 0x02,
/// 🇺🇦乌克兰语
  ZHJlLanguageUkrainian = 0x03,
/// 🇫🇷法语
  ZHJlLanguageFrench = 0x04,
/// 🇪🇸西班牙语
  ZHJlLanguageSpanish = 0x05,
/// 🇵🇹葡萄牙语
  ZHJlLanguagePortuguese = 0x06,
/// 🇩🇪德语
  ZHJlLanguageGerman = 0x07,
/// 🇯🇵日语
  ZHJlLanguageJapan = 0x08,
/// 🇵🇱波兰语
  ZHJlLanguagePoland = 0x09,
/// 🇮🇹意大利语
  ZHJlLanguageItaly = 0x0A,
/// 🇷🇴罗马尼亚语
  ZHJlLanguageRomania = 0x0B,
/// 🇨🇳繁体中文
  ZHJlLanguageTd_chinese = 0x0C,
/// 🇰🇷韩语
  ZHJlLanguageKorean = 0x0D,
/// 🇹🇭泰语
  ZHJlLanguageThai = 0x0E,
/// 🇳🇱荷兰语
  ZHJlLanguageNetherlands = 0x0F,
/// 🇹🇷土耳其语
  ZHJlLanguageTurkish = 0x10,
/// 🇸🇦阿拉伯语
  ZHJlLanguageArabic = 0x11,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7S__) && __ARM_ARCH_7S__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef TRUSANGBLUETOOTH_SWIFT_H
#define TRUSANGBLUETOOTH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TrusangBluetooth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 设备蓝牙状态
typedef SWIFT_ENUM(NSInteger, DeviceState, open) {
/// 没有任何动作
  DeviceStateDefault = 0,
/// 搜索中
  DeviceStateSearching = 1,
/// 连接中
  DeviceStateConnecting = 2,
/// 已连接
  DeviceStateConnected = 3,
/// 断开连接
  DeviceStateDisconnected = 4,
};

@class NSNumber;
@class NSString;

/// 表盘模板
SWIFT_CLASS("_TtC16TrusangBluetooth12DialTemplate")
@interface DialTemplate : NSObject
/// 模板id
@property (nonatomic) NSInteger id;
/// 模板地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ECGMeasuringState, open) {
/// 准备测量
  ECGMeasuringStatePrepare = 0,
/// 测量中
  ECGMeasuringStateMeasuring = 1,
/// 分析
  ECGMeasuringStateAnalysis = 2,
/// 测量失败
  ECGMeasuringStateFaild = 3,
/// 测量完成
  ECGMeasuringStateComplete = 4,
};

typedef SWIFT_ENUM(NSInteger, ECGResult, open) {
  ECGResultROT = 3,
/// VPB couple 双室性早搏比较严重的早搏，这种早搏需要马上进行就医，心脏某个部位发生了病变
  ECGResultCPT = 6,
/// accidental VPB 单个室性早搏 早搏是指异位起搏点发出的过早冲动引起的心脏搏动，为最常见的心律失常。早搏常见于健康人，如果偶尔发生，症 状缺如，一般不用服药
  ECGResultVPB = 7,
/// VPB bigeminy 室性二联律,室性二联律直接影响心脏的供血功能，导致心脏供血不足;
  ECGResultBGM = 8,
/// VPB trigeminy 室性三联律,心脏出现病变，有心悸、胸闷、心慌等表现
  ECGResultTGM = 9,
/// supraventricular tachycaridia 室上性心动过速,平静时每分钟心率超过 100 次。心动过速分生理性、病理性两种。 a.生理:情绪激动、剧烈运动、烟、酒、茶、咖啡刺激.b.病理:发热、贫血、休克、甲亢、心衰 临床表现:多属生理现象。无症状或者有心悸感 治疗:一般无需治疗，病理的可采用 B 受体阻滞 剂如普奈洛尔(心得安)减慢心率
  ECGResultTAC = 10,
/// supraventricular bradycaridia 室上性心动过缓(临床上低于 30 次每分钟) 正常成人的心率在每分钟 60~100 次之间，如果低于 30 次称为心动过缓。 病因:a、生理:健康的青年人，运动员等 b、病理:颅内高压、甲减、洋地黄中毒等 临床表现:多无症状，心排血量不足时头晕、乏力晕厥治疗:有症状可用阿托品等，用药症状不能缓解者可以安装心脏起搏器
  ECGResultBRD = 11,
/// missed beat 漏博 窦房结在一个不同长短时间内 不能产生冲动，导致心房和心室电活动和机械活 动暂停或者中断的现象 病因:a、迷走神经张力增高或者颈动脉窦过敏 b、急性下壁心肌梗死、窦房结变性与纤维化 c、脑血管病变、应用洋地黄或者乙酰胆碱等药物 临床表现:可发生头晕、黑朦、晕厥，严重者可 发生阿-斯综合征甚至死亡
  ECGResultMIS = 16,
/// 正常
  ECGResultOK = 22,
};

typedef SWIFT_ENUM(NSInteger, HealthDataAlarmType, open) {
/// 低心率
  HealthDataAlarmTypeLowHR = 0,
/// 高心率
  HealthDataAlarmTypeHighHR = 1,
/// 低舒张压
  HealthDataAlarmTypeLowDBP = 2,
/// 高舒张压
  HealthDataAlarmTypeHighDBP = 3,
/// 低收缩压
  HealthDataAlarmTypeLowSBP = 4,
/// 高收缩压
  HealthDataAlarmTypeHighSBP = 5,
/// 低血氧
  HealthDataAlarmTypeLowBO = 6,
/// 高体温
  HealthDataAlarmTypeHighTEMP = 7,
};

@class NSData;

@interface UIImage (SWIFT_EXTENSION(TrusangBluetooth))
/// 根据图片大小提取像素
/// \param size 图片大小
///
///
/// returns:
/// 像素数组
- (NSArray<NSNumber *> * _Nullable)extraPixelsIn:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)convertRGB565WithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

enum ZHJAlarmClockType : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJAlarmClock")
@interface ZHJAlarmClock : NSObject
/// 闹钟开关
@property (nonatomic) BOOL isOpen;
/// 时
@property (nonatomic) NSInteger hour;
/// 分
@property (nonatomic) NSInteger minute;
/// 闹钟类型
@property (nonatomic) enum ZHJAlarmClockType type;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 是否有效闹钟,无效闹钟相当于空闹钟，删除后此属性置为false
@property (nonatomic) BOOL isValid;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBaseProcessor")
@interface ZHJBaseProcessor : NSObject
@end

enum ZHJBLEError : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJAlarmClockProcessor")
@interface ZHJAlarmClockProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAlarmClockProcessor * _Nonnull shared;)
+ (ZHJAlarmClockProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备闹钟
/// \param alarmClockHandle 读取后的设备数据返回
///
- (void)readAlarmClockWithAlarmClockHandle:(void (^ _Nonnull)(NSArray<ZHJAlarmClock *> * _Nonnull))alarmClockHandle;
/// 写入闹钟
/// \param clocks 闹钟数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeAlarmClock:(NSArray<ZHJAlarmClock *> * _Nonnull)clocks setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJAlarmClockType, open) {
/// 默认
  ZHJAlarmClockTypeDefault = 0x00,
/// 喝水
  ZHJAlarmClockTypeDrink = 0x01,
/// 吃药
  ZHJAlarmClockTypeTakeMedicine = 0x02,
/// 吃饭
  ZHJAlarmClockTypeEat = 0x03,
/// 运动
  ZHJAlarmClockTypeSport = 0x04,
/// 睡觉
  ZHJAlarmClockTypeSleep = 0x05,
/// 起床
  ZHJAlarmClockTypeAwake = 0x06,
/// 约会
  ZHJAlarmClockTypeDate = 0x07,
/// 聚会
  ZHJAlarmClockTypeParty = 0x08,
/// 会议
  ZHJAlarmClockTypeMeeting = 0x09,
};


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJAutoSleepTime")
@interface ZHJAutoSleepTime : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 开始睡眠时间 小时
@property (nonatomic) NSInteger beginHour;
/// 开始睡眠时间 分
@property (nonatomic) NSInteger beginMinute;
/// 结束睡眠时间 小时
@property (nonatomic) NSInteger endHour;
/// 结束睡眠时间 分
@property (nonatomic) NSInteger endMinute;
/// 周期
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 勿扰模式
@property (nonatomic) BOOL notDisturb;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJAutoSleepTimeProcessor")
@interface ZHJAutoSleepTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAutoSleepTimeProcessor * _Nonnull shared;)
+ (ZHJAutoSleepTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备自动睡眠时间设置
/// \param autoSleepTimeHandle 读取后的设备数据返回
///
- (void)readAutoSleepTimeWithAutoSleepTimeHandle:(void (^ _Nonnull)(NSArray<ZHJAutoSleepTime *> * _Nonnull))autoSleepTimeHandle;
/// 写入自动睡眠时间
/// \param autoSleepTime 自动睡眠时间数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSleepSetting:(NSArray<ZHJAutoSleepTime *> * _Nonnull)autoSleepTimes setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLEError, open) {
/// 正确(成功)
  ZHJBLEErrorCorrect = 0x00,
/// 命令错误
  ZHJBLEErrorCmd_incorrect = 0x01,
/// 校验码错误
  ZHJBLEErrorCheckNum_incorrect = 0x02,
/// 命令长度
  ZHJBLEErrorCmdLen_incorrect = 0x03,
/// 子命令错误
  ZHJBLEErrorSubCmd_incorrect = 0x04,
/// 数据无效
  ZHJBLEErrorData_invalid = 0x05,
};

@class CBCentralManager;
@class ZHJBTDevice;
enum ZHJBTManagerState : NSInteger;
@class CBPeripheral;
@class CBCharacteristic;

SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJBLEManagerProvider")
@interface ZHJBLEManagerProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBLEManagerProvider * _Nonnull shared;)
+ (ZHJBLEManagerProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CBCentralManager * _Nullable btManager;
@property (nonatomic, strong) ZHJBTDevice * _Nullable currentDevice;
@property (nonatomic, copy) NSArray<ZHJBTDevice *> * _Nonnull deviceArr;
/// 设备连接状态
@property (nonatomic) enum DeviceState deviceState;
/// 是否搜索包含处于DFU状态的设备,默认否
@property (nonatomic) BOOL canScanDFU;
/// 命令交互完成
@property (nonatomic) BOOL cmdDone;
/// 心电数据完成
@property (nonatomic) BOOL ecgCmdDone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取蓝牙中心管理者的状态（外部调用,poweron之后才可以执行搜索）
/// \param state 状态
///
- (void)bluetoothProviderManagerStateDidUpdateWithState:(void (^ _Nonnull)(enum ZHJBTManagerState))state;
/// 设置数据接收超时时长，默认30秒
/// \param seconds 超时时长，单位：秒
///
- (void)setDataReceiveTimeout:(NSInteger)seconds;
/// 清除重连设备
- (void)removeAutoReconnectDevice;
/// 重连
- (void)autoReconnectWithSuccess:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail;
/// 连接设备（外部调用）
- (void)connectDeviceWithDevice:(ZHJBTDevice * _Nonnull)device success:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail timeout:(void (^ _Nonnull)(void))timeout;
/// 断开当前设备（外部调用）
- (void)disconnectDeviceWithDisconnect:(void (^ _Nonnull)(CBPeripheral * _Nonnull))disconnect;
/// 搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
- (void)scanWithDiscover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 设定搜索时间来搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
/// \param seconds 超时时间
///
- (void)scanWithSeconds:(NSTimeInterval)seconds discover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 停止搜索（外部调用）
- (void)stopScan;
/// 监听设备状态
/// \param stateUpdate 状态变化回调
///
- (void)deviceStateDidUpdatedWithStateUpdate:(void (^ _Nonnull)(enum DeviceState))stateUpdate;
/// 发现写数据服务特征通道
/// \param write 写数据的通道
///
- (void)discoverWriteCharacteristicWithWrite:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))write;
/// 发现读数据的服务特征通道
/// \param read 读数据的通道
///
- (void)discoverReadCharacteristicWithRead:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))read;
@end


@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth))
/// 设置身体信息
/// \param age 年龄，默认25岁
///
/// \param gender 性别，0男，1女，默认男
///
/// \param height 身高，单位cm，默认170cm
///
/// \param weight 体重，单位kg，默认60kg
///
/// \param calculateStaticCalories 是否计算静态卡路里，默认不计算
///
- (void)setBodyInfoWithGender:(NSInteger)gender age:(NSInteger)age height:(CGFloat)height weight:(CGFloat)weight calculateRMR:(BOOL)calculateRMR;
@end

@class CBService;

@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth)) <CBCentralManagerDelegate, CBPeripheralDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

enum ZHJBLE_Read_CMD : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJBLEMessage")
@interface ZHJBLEMessage : NSObject
/// 功能命令
@property (nonatomic) enum ZHJBLE_Read_CMD cmd;
/// 状态码
@property (nonatomic) enum ZHJBLEError state;
/// 消息
@property (nonatomic, copy) NSString * _Nullable message;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Read_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Read_CMDDeviceInfo = 0x81,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Read_CMDDeviceConfig = 0x82,
/// 获取/设置个人信息
  ZHJBLE_Read_CMDUserInfo = 0x83,
/// 获取/设置设备时间
  ZHJBLE_Read_CMDSyncTime = 0x84,
/// 获取/设置设备闹钟
  ZHJBLE_Read_CMDAlarmClock = 0x85,
/// 获取/设置设备久坐提醒
  ZHJBLE_Read_CMDSedentary = 0x86,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Read_CMDSportTarget = 0x87,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Read_CMDAutoSleepTime = 0x88,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Read_CMDMessageNotice = 0x89,
/// 自定义消息
  ZHJBLE_Read_CMDMessage = 0x8A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Read_CMDFirmwareUpgrade = 0x8B,
/// 校验链接有效性(预留)
  ZHJBLE_Read_CMDVerifyLink = 0x8C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Read_CMDDeviceControl = 0x90,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Read_CMDStep_sleep = 0xA0,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Read_CMDHR_BP_BO = 0xA1,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Read_CMDECG = 0xA2,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Read_CMDSportMode = 0xA3,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Read_CMDUv = 0xA4,
/// 获取/设置天气预报数据
  ZHJBLE_Read_CMDWeather = 0xA5,
/// 清除设备相关记录数据
  ZHJBLE_Read_CMDClearDeviceRecord = 0xA6,
/// 设备电池电量
  ZHJBLE_Read_CMDBattery = 0xA7,
/// 设备硬件参数设置(预留)
  ZHJBLE_Read_CMDHardwareConfig = 0xA8,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Read_CMDHighPrecisionSleep = 0xA9,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Read_CMDRealTimeHealthData = 0xAA,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Read_CMDTemperature = 0xAC,
/// 表盘
  ZHJBLE_Read_CMDDial = 0xAD,
/// 事件提醒
  ZHJBLE_Read_CMDEventReminder = 0xAE,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Read_CMDDeviceFeature = 0xAF,
/// 新版久坐提醒
  ZHJBLE_Read_CMDSedentaryB = 0xC1,
/// 翻腕亮屏
  ZHJBLE_Read_CMDTurnWristWakeScreen = 0xC2,
/// 查询连接验证的类型
  ZHJBLE_Read_CMDConnectVeriticationType = 0xC3,
/// 新版表盘
  ZHJBLE_Read_CMDDialB = 0xC4,
/// 支持温度区间的天气
  ZHJBLE_Read_CMDWeatherB = 0xC5,
/// 未知命令（不处理）
  ZHJBLE_Read_CMDUnknow = 0x00,
};

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Write_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Write_CMDDeviceInfo = 0x01,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Write_CMDDeviceConfig = 0x02,
/// 获取/设置个人信息
  ZHJBLE_Write_CMDUserInfo = 0x03,
/// 获取/设置设备时间
  ZHJBLE_Write_CMDSyncTime = 0x04,
/// 获取/设置设备闹钟
  ZHJBLE_Write_CMDAlarmClock = 0x05,
/// 获取/设置设备久坐提醒
  ZHJBLE_Write_CMDSedentary = 0x06,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Write_CMDSportTarget = 0x07,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Write_CMDAutoSleepTime = 0x08,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Write_CMDMessageNotice = 0x09,
/// 自定义消息
  ZHJBLE_Write_CMDMessage = 0x0A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Write_CMDFirmwareUpgrade = 0x0B,
/// 校验链接有效性(预留)
  ZHJBLE_Write_CMDVerifyLink = 0x0C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Write_CMDDeviceControl = 0x10,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Write_CMDStep_sleep = 0x20,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Write_CMDHR_BP_BO = 0x21,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Write_CMDECG = 0x22,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Write_CMDSportMode = 0x23,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Write_CMDUv = 0x24,
/// 获取/设置天气预报数据
  ZHJBLE_Write_CMDWeather = 0x25,
/// 清除设备相关记录数据
  ZHJBLE_Write_CMDClearDeviceRecord = 0x26,
/// 设备电池电量
  ZHJBLE_Write_CMDBattery = 0x27,
/// 设备硬件参数设置(预留)
  ZHJBLE_Write_CMDHardwareConfig = 0x28,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Write_CMDHighPrecisionSleep = 0x29,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Write_CMDTemperature = 0x2C,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Write_CMDRealTimeHealthData = 0x2A,
/// 表盘
  ZHJBLE_Write_CMDDial = 0x2D,
/// 事件提醒
  ZHJBLE_Write_CMDEventReminder = 0x2E,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Write_CMDDeviceFeature = 0x2F,
/// 新版久坐提醒
  ZHJBLE_Write_CMDSedentaryB = 0x41,
/// 翻腕亮屏
  ZHJBLE_Write_CMDTurnWristWakeScreen = 0x42,
/// 查询连接验证的类型
  ZHJBLE_Write_CMDConnectVeriticationType = 0x43,
/// 新版表盘
  ZHJBLE_Write_CMDDialB = 0x44,
/// 支持温度区间的天气
  ZHJBLE_Write_CMDWeatherB = 0x45,
/// 未知命令（不处理）
  ZHJBLE_Write_CMDUnknow = 0x00,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBOAlarm_t")
@interface ZHJBOAlarm_t : NSObject
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBPAlarm_t")
@interface ZHJBPAlarm_t : NSObject
/// 舒张压高值
@property (nonatomic) NSInteger maxDBP;
/// 舒张压低值
@property (nonatomic) NSInteger minDBP;
/// 收缩压高值
@property (nonatomic) NSInteger maxSBP;
/// 收缩压低值
@property (nonatomic) NSInteger minSBP;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJBTDevice")
@interface ZHJBTDevice : NSObject
/// 设备名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 设备UUID
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// 设备MAC地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 设备信号强度
@property (nonatomic, strong) NSNumber * _Nonnull rssi;
/// 设备版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 原始设备
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
/// 产品型号
@property (nonatomic, copy) NSString * _Nullable model;
/// 电量
@property (nonatomic) NSInteger power;
/// 是否已经连接
@property (nonatomic) BOOL isConnected;
/// 是否已与ANCS配对
@property (nonatomic) BOOL isANCSAuthorized;
/// 设备SN号
@property (nonatomic, copy) NSString * _Nonnull sn;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 蓝牙中心状态
typedef SWIFT_ENUM(NSInteger, ZHJBTManagerState, open) {
  ZHJBTManagerStateUnknown = 0,
  ZHJBTManagerStateResetting = 1,
  ZHJBTManagerStateUnsupported = 2,
  ZHJBTManagerStateUnauthorized = 3,
  ZHJBTManagerStatePoweredOff = 4,
  ZHJBTManagerStatePoweredOn = 5,
};



SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJBatteryProcessor")
@interface ZHJBatteryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBatteryProcessor * _Nonnull shared;)
+ (ZHJBatteryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备电量
/// \param batteryHandle 电量数据返回
///
- (void)readBatteryPowerWithBatteryHandle:(void (^ _Nonnull)(NSInteger))batteryHandle;
@end

/// Api类型列表
typedef SWIFT_ENUM(NSInteger, ZHJBleApiCMD, open) {
/// 读取消息提醒设置
  ZHJBleApiCMDReadMessageNotice = 0,
/// 写入消息提醒设置
  ZHJBleApiCMDWriteMessageNotice = 1,
/// 读取历史运动模式数据
  ZHJBleApiCMDReadSportModeHistoryRecord = 2,
/// 清除全部运动记录
  ZHJBleApiCMDClearAllSportRecord = 3,
/// 恢复出厂设置
  ZHJBleApiCMDResetDevice = 4,
/// 重启设备
  ZHJBleApiCMDRebootDevice = 5,
/// 读取设备时间
  ZHJBleApiCMDReadDeviceTime = 6,
/// 写入时间
  ZHJBleApiCMDWriteTime = 7,
/// 读取设备久坐设置
  ZHJBleApiCMDReadSedentary = 8,
/// 写入久坐提醒
  ZHJBleApiCMDWriteSedentary = 9,
/// 读取设备运动目标信息
  ZHJBleApiCMDReadSportTarget = 10,
/// 写入运动目标
  ZHJBleApiCMDWriteSportTarget = 11,
/// 接收到设备主动发来的数据
  ZHJBleApiCMDReadDeviceControlRealTimeData = 12,
/// 查找设备
  ZHJBleApiCMDFindDevice = 13,
/// 拍照
  ZHJBleApiCMDTakePhoto = 14,
/// 退出拍照
  ZHJBleApiCMDTakePhotoCancel = 15,
/// 设置心率告警区间
  ZHJBleApiCMDSetHeartRateAlarmLimit = 16,
/// 设置心率自动检测
  ZHJBleApiCMDSetAutoDetectHeartRate = 17,
/// 开始心率检测
  ZHJBleApiCMDStartDetectHeartRate = 18,
/// 结束心率检测
  ZHJBleApiCMDEndDetectHeartRate = 19,
/// 读取当前设备心率血压血氧数据
  ZHJBleApiCMDReadCurrentHR_BP_BO = 20,
/// 获取手环心率高、低报警限制开启使能设置
  ZHJBleApiCMDReadHeartAlarmSetting = 21,
/// 获取手环自动心率采样设置
  ZHJBleApiCMDReadHeartTimingDetectSetting = 22,
/// 设置心率血压血氧校准值
  ZHJBleApiCMDSetHR_BP_BOCalibration = 23,
/// 读取心率血压血氧校准值
  ZHJBleApiCMDReadHR_BP_BOCalibration = 24,
/// 获取历史心率血压血氧记录
  ZHJBleApiCMDReadHR_BP_BOHistoryRecord = 25,
/// 开始心电
  ZHJBleApiCMDEcgStart = 26,
/// 结束心电
  ZHJBleApiCMDEcgEnd = 27,
/// 获取单次心电数据
  ZHJBleApiCMDReadEcgHistoryRecord = 28,
/// 读取个人信息
  ZHJBleApiCMDReadUserInfo = 29,
/// 写入个人信息
  ZHJBleApiCMDWriteUserInfo = 30,
/// 进入升级模式
  ZHJBleApiCMDStartFirmwareUpgrade = 31,
/// 读取设备电量
  ZHJBleApiCMDReadBatteryPower = 32,
/// 读取设备闹钟
  ZHJBleApiCMDReadAlarmClock = 33,
/// 写入闹钟
  ZHJBleApiCMDWriteAlarmClock = 34,
/// 读取设备信息
  ZHJBleApiCMDReadDeviceInfo = 35,
/// 读取设备自动睡眠时间设置
  ZHJBleApiCMDReadAutoSleepTime = 36,
/// 写入自动睡眠时间
  ZHJBleApiCMDWriteSleepSetting = 37,
/// 发送开启配对指令
  ZHJBleApiCMDEnablePair = 38,
/// 读取当前设备计步数据
  ZHJBleApiCMDReadCurrentStep = 39,
/// 读取历史计步睡眠数据记录
  ZHJBleApiCMDReadStepAndSleepHistoryRecord = 40,
/// 发送4位随机配对码
  ZHJBleApiCMDSendPairingCode = 41,
/// 关闭手环配对码页面
  ZHJBleApiCMDClosePairingCodeUI = 42,
/// 发送自定义消息
  ZHJBleApiCMDSendMessage = 43,
/// 读取设备基本配置信息
  ZHJBleApiCMDReadDeviceConfig = 44,
/// 写入设备配置
  ZHJBleApiCMDWriteDeviceConfig = 45,
/// 设置体温告警
  ZHJBleApiCMDSetTemperatureAlarmLimit = 46,
/// 设置体温自动检测
  ZHJBleApiCMDSetAutoDetectTemperature = 47,
/// 读取当前设备体温数据
  ZHJBleApiCMDReadCurrentTemperature = 48,
/// 获取手环体温高报警设置
  ZHJBleApiCMDReadTemperatureAlarmSetting = 49,
/// 获取手环自动体温采样设置
  ZHJBleApiCMDReadTemperatureTimingDetectSetting = 50,
/// 读取历史体温记录
  ZHJBleApiCMDReadTemperatureHistoryRecord = 51,
/// 读取运动模式配置
  ZHJBleApiCMDReadSportConfig = 52,
/// 写入运动模式配置
  ZHJBleApiCMDWriteSportConfig = 53,
/// 发送表盘
  ZHJBleApiCMDSendDial = 54,
/// 读取喝水提醒设置
  ZHJBleApiCMDReadDrinkWaterConfig = 55,
/// 写入运动模式配置
  ZHJBleApiCMDWriteDrinkWaterConfig = 56,
/// 读取实时健康数据
  ZHJBleApiCMDReadRealTimeHealthData = 57,
/// 清除体温历史记录
  ZHJBleApiCMDClearTemperatureRecord = 58,
/// 清除运动模式历史记录
  ZHJBleApiCMDClearSportModeRecord = 59,
/// 清除心率血压血氧历史记录
  ZHJBleApiCMDClearHR_BP_BORecord = 60,
/// 清除计步睡眠历史记录
  ZHJBleApiCMDClearStepAndSleepRecord = 61,
/// 发送天气
  ZHJBleApiCMDSyncWeather = 62,
/// 发送支持天气区间的天气
  ZHJBleApiCMDSyncWeatherB = 63,
/// 发送表盘(B类表盘)
  ZHJBleApiCMDSendDialB = 64,
/// 切换表盘(B类表盘)
  ZHJBleApiCMDSwitchDial = 65,
/// 删除表盘(B类表盘)
  ZHJBleApiCMDDeleteDial = 66,
/// 读取设备表盘配置信息（B类表盘，当前表盘和已安装表盘ID）
  ZHJBleApiCMDReadDialBaseInfo = 67,
};


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceDataBaseModel")
@interface ZHJDeviceDataBaseModel : NSObject
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 设备mac
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 日期
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 上传状态
@property (nonatomic) NSInteger uploadStatus;
/// 设备类型 0:手环，1：手机
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodOxygenDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJBloodOxygen")
@interface ZHJBloodOxygen : ZHJDeviceDataBaseModel
/// 最大血氧
@property (nonatomic) NSInteger max;
/// 最小血氧
@property (nonatomic) NSInteger min;
/// 平均血氧
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodOxygenDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJBloodOxygenDetail")
@interface ZHJBloodOxygenDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 血氧值
@property (nonatomic) NSInteger BO;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodPressureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBloodPressure")
@interface ZHJBloodPressure : ZHJDeviceDataBaseModel
/// 最大血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull max;
/// 最小血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull min;
/// 平均血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodPressureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJBloodPressureDetail")
@interface ZHJBloodPressureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 舒张压(diastolic blood pressure，DBP)
@property (nonatomic) NSInteger DBP;
/// 收缩压(systolic blood pressure ，SBP)
@property (nonatomic) NSInteger SBP;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJCallContrl, open) {
/// 无效
  ZHJCallContrlDefault = 0x00,
/// 接电话
  ZHJCallContrlAnswer = 0x01,
/// 挂断电话
  ZHJCallContrlHangUp = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJClearDeviceProcessor")
@interface ZHJClearDeviceProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJClearDeviceProcessor * _Nonnull shared;)
+ (ZHJClearDeviceProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 清除全部运动记录数据
- (void)clearAllSportRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 恢复出厂设置
- (void)resetDeviceWithResetHandle:(void (^ _Nonnull)(enum ZHJBLEError))resetHandle;
/// 重启设备
- (void)rebootDeviceWithRebootHandle:(void (^ _Nonnull)(enum ZHJBLEError))rebootHandle;
@end

enum ZHJlLanguage : NSInteger;
enum ZHJUnit : NSInteger;
enum ZHJTimeMode : NSInteger;
enum ZHJTemperatureUnit : NSInteger;
enum ZHJWearStyle : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJDeviceConfig")
@interface ZHJDeviceConfig : NSObject
/// 屏幕亮度
@property (nonatomic) NSInteger brightness;
/// 亮屏时长
@property (nonatomic) NSInteger brightDuration;
/// 主题皮肤
@property (nonatomic) NSInteger theme;
/// 语言选择
@property (nonatomic) enum ZHJlLanguage language;
/// 单位
@property (nonatomic) enum ZHJUnit unit;
/// 时间制式
@property (nonatomic) enum ZHJTimeMode timeMode;
/// 翻腕亮屏
@property (nonatomic) BOOL trunWrist;
/// 音乐控制
@property (nonatomic) BOOL musicCtrl;
/// 通知
@property (nonatomic) BOOL notice;
/// 温度单位
@property (nonatomic) enum ZHJTemperatureUnit temperatureUnit;
/// 佩戴方式
@property (nonatomic) enum ZHJWearStyle wearStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJDeviceConfigProcessor")
@interface ZHJDeviceConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceConfigProcessor * _Nonnull shared;)
+ (ZHJDeviceConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备基本配置信息
/// \param deviceConfigHandle 读取后的设备数据返回
///
- (void)readDeviceConfigWithDeviceConfigHandle:(void (^ _Nonnull)(ZHJDeviceConfig * _Nonnull))deviceConfigHandle;
/// 写入设备配置
/// \param config 配置对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDeviceConfig:(ZHJDeviceConfig * _Nonnull)config setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceControlProcessor")
@interface ZHJDeviceControlProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceControlProcessor * _Nonnull shared;)
+ (ZHJDeviceControlProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 接收到设备主动发来的数据
- (void)readDeviceControlRealTimeDataWithTakePhotoContrlHandle:(void (^ _Nonnull)(NSInteger))takePhotoContrlHandle musicContrlHandle:(void (^ _Nonnull)(NSInteger))musicContrlHandle findContrlHandle:(void (^ _Nonnull)(NSInteger))findContrlHandle;
/// 查找设备
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)findDeviceWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 退出拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoCancelWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJDeviceControlType, open) {
  ZHJDeviceControlTypeCall = 0,
  ZHJDeviceControlTypeSos = 1,
  ZHJDeviceControlTypePhoto = 2,
  ZHJDeviceControlTypeMusic = 3,
  ZHJDeviceControlTypeFind = 4,
  ZHJDeviceControlTypeQuickReply = 5,
  ZHJDeviceControlTypeFamilyCall = 6,
  ZHJDeviceControlTypeGps = 7,
  ZHJDeviceControlTypeDefault = 8,
};


@class ZHJSportConfig;

SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceFeatureProcessor")
@interface ZHJDeviceFeatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceFeatureProcessor * _Nonnull shared;)
+ (ZHJDeviceFeatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动模式配置
/// \param sportConfigHandle 读取后的设备数据返回
///
- (void)readSportConfigWithSportConfigHandle:(void (^ _Nonnull)(ZHJSportConfig * _Nonnull))sportConfigHandle;
/// 写入通知配置
/// \param sportConfig 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSportConfigWithSportConfig:(ZHJSportConfig * _Nonnull)sportConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDeviceFirmware")
@interface ZHJDeviceFirmware : NSObject
/// 版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 升级包下载路径
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 文件名称
@property (nonatomic, copy) NSString * _Nonnull fileName;
/// 提示内容
@property (nonatomic, copy) NSString * _Nonnull tip;
/// 是否升级
@property (nonatomic) BOOL update;
/// 是否强制升级
@property (nonatomic) BOOL forceUpdate;
/// 设备类型 0 noridc,1手机，2.Telink
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceInfoProcessor")
@interface ZHJDeviceInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceInfoProcessor * _Nonnull shared;)
+ (ZHJDeviceInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 手动读取设备信息
/// \param deviceInfoHandle 设备信息返回
///
- (void)readDeviceInfoWithDeviceInfoHandle:(void (^ _Nonnull)(ZHJBTDevice * _Nonnull))deviceInfoHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJDial")
@interface ZHJDial : NSObject
/// 背景图(后景)
@property (nonatomic, strong) UIImage * _Nullable image;
/// 背景图(后景)网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 模板图（前景）
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 模板图（前景）网络地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
/// 表盘(模板前景)ID编号，设备自带需严格按照自带序号来填写
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1用户自定义
@property (nonatomic) NSInteger type;
/// 图片实际数据格式，0:16bit rgb(565)(默认) 1:16bit bgr(565)(预留) 2:24bit rgb(888)(预留)
@property (nonatomic) NSInteger format;
/// 主题背景图片尺寸
@property (nonatomic) CGSize imageSize;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响（服务器可忽略此属性）
@property (nonatomic) BOOL isSelected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJDialB")
@interface ZHJDialB : NSObject
/// 网络扩展属性， 服务器自增编号，用于上传表盘
@property (nonatomic) NSInteger serverId;
/// 网络扩展属性，分类ID
@property (nonatomic) NSInteger categoryId;
/// 网络扩展属性，设备适配ID，一个设备型号对应唯一的adapterId，用于查询该设备的表盘配置信息
@property (nonatomic) NSInteger adapterId;
/// 表盘编号
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1自定义
@property (nonatomic) NSInteger type;
/// 表盘预览图网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 表盘bin文件网络地址
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 表盘文件数据，通过fileUrl获取
@property (nonatomic, copy) NSData * _Nonnull fileData;
/// 表盘物理尺寸，用于用户自动表盘时的发送
@property (nonatomic) CGSize dialSize;
/// 背景图(后景),  用于自定义表盘发送，如是用户自定义背景的表盘，则需要给此属性赋值
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
/// 扩展属性，模板图（前景，与backgroundImage叠加成一张表盘图片），  用于自定义表盘本地存储，不对表盘发送产生实质影响
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响
@property (nonatomic) BOOL isSelected;
/// 扩展属性，是否当前设备正在显示的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isCurrent;
/// 扩展属性，是否当前设备已安装并且存在在当前的设备的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isInstalled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialBCategory")
@interface ZHJDialBCategory : NSObject
/// 表盘类别id
@property (nonatomic) NSInteger id;
/// 标签名称
@property (nonatomic, copy) NSString * _Nonnull categoryName;
/// 表盘数组
@property (nonatomic, copy) NSArray<ZHJDialB *> * _Nonnull dials;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJDialBConfig")
@interface ZHJDialBConfig : NSObject
/// 适配ID，用于请求分类表盘的详细信息
@property (nonatomic) NSInteger adapterId;
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 设备分类
@property (nonatomic, copy) NSArray<ZHJDialBCategory *> * _Nonnull dialALables;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 手表当前显示的表盘
@property (nonatomic) NSInteger currentDialID;
/// 手表现有已安装的表盘
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull installedIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDialBProcessor")
@interface ZHJDialBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialBProcessor * _Nonnull shared;)
+ (ZHJDialBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备的表盘基础信息（表盘id与表盘状态）
/// \param dialBBaseInfoBlock 信息返回
///
- (void)readDialBaseInfoWithDialBBaseInfoBlock:(void (^ _Nonnull)(NSArray<ZHJDialB *> * _Nonnull))dialBBaseInfoBlock;
/// 删除表盘
/// \param dialID 表盘ID
///
/// \param setHandle 删除结果
///
- (void)deleteDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送表盘到设备
/// \param dial 表盘模型
///
/// \param progress 发送进度回调
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
- (void)sendDialWithDial:(ZHJDialB * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 切换表盘
/// \param dialID 表盘ID
///
/// \param setHandle 切换结果回调
///
- (void)switchDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJDialConfig")
@interface ZHJDialConfig : NSObject
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘尺寸，例：80<em>160，240</em>240，中间用“|”符号隔开
@property (nonatomic, copy) NSString * _Nonnull dialSizeString;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 表盘尺寸字符串
@property (nonatomic, copy) NSString * _Nonnull dialShapeString;
/// 设备表盘
@property (nonatomic, copy) NSArray<ZHJDial *> * _Nonnull details;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 模板
@property (nonatomic, copy) NSArray<DialTemplate *> * _Nonnull templates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialProcessor")
@interface ZHJDialProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialProcessor * _Nonnull shared;)
+ (ZHJDialProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)sendDialWithDial:(ZHJDial * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 接收到蓝牙数据的通知处理
/// \param notify 通知数据
///
- (void)dataDidReceivedWithNotification:(NSNotification * _Nonnull)notification;
@end

@class ZHJTime;

SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJDrinkWaterConfig")
@interface ZHJDrinkWaterConfig : NSObject
/// 提醒时间段数组
@property (nonatomic, copy) NSArray<ZHJTime *> * _Nonnull reminderArray;
/// 提醒开关
@property (nonatomic) BOOL reminderSwitch;
/// 喝水目标
@property (nonatomic) NSInteger target;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 这个类能处理多类型事件，如有需要则要修改下参数命名等，暂只处理喝水
SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJDrinkWaterConfigProcessor")
@interface ZHJDrinkWaterConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDrinkWaterConfigProcessor * _Nonnull shared;)
+ (ZHJDrinkWaterConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取事件提醒
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readDrinkWaterConfigWithDrinkWaterConfigHandle:(void (^ _Nonnull)(ZHJDrinkWaterConfig * _Nonnull))drinkWaterConfigHandle;
/// 写入提醒事件
/// \param sedentary 事件数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDrinkWaterConfigWithDrinkWaterConfig:(ZHJDrinkWaterConfig * _Nonnull)drinkWaterConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth6ZHJECG")
@interface ZHJECG : ZHJDeviceDataBaseModel
/// 心率
@property (nonatomic) NSInteger HR;
/// ecg数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull ecgValues;
/// 增益
@property (nonatomic) CGFloat gain;
/// 走速
@property (nonatomic) CGFloat speed;
/// 心电结果数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull results;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZHJECG (SWIFT_EXTENSION(TrusangBluetooth))
- (BOOL)isException SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJECGProcessor")
@interface ZHJECGProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJECGProcessor * _Nonnull shared;)
+ (ZHJECGProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)ecgStartWithStartHandle:(void (^ _Nonnull)(enum ZHJBLEError))startHandle;
- (void)ecgEndWithEndHandle:(void (^ _Nonnull)(enum ZHJBLEError))endHandle;
/// 获取单次心电数据
/// \param ecgHandle 数据返回
///
- (void)readEcgHistoryRecordWithEcgHandle:(void (^ _Nonnull)(ZHJECG * _Nonnull))ecgHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
- (void)readECGWithMeasuring:(void (^ _Nonnull)(CGFloat))measuring;
- (void)readHeartRateWithHeartRate:(void (^ _Nonnull)(NSInteger))heartRate;
- (void)readECGStateWithMeasuringState:(void (^ _Nonnull)(enum ECGMeasuringState))measuringState;
- (void)readECGReportWithReport:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nonnull))report;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJEnablePairProcessor")
@interface ZHJEnablePairProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJEnablePairProcessor * _Nonnull shared;)
+ (ZHJEnablePairProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送开启配对指令
- (void)enablePairWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJFamliyCallContrl, open) {
/// 无效
  ZHJFamliyCallContrlDefault = 0x00,
/// 开始呼叫
  ZHJFamliyCallContrlStart = 0x01,
/// 结束呼叫
  ZHJFamliyCallContrlEnd = 0x02,
};

typedef SWIFT_ENUM(NSInteger, ZHJFindContrl, open) {
/// 无效
  ZHJFindContrlDefault = 0x00,
/// 查找
  ZHJFindContrlFind = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth27ZHJFirmwareUpgradeProcessor")
@interface ZHJFirmwareUpgradeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJFirmwareUpgradeProcessor * _Nonnull shared;)
+ (ZHJFirmwareUpgradeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 进入升级模式
- (void)startFirmwareUpgradeWithReadHandle:(void (^ _Nonnull)(enum ZHJBLEError))readHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJGPSContrl, open) {
/// 无效
  ZHJGPSContrlDefault = 0x00,
/// 开启
  ZHJGPSContrlEnable = 0x01,
/// 关闭
  ZHJGPSContrlDisable = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHRAlarm_t")
@interface ZHJHRAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJHRTimingDetect_t")
@interface ZHJHRTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJHeartRateDetail;
@class ZHJHeartRate;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJHR_BP_BOProcessor")
@interface ZHJHR_BP_BOProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJHR_BP_BOProcessor * _Nonnull shared;)
+ (ZHJHR_BP_BOProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除心率血压血氧历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearHR_BP_BORecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置心率告警区间
/// \param maxHR 最大心率
///
/// \param minHR 最小心率
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setHeartRateAlarmLimitWithMaxHR:(NSInteger)maxHR minHR:(NSInteger)minHR isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率、血压、血氧告警区间(与设置心率的方法二选一)
/// \param HRAlarm 心率告警模型
///
/// \param BPAlarm 血压告警模型
///
/// \param BOAlarm 血氧告警模型
///
/// \param setHandle 设置返回
///
- (void)setHR_BP_BOAlarmLimitWithHRAlarm:(ZHJHRAlarm_t * _Nonnull)HRAlarm BPAlarm:(ZHJBPAlarm_t * _Nonnull)BPAlarm BOAlarm:(ZHJBOAlarm_t * _Nonnull)BOAlarm setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectHeartRateWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 开始心率检测
/// \param setHandle 设置返回
///
- (void)startDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 结束心率检测
/// \param setHandle 设置返回
///
- (void)endDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备心率血压血氧数据
/// \param currentStepHandle 当前心率血压血氧数据返回
///
- (void)readCurrentHR_BP_BOWithCurrentDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull))currentDataHandle;
/// 获取手环心率高、低报警限制开启使能设置
/// \param HRAlarmHandle 设置返回
///
- (void)readHeartAlarmSettingWithHRAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull))HRAlarmHandle;
/// 获取手环心率、血压、血氧报警限制开启使能设置
/// \param alarmHandle 设置返回
///
- (void)readHR_BP_BOAlarmSettingWithAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull, ZHJBPAlarm_t * _Nonnull, ZHJBOAlarm_t * _Nonnull))alarmHandle;
/// 获取手环自动心率采样设置
/// \param HRTimingDetectHandle 设置返回
///
- (void)readHeartTimingDetectSettingWithHRTimingDetectHandle:(void (^ _Nonnull)(ZHJHRTimingDetect_t * _Nonnull))HRTimingDetectHandle;
/// 设置心率、舒张压、收缩压、血氧校准值
/// \param HR 心率
///
/// \param DBP 舒张压
///
/// \param SBP 收缩压
///
/// \param BO 血氧
///
/// \param setHandle 设置结果回调
///
- (void)setHR_BP_BOCalibrationWithHR:(NSInteger)HR DBP:(NSInteger)DBP SBP:(NSInteger)SBP BO:(NSInteger)BO setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取心率血压血氧校准数据
/// \param currentStepHandle 依次返回心率、舒张压、收缩压、血氧校准值
///
- (void)readHR_BP_BOCalibrationWithHR_BP_BOCalibrationHandle:(void (^ _Nonnull)(NSInteger, NSInteger, NSInteger, NSInteger))HR_BP_BOCalibrationHandle;
/// 获取历史心率血压血氧记录
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readHR_BP_BOHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJHeartRate * _Nonnull, ZHJBloodPressure * _Nonnull, ZHJBloodOxygen * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJHR_BP_BOSelectType, open) {
/// 获取当前心率、血压、血氧数据(设备显示)
  ZHJHR_BP_BOSelectTypeCurrentHR_BP_BO = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJHR_BP_BOSelectTypeHistoryHR_BP_BO = 0x01,
/// 清除所有数据
  ZHJHR_BP_BOSelectTypeClearAll = 0x02,
/// 设置心率高、低限制开启使能
  ZHJHR_BP_BOSelectTypeHR_Max_Min = 0x03,
/// 设置自动心率采样
  ZHJHR_BP_BOSelectTypeAutoDetect_HR = 0x04,
/// APP 设置设备进入心率检测模式
  ZHJHR_BP_BOSelectTypeStartDetect_HR = 0x05,
/// APP 设置设备退出心率检测模式
  ZHJHR_BP_BOSelectTypeEndDetect_HR = 0x06,
/// 获取手环心率高、低限制开启使能设置
  ZHJHR_BP_BOSelectTypeGET_HR_Max_Min = 0x07,
/// 获取手环自动心率采样设置
  ZHJHR_BP_BOSelectTypeGET_autoDetect_HR = 0x08,
  ZHJHR_BP_BOSelectTypeHR_BP_BOCalibration = 0x09,
/// 获取心率血压血氧校准值
  ZHJHR_BP_BOSelectTypeGET_HR_BP_BOCalibration = 0x0a,
};


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHealthDataAlarm")
@interface ZHJHealthDataAlarm : NSObject
/// 报警数据类型
@property (nonatomic) enum HealthDataAlarmType type;
/// 值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHeartRate")
@interface ZHJHeartRate : ZHJDeviceDataBaseModel
/// 最大心率
@property (nonatomic) NSInteger max;
/// 最小心率
@property (nonatomic) NSInteger min;
/// 平均心率
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJHeartRateDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHeartRateDetail")
@interface ZHJHeartRateDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 心率值
@property (nonatomic) NSInteger HR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJMessageNotice")
@interface ZHJMessageNotice : NSObject
@property (nonatomic) BOOL twitter;
@property (nonatomic) BOOL facebook;
@property (nonatomic) BOOL email;
@property (nonatomic) BOOL sms;
@property (nonatomic) BOOL incoming;
@property (nonatomic) BOOL whatsapp;
@property (nonatomic) BOOL line;
@property (nonatomic) BOOL skype;
@property (nonatomic) BOOL qq;
@property (nonatomic) BOOL wechat;
@property (nonatomic) BOOL instagram;
@property (nonatomic) BOOL linkedin;
@property (nonatomic) BOOL messenger;
@property (nonatomic) BOOL vk;
@property (nonatomic) BOOL viber;
@property (nonatomic) BOOL dingtalk;
@property (nonatomic) BOOL telegram;
@property (nonatomic) BOOL sinaweibo;
@property (nonatomic) BOOL kakao;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJMessageNoticeProcessor")
@interface ZHJMessageNoticeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageNoticeProcessor * _Nonnull shared;)
+ (ZHJMessageNoticeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取消息通知配置(暂时支持16种应用消息)
/// \param messageNoticeHandle 读取后的设备数据返回
///
- (void)readMessageNoticeWithMessageNoticeHandle:(void (^ _Nonnull)(ZHJMessageNotice * _Nonnull))messageNoticeHandle;
/// 写入通知配置
/// \param notice 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeMessageNotice:(ZHJMessageNotice * _Nonnull)notice setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMessageNoticeType, open) {
  ZHJMessageNoticeTypeTwitter = 0,
  ZHJMessageNoticeTypeFacebook = 1,
  ZHJMessageNoticeTypeEmail = 2,
  ZHJMessageNoticeTypeSms = 3,
  ZHJMessageNoticeTypeIncoming = 4,
  ZHJMessageNoticeTypeWhatsapp = 5,
  ZHJMessageNoticeTypeLine = 6,
  ZHJMessageNoticeTypeSkype = 7,
  ZHJMessageNoticeTypeQq = 8,
  ZHJMessageNoticeTypeWechat = 9,
  ZHJMessageNoticeTypeInstagram = 10,
  ZHJMessageNoticeTypeLinkedin = 11,
  ZHJMessageNoticeTypeMessager = 12,
  ZHJMessageNoticeTypeVk = 13,
  ZHJMessageNoticeTypeViber = 14,
  ZHJMessageNoticeTypeDingtalk = 15,
  ZHJMessageNoticeTypeTelegram = 16,
  ZHJMessageNoticeTypeSinaweibo = 17,
};


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJMessageProcessor")
@interface ZHJMessageProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageProcessor * _Nonnull shared;)
+ (ZHJMessageProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送自定义消息
- (void)sendMessageWithMessage:(NSString * _Nonnull)message setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送震动
- (void)sendVibrate;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMusicContrl, open) {
/// 无效
  ZHJMusicContrlDefault = 0x00,
/// 播放/暂停
  ZHJMusicContrlPlayPause = 0x01,
/// 上一首
  ZHJMusicContrlPrevious = 0x02,
/// 下一首
  ZHJMusicContrlNext = 0x03,
/// 停止
  ZHJMusicContrlStop = 0x04,
/// 音量+
  ZHJMusicContrlVolumePlus = 0x05,
/// 音量-
  ZHJMusicContrlVolumeDecrease = 0x06,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJPairingCodeProcessor")
@interface ZHJPairingCodeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJPairingCodeProcessor * _Nonnull shared;)
+ (ZHJPairingCodeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送4位随机配对码
- (NSString * _Nonnull)sendPairingCodeWithPairResult:(void (^ _Nonnull)(enum ZHJBLEError))pairResult SWIFT_WARN_UNUSED_RESULT;
/// 关闭手环配对码页面
/// 关闭手环配对码页面
/// \param pairCodeError 配对码是否错误（由APP来判断）
///
/// \param setHandle 设备回应
///
- (void)closePairingCodeUIWithPairCodeError:(BOOL)pairCodeError setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJPhotoContrl, open) {
/// 无效
  ZHJPhotoContrlDefault = 0x00,
/// 开始拍照
  ZHJPhotoContrlStart = 0x01,
/// 拍照
  ZHJPhotoContrlTakePhoto = 0x02,
/// 结束拍照
  ZHJPhotoContrlEnd = 0x03,
};

typedef SWIFT_ENUM(NSInteger, ZHJQuickReplyContrl, open) {
/// 无效
  ZHJQuickReplyContrlDefault = 0x00,
/// 开始回复
  ZHJQuickReplyContrlStart = 0x01,
/// 取消回复
  ZHJQuickReplyContrlCancel = 0x02,
};

@class ZHJStepDetail;
@class ZHJTemperatureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth30ZHJRealTimeHealthDataProcessor")
@interface ZHJRealTimeHealthDataProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJRealTimeHealthDataProcessor * _Nonnull shared;)
+ (ZHJRealTimeHealthDataProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取实时健康数据
/// \param readHealthDataHandle 实时健康数据回调
///
- (void)readRealTimeHealthDataWithReadHealthDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull, ZHJStepDetail * _Nonnull, ZHJTemperatureDetail * _Nonnull))readHealthDataHandle;
/// 接收实时健康数据预警
/// \param alarms 预警数据数组
///
/// \param healthDataAlarmHandle 预警回调
///
- (void)realTimeHealthDataAlarmDidReceivedWithHealthDataAlarmHandle:(void (^ _Nonnull)(NSArray<ZHJHealthDataAlarm *> * _Nonnull))healthDataAlarmHandle;
@end

enum ZHJServerStatusCode : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSDKNetworkService")
@interface ZHJSDKNetworkService : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSDKNetworkService * _Nonnull shared;)
+ (ZHJSDKNetworkService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 查询固件升级信息
/// \param model 设备型号
///
/// \param version 设备固件版本号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectFirmwareUpgradeWithModel:(NSString * _Nonnull)model version:(NSString * _Nonnull)version success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDeviceFirmware * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置信息
/// \param model 设备型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectDialConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param model 型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)selectDialBConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialBConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param adapterId 型号适配ID
///
/// \param categoryId 分类ID
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)getDialBFromCategoryWithAdapterId:(NSInteger)adapterId categoryId:(NSInteger)categoryId success:(void (^ _Nonnull)(enum ZHJServerStatusCode, NSArray<ZHJDialB *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJServerStatusCode, open) {
/// 初始状态，默认
  ZHJServerStatusCodeDefault = 0,
/// 请求成功
  ZHJServerStatusCodeDone = 200,
/// 请求失败
  ZHJServerStatusCodeFail = 500,
};

typedef SWIFT_ENUM(NSInteger, ZHJSOSContrl, open) {
/// 无效
  ZHJSOSContrlDefault = 0x00,
/// 呼叫SOS
  ZHJSOSContrlAnswer = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSedentary")
@interface ZHJSedentary : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 生效开始时间（小时）
@property (nonatomic) NSInteger beginTime;
/// 生效结束时间（小时）
@property (nonatomic) NSInteger endTime;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 检测周期（单位5分钟） 范围0~255，当为0时由设备自行决策检测时间
@property (nonatomic) NSInteger intervals;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSedentaryProcessor")
@interface ZHJSedentaryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSedentaryProcessor * _Nonnull shared;)
+ (ZHJSedentaryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备久坐设置
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readSedentaryWithSedentaryHandle:(void (^ _Nonnull)(ZHJSedentary * _Nonnull))sedentaryHandle;
/// 写入久坐提醒
/// \param sedentary 久坐数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSedentary:(ZHJSedentary * _Nonnull)sedentary setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSex, open) {
/// 男
  ZHJSexMale = 0x00,
/// 女
  ZHJSexFemale = 0x01,
/// 未知其他
  ZHJSexUnknow = 0x02,
};

@class ZHJSleepDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJSleep")
@interface ZHJSleep : ZHJDeviceDataBaseModel
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJSleepDetail *> * _Nonnull details;
/// 入睡睡眠时长
@property (nonatomic) NSInteger beginDuration;
/// 浅睡时长
@property (nonatomic) NSInteger lightDuration;
/// 深睡时长
@property (nonatomic) NSInteger deepDuration;
/// 清醒时长
@property (nonatomic) NSInteger awakeDuration;
/// 快速眼动时长
@property (nonatomic) NSInteger REMDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSleepDetail")
@interface ZHJSleepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 睡眠类型 ZHJSleepType
@property (nonatomic) NSInteger type;
/// 时长单位分
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSleepType, open) {
/// 入睡
  ZHJSleepTypeBegin = 0x01,
/// 浅睡
  ZHJSleepTypeLight = 0x02,
/// 深睡
  ZHJSleepTypeDeep = 0x03,
/// 清醒
  ZHJSleepTypeAwake = 0x04,
/// 快速眼动睡眠
  ZHJSleepTypeREM = 0x05,
};


/// 用于自定义手环运动模式
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportConfig")
@interface ZHJSportConfig : NSObject
/// 步行(室外)
@property (nonatomic) BOOL walk;
/// 跑步(室外)
@property (nonatomic) BOOL run;
/// 游泳
@property (nonatomic) BOOL swim;
/// 骑行(室外)
@property (nonatomic) BOOL ride;
/// 室内跑步
@property (nonatomic) BOOL indoorRun;
/// 自由训练
@property (nonatomic) BOOL freeTrain;
/// 足球
@property (nonatomic) BOOL football;
/// 篮球
@property (nonatomic) BOOL basketball;
/// 羽毛球
@property (nonatomic) BOOL badminton;
/// 跳绳
@property (nonatomic) BOOL ropeSkip;
/// 俯卧撑
@property (nonatomic) BOOL pushUps;
/// 仰卧起坐
@property (nonatomic) BOOL sitUps;
/// 登山
@property (nonatomic) BOOL climb;
/// 网球
@property (nonatomic) BOOL tennis;
/// 高强度训练
@property (nonatomic) BOOL HIT;
/// 室内骑行
@property (nonatomic) BOOL indoorBike;
/// 健身
@property (nonatomic) BOOL fitness;
/// 橄榄球
@property (nonatomic) BOOL rugby;
/// 高尔夫球
@property (nonatomic) BOOL golf;
/// 动感单车
@property (nonatomic) BOOL happyBike;
/// 举重
@property (nonatomic) BOOL weightlift;
/// 轮滑
@property (nonatomic) BOOL rollerSkate;
/// 跳舞
@property (nonatomic) BOOL dance;
/// 瑜伽
@property (nonatomic) BOOL yoga;
/// 室内步行
@property (nonatomic) BOOL indoorWalk;
/// 徒步
@property (nonatomic) BOOL onFoot;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSportMode")
@interface ZHJSportMode : ZHJDeviceDataBaseModel
/// 运动类型 ZHJSportModeType
@property (nonatomic) NSInteger sportType;
/// 时长
@property (nonatomic) NSInteger duration;
/// 步数
@property (nonatomic) NSInteger step;
/// 心率
@property (nonatomic) NSInteger heartRate;
/// 配速
@property (nonatomic) NSInteger pace;
/// 速度
@property (nonatomic) NSInteger speed;
/// 卡路里
@property (nonatomic) NSInteger calories;
/// 距离
@property (nonatomic) NSInteger distance;
/// 采样间隔
@property (nonatomic) NSInteger interval;
/// 心率详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull heartRateArr;
/// 计步详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stepArr;
/// 配速详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull paceArr;
/// 经纬度数组 字符串数组 [纬度|经度, 纬度|经度, 纬度|经度]
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull coordinateArr;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeDataType, open) {
/// 单次运动数据总记录
  ZHJSportModeDataTypeSummary = 0x00,
/// 单次采样间隔数据(详情)
  ZHJSportModeDataTypeDetail = 0x01,
/// 传输完成
  ZHJSportModeDataTypeDone = 0x02,
/// 无运动记录
  ZHJSportModeDataTypeNoRecord = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSportModeProcessor")
@interface ZHJSportModeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportModeProcessor * _Nonnull shared;)
+ (ZHJSportModeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除运动历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearSportModeRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 获取单次运动模式数据
/// \param sportModeHandle 数据返回
///
- (void)readSportModeHistoryRecordWithSportModeHandle:(void (^ _Nonnull)(ZHJSportMode * _Nullable))sportModeHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeType, open) {
/// 🚶步行
  ZHJSportModeTypeWalk = 0x00,
/// 🏃跑步
  ZHJSportModeTypeRun = 0x01,
/// 🏊‍♀️游泳
  ZHJSportModeTypeSwim = 0x02,
/// 🚴骑行
  ZHJSportModeTypeRide = 0x03,
/// 🏠室内跑
  ZHJSportModeTypeIndoorRun = 0x04,
/// 🏋自由训练
  ZHJSportModeTypeFreeTrain = 0x05,
/// ⚽️足球
  ZHJSportModeTypeFootball = 0x06,
/// 🏀篮球
  ZHJSportModeTypeBasketball = 0x07,
/// 🏸羽毛球
  ZHJSportModeTypeBadminton = 0x08,
/// 跳绳
  ZHJSportModeTypeRopeSkip = 0x09,
/// 俯卧撑
  ZHJSportModeTypePushUps = 0x0A,
/// 仰卧起坐
  ZHJSportModeTypeSitUps = 0x0B,
/// 登山
  ZHJSportModeTypeClimb = 0x0C,
/// 网球
  ZHJSportModeTypeTennis = 0x0D,
/// 高强度训练
  ZHJSportModeTypeHIT = 0x0E,
/// 室内骑行
  ZHJSportModeTypeIndoorBike = 0x0F,
/// 健身
  ZHJSportModeTypeFitness = 0x10,
/// 橄榄球
  ZHJSportModeTypeRugby = 0x11,
/// 高尔夫球
  ZHJSportModeTypeGolf = 0x12,
/// 动感单车
  ZHJSportModeTypeHappyBike = 0x13,
/// 举重
  ZHJSportModeTypeWeightlift = 0x14,
/// 轮滑
  ZHJSportModeTypeRollerSkate = 0x15,
/// 跳舞
  ZHJSportModeTypeDance = 0x16,
/// 瑜伽
  ZHJSportModeTypeYoga = 0x17,
/// 室内步行
  ZHJSportModeTypeIndoorWalk = 0x18,
/// 徒步
  ZHJSportModeTypeOnFoot = 0x19,
/// 棒球
  ZHJSportModeTypeBaseball = 0x1A,
/// 滑板
  ZHJSportModeTypeSkateboard = 0x1B,
/// 冰球
  ZHJSportModeTypeIceHockey = 0x1C,
/// 滑雪
  ZHJSportModeTypeSkiing = 0x1D,
/// 赛车
  ZHJSportModeTypeRacingCar = 0x1E,
/// 健走
  ZHJSportModeTypeFastWalking = 0x1F,
/// 椭圆机
  ZHJSportModeTypeEllipticalMachine = 0x20,
/// 力量训练
  ZHJSportModeTypeStrengthTraining = 0x21,
/// 划船机
  ZHJSportModeTypeRowingMachine = 0x22,
/// 平板支撑
  ZHJSportModeTypePlankExercise = 0x23,
/// 开合跳
  ZHJSportModeTypeJumpingMovement = 0x24,
/// 波比跳
  ZHJSportModeTypeBobbyJump = 0x25,
/// 深蹲
  ZHJSportModeTypeSquatMovement = 0x26,
/// 高抬腿运动
  ZHJSportModeTypeHighLegLiftExercise = 0x27,
/// 臂力训练
  ZHJSportModeTypeArmStrengthTraining = 0x28,
/// 腿部训练
  ZHJSportModeTypeLegTraining = 0x29,
/// 踏步机
  ZHJSportModeTypeStepper = 0x2A,
/// 漫步器
  ZHJSportModeTypeWalker = 0x2B,
/// 健身操
  ZHJSportModeTypeAerobics = 0x2C,
/// 团体操
  ZHJSportModeTypeGroupGymnastics = 0x2D,
/// 普拉提
  ZHJSportModeTypePilates = 0x2E,
/// Cross fit
  ZHJSportModeTypeCrossFit = 0x2F,
/// 功能性训练
  ZHJSportModeTypeFunctionalTraining = 0x30,
/// 体能训练
  ZHJSportModeTypePhysicaTraining = 0x31,
/// 跆拳道
  ZHJSportModeTypeTaekwondo = 0x32,
/// 拳击
  ZHJSportModeTypeBoxing = 0x33,
/// 自由搏击
  ZHJSportModeTypeFreeSparring = 0x34,
/// 空手道
  ZHJSportModeTypeKarate = 0x35,
/// 击剑
  ZHJSportModeTypeFencing = 0x36,
/// 核心训练
  ZHJSportModeTypeCoreTraining = 0x37,
/// 搏击操
  ZHJSportModeTypeFightTraining = 0x38,
/// 剑道
  ZHJSportModeTypeKendo = 0x39,
/// 单杠
  ZHJSportModeTypeHorizontalBar = 0x3A,
/// 双杠
  ZHJSportModeTypeParallelBars = 0x3B,
/// 肚皮舞
  ZHJSportModeTypeBellyDance = 0x3C,
/// 爵士舞
  ZHJSportModeTypeJazz = 0x3D,
/// 拉丁舞
  ZHJSportModeTypeLatinDance = 0x3E,
/// 芭蕾
  ZHJSportModeTypeBallet = 0x3F,
/// 街舞
  ZHJSportModeTypeStreetDance = 0x40,
/// 广场舞
  ZHJSportModeTypeSquareDance = 0x41,
/// 武术
  ZHJSportModeTypeMartialArts = 0x42,
/// 太极拳
  ZHJSportModeTypeTaiChi = 0x43,
/// 呼啦圈
  ZHJSportModeTypeHulaHoop = 0x44,
/// 飞盘
  ZHJSportModeTypeFrisbee = 0x45,
/// 飞镖
  ZHJSportModeTypeDarts = 0x46,
/// 射箭
  ZHJSportModeTypeArchery = 0x47,
/// 骑马
  ZHJSportModeTypeHorseRiding = 0x48,
/// 对战游戏
  ZHJSportModeTypeBattleGame = 0x49,
/// 放风筝
  ZHJSportModeTypeFlyKite = 0x4A,
/// 拔河
  ZHJSportModeTypeTugOfWar = 0x4B,
/// 秋千
  ZHJSportModeTypeSwing = 0x4C,
/// 爬楼
  ZHJSportModeTypeClimbStairs = 0x4D,
/// 障碍赛
  ZHJSportModeTypeObstacleCourse = 0x4E,
/// 钓鱼
  ZHJSportModeTypeFishing = 0x4F,
/// 乒乓球
  ZHJSportModeTypePingpong = 0x50,
/// 台球
  ZHJSportModeTypeBilliards = 0x51,
/// 保龄球
  ZHJSportModeTypeBowling = 0x52,
/// 排球
  ZHJSportModeTypeVolleyball = 0x53,
/// 毽球
  ZHJSportModeTypeShuttlecock = 0x54,
/// 手球
  ZHJSportModeTypeHandball = 0x55,
/// 垒球
  ZHJSportModeTypeSoftball = 0x56,
/// 板球
  ZHJSportModeTypeCricketBall = 0x57,
/// 沙滩足球
  ZHJSportModeTypeBeachFootball = 0x58,
/// 门球
  ZHJSportModeTypeCroquet = 0x59,
/// 曲棍球
  ZHJSportModeTypeHockey = 0x5A,
/// 壁球
  ZHJSportModeTypeSquash = 0x5B,
/// 藤球
  ZHJSportModeTypeSepakTakraw = 0x5C,
/// 躲避球
  ZHJSportModeTypeDodgeBall = 0x5D,
/// 滑冰
  ZHJSportModeTypeSkate = 0x5E,
/// 冰壶
  ZHJSportModeTypeCurling = 0x5F,
/// 雪车
  ZHJSportModeTypeSnowCar = 0x60,
/// 雪橇
  ZHJSportModeTypeSled = 0x61,
/// 冬季两项
  ZHJSportModeTypeBiathlon = 0x62,
/// 攀岩
  ZHJSportModeTypeRockClimbing = 0x63,
/// 蹦极
  ZHJSportModeTypeBungeeJumping = 0x64,
/// 跑酷
  ZHJSportModeTypeParkour = 0x65,
/// BMX
  ZHJSportModeTypeBMX = 0x66,
/// 定向越野
  ZHJSportModeTypeOrienteering = 0x67,
/// 跳伞
  ZHJSportModeTypeParachute = 0x68,
/// 其他
  ZHJSportModeTypeDefault = 0xFF,
};

@class ZHJSportTargetInfo;

/// 设备运动目标
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportTarget")
@interface ZHJSportTarget : NSObject
/// 睡眠目标(单位小时)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull sleepTarget;
/// 计步目标
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull stepTarget;
/// 卡路里目标(单位大卡)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull caloriesTarget;
/// 距离目标(单位 KM)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull distanceTarget;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJSportTargetInfo")
@interface ZHJSportTargetInfo : NSObject
/// 是否开启
@property (nonatomic) BOOL enable;
/// 目标值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJSportTargetProcessor")
@interface ZHJSportTargetProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportTargetProcessor * _Nonnull shared;)
+ (ZHJSportTargetProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动目标信息
/// \param sportTargetHandle 读取后的设备数据返回
///
- (void)readSportTargetWithSportTargetHandle:(void (^ _Nonnull)(ZHJSportTarget * _Nonnull))sportTargetHandle;
/// 写入运动目标
/// \param target 运动目标
///
/// \param setHandel 写入后的设备数据返回
///
- (void)writeSportTarget:(ZHJSportTarget * _Nonnull)target setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportTargetType, open) {
/// 睡眠目标
  ZHJSportTargetTypeSleep = 0,
/// 步数目标
  ZHJSportTargetTypeStep = 1,
/// 卡路里目标
  ZHJSportTargetTypeCalories = 2,
/// 距离目标
  ZHJSportTargetTypeDistance = 3,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJStep")
@interface ZHJStep : ZHJDeviceDataBaseModel
/// 总步数
@property (nonatomic) NSInteger step;
/// 总卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 总距离 单位米
@property (nonatomic) CGFloat distance;
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJStepDetail *> * _Nonnull details;
/// 运动时长 单位分钟
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepDataType, open) {
/// 走路
  ZHJStepAndSleepDataTypeWalk = 0x00,
/// 跑步
  ZHJStepAndSleepDataTypeRun = 0x01,
/// 慢跑
  ZHJStepAndSleepDataTypeSlowRun = 0x02,
/// 睡眠相关数据（睡眠标志)
  ZHJStepAndSleepDataTypeSleep = 0x0F,
};


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJStepAndSleepProcessor")
@interface ZHJStepAndSleepProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJStepAndSleepProcessor * _Nonnull shared;)
+ (ZHJStepAndSleepProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除计步睡眠历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearStepAndSleepRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 读取当前设备计步数据
/// \param currentStepHandle 当前计步数据返回
///
- (void)readCurrentStepWithCurrentStepHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull))currentStepHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDataHandle 历史数据返回
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readStepAndSleepHistoryRecordWithDate:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull, ZHJSleep * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepSelectType, open) {
/// 当前计步
  ZHJStepAndSleepSelectTypeCurrentStep = 0x00,
/// 历史计步和睡眠
  ZHJStepAndSleepSelectTypeHistoryStepAndSleep = 0x01,
/// 清除所有计步和睡眠数据
  ZHJStepAndSleepSelectTypeClearAll = 0x02,
/// 最近的一次睡眠数据（暂时没用）
  ZHJStepAndSleepSelectTypeRecentSleep = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJStepDetail")
@interface ZHJStepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 计步类型 ZHJStepAndSleepDataType
@property (nonatomic) NSInteger type;
/// 卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 距离 单位米
@property (nonatomic) CGFloat distance;
/// 步数
@property (nonatomic) NSInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJSyncTime")
@interface ZHJSyncTime : NSObject
/// 年
@property (nonatomic) NSInteger year;
/// 月
@property (nonatomic) NSInteger month;
/// 日
@property (nonatomic) NSInteger day;
/// 小时
@property (nonatomic) NSInteger hour;
/// 分钟
@property (nonatomic) NSInteger minute;
/// 秒
@property (nonatomic) NSInteger second;
/// 时区
@property (nonatomic) NSInteger timeZone;
@end

@class NSDate;

@interface ZHJSyncTime (SWIFT_EXTENSION(TrusangBluetooth))
- (nonnull instancetype)init:(NSDate * _Nonnull)date;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSyncTimeProcessor")
@interface ZHJSyncTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSyncTimeProcessor * _Nonnull shared;)
+ (ZHJSyncTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备时间
/// \param syncTimeHandle 读取后的设备数据返回
///
- (void)readDeviceTimeWithSyncTimeHandle:(void (^ _Nonnull)(ZHJSyncTime * _Nonnull))syncTimeHandle;
/// 写入时间
/// \param time 时间
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeTime:(ZHJSyncTime * _Nonnull)time setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


/// 温度（单位0.01,如365，就是3.65℃）
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJTemperature")
@interface ZHJTemperature : ZHJDeviceDataBaseModel
/// 额头温度（历史数据只有手腕）
/// 最高温度
@property (nonatomic) NSInteger max;
/// 最低温度
@property (nonatomic) NSInteger min;
/// 平均温度
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJTemperatureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJTemperatureAlarm_t")
@interface ZHJTemperatureAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJTemperatureDetail")
@interface ZHJTemperatureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 手腕体温
@property (nonatomic) NSInteger wristTemperature;
/// 额头体温
@property (nonatomic) NSInteger headTemperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJTemperatureTimingDetect_t;

SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJTemperatureProcessor")
@interface ZHJTemperatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJTemperatureProcessor * _Nonnull shared;)
+ (ZHJTemperatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除体温历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearTemperatureRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置体温告警
/// \param maxTemperature 报警体温值
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setTemperatureAlarmLimitWithMaxTemperature:(NSInteger)maxTemperature isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置体温自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectTemperatureWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备体温数据
/// \param currentDataHandle 当前体温数据返回
///
- (void)readCurrentTemperatureWithCurrentDataHandle:(void (^ _Nonnull)(ZHJTemperatureDetail * _Nonnull))currentDataHandle;
/// 获取手环体温高报警设置
/// \param temperatureAlarmHandle 设置返回
///
- (void)readTemperatureAlarmSettingWithTemperatureAlarmHandle:(void (^ _Nonnull)(ZHJTemperatureAlarm_t * _Nonnull))temperatureAlarmHandle;
/// 获取手环自动体温采样设置
/// \param temperatureTimingDetectHandle 设置返回
///
- (void)readTemperatureTimingDetectSettingWithTemperatureTimingDetectHandle:(void (^ _Nonnull)(ZHJTemperatureTimingDetect_t * _Nonnull))temperatureTimingDetectHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readTemperatureHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJTemperature * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureSelectType, open) {
/// 获取当前人体温度数据(设备显示)
  ZHJTemperatureSelectTypeCurrent = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJTemperatureSelectTypeHistory = 0x01,
/// 清除所有数据
  ZHJTemperatureSelectTypeClearAll = 0x02,
/// 设置温度报警
  ZHJTemperatureSelectTypeSetAlarm = 0x03,
/// 设置自动温度采样
  ZHJTemperatureSelectTypeSetAutoDetect = 0x04,
/// 获取手环温度报警设置
  ZHJTemperatureSelectTypeGetAlarm = 0x05,
/// 获取手环自动体温采样设置
  ZHJTemperatureSelectTypeGetAutoDetect = 0x06,
/// APP 设置设备进入体温检测模式
  ZHJTemperatureSelectTypeStartDetect = 0x07,
/// APP 设置设备退出体温检测模式
  ZHJTemperatureSelectTypeEndDetect = 0x08,
};


SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJTemperatureTimingDetect_t")
@interface ZHJTemperatureTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureUnit, open) {
/// 摄氏（默认）
  ZHJTemperatureUnitCelsius = 0x00,
/// 华氏
  ZHJTemperatureUnitFahrenheit = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJTime")
@interface ZHJTime : NSObject
@property (nonatomic) NSInteger year;
@property (nonatomic) NSInteger month;
@property (nonatomic) NSInteger day;
@property (nonatomic) NSInteger hour;
@property (nonatomic) NSInteger minute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTimeMode, open) {
/// 24小时制（默认）
  ZHJTimeModeHour24 = 0x00,
/// 12小时制
  ZHJTimeModeHour12 = 0x01,
};

typedef SWIFT_ENUM(NSInteger, ZHJUnit, open) {
/// 公制（默认）
  ZHJUnitMetric = 0x00,
/// 英制
  ZHJUnitImperial = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJUserInfo")
@interface ZHJUserInfo : NSObject
/// 设备mac地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 性别(默认男，0男,1女)
@property (nonatomic) NSInteger sex;
/// 年龄 (0x06~0x64,默认 20)
@property (nonatomic) NSInteger age;
/// 身高（单位 cm，默认 170)
@property (nonatomic) NSInteger height;
/// 体重(单位 0.1kg，默认 600)
@property (nonatomic) NSInteger weight;
/// 身高描述
@property (nonatomic, copy) NSString * _Nonnull heightDesc;
/// 体重描述
@property (nonatomic, copy) NSString * _Nonnull weightDesc;
/// 生日
@property (nonatomic, copy) NSString * _Nonnull birthday;
/// 昵称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 单位0公制 1英制
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJUserInfoProcessor")
@interface ZHJUserInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJUserInfoProcessor * _Nonnull shared;)
+ (ZHJUserInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取个人信息
/// \param userInfoHandle 读取后的设备数据返回
///
- (void)readUserInfoWithUserInfoHandle:(void (^ _Nonnull)(ZHJUserInfo * _Nonnull))userInfoHandle;
/// 写入个人信息
/// \param info 个人信息对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeUserInfo:(ZHJUserInfo * _Nonnull)info setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJWearStyle, open) {
/// 左手（默认）
  ZHJWearStyleLeftHand = 0x01,
/// 右手
  ZHJWearStyleRightHand = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth10ZHJWeather")
@interface ZHJWeather : NSObject
/// 温度
@property (nonatomic, copy) NSString * _Nonnull temp;
/// 最低温度
@property (nonatomic, copy) NSString * _Nonnull temp_min;
/// 最高温度
@property (nonatomic, copy) NSString * _Nonnull temp_max;
/// 天气状态代号
@property (nonatomic, copy) NSString * _Nonnull weatherConditionCode;
/// 单位,0摄氏，1华氏
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJWeatherBProcessor")
@interface ZHJWeatherBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherBProcessor * _Nonnull shared;)
+ (ZHJWeatherBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备,支持今天的天气类型，温度，最低温和最高温，支持明天的天气类型，最低温和最高温，支持后天的天气类型，最低温和最高温
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJWeatherProcessor")
@interface ZHJWeatherProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherProcessor * _Nonnull shared;)
+ (ZHJWeatherProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJlLanguage, open) {
/// 🇬🇧英语（默认）
  ZHJlLanguageEnglish = 0x00,
/// 🇨🇳中文
  ZHJlLanguageChinese = 0x01,
/// 🇷🇺俄语
  ZHJlLanguageRussian = 0x02,
/// 🇺🇦乌克兰语
  ZHJlLanguageUkrainian = 0x03,
/// 🇫🇷法语
  ZHJlLanguageFrench = 0x04,
/// 🇪🇸西班牙语
  ZHJlLanguageSpanish = 0x05,
/// 🇵🇹葡萄牙语
  ZHJlLanguagePortuguese = 0x06,
/// 🇩🇪德语
  ZHJlLanguageGerman = 0x07,
/// 🇯🇵日语
  ZHJlLanguageJapan = 0x08,
/// 🇵🇱波兰语
  ZHJlLanguagePoland = 0x09,
/// 🇮🇹意大利语
  ZHJlLanguageItaly = 0x0A,
/// 🇷🇴罗马尼亚语
  ZHJlLanguageRomania = 0x0B,
/// 🇨🇳繁体中文
  ZHJlLanguageTd_chinese = 0x0C,
/// 🇰🇷韩语
  ZHJlLanguageKorean = 0x0D,
/// 🇹🇭泰语
  ZHJlLanguageThai = 0x0E,
/// 🇳🇱荷兰语
  ZHJlLanguageNetherlands = 0x0F,
/// 🇹🇷土耳其语
  ZHJlLanguageTurkish = 0x10,
/// 🇸🇦阿拉伯语
  ZHJlLanguageArabic = 0x11,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef TRUSANGBLUETOOTH_SWIFT_H
#define TRUSANGBLUETOOTH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TrusangBluetooth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 设备蓝牙状态
typedef SWIFT_ENUM(NSInteger, DeviceState, open) {
/// 没有任何动作
  DeviceStateDefault = 0,
/// 搜索中
  DeviceStateSearching = 1,
/// 连接中
  DeviceStateConnecting = 2,
/// 已连接
  DeviceStateConnected = 3,
/// 断开连接
  DeviceStateDisconnected = 4,
};

@class NSNumber;
@class NSString;

/// 表盘模板
SWIFT_CLASS("_TtC16TrusangBluetooth12DialTemplate")
@interface DialTemplate : NSObject
/// 模板id
@property (nonatomic) NSInteger id;
/// 模板地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ECGMeasuringState, open) {
/// 准备测量
  ECGMeasuringStatePrepare = 0,
/// 测量中
  ECGMeasuringStateMeasuring = 1,
/// 分析
  ECGMeasuringStateAnalysis = 2,
/// 测量失败
  ECGMeasuringStateFaild = 3,
/// 测量完成
  ECGMeasuringStateComplete = 4,
};

typedef SWIFT_ENUM(NSInteger, ECGResult, open) {
  ECGResultROT = 3,
/// VPB couple 双室性早搏比较严重的早搏，这种早搏需要马上进行就医，心脏某个部位发生了病变
  ECGResultCPT = 6,
/// accidental VPB 单个室性早搏 早搏是指异位起搏点发出的过早冲动引起的心脏搏动，为最常见的心律失常。早搏常见于健康人，如果偶尔发生，症 状缺如，一般不用服药
  ECGResultVPB = 7,
/// VPB bigeminy 室性二联律,室性二联律直接影响心脏的供血功能，导致心脏供血不足;
  ECGResultBGM = 8,
/// VPB trigeminy 室性三联律,心脏出现病变，有心悸、胸闷、心慌等表现
  ECGResultTGM = 9,
/// supraventricular tachycaridia 室上性心动过速,平静时每分钟心率超过 100 次。心动过速分生理性、病理性两种。 a.生理:情绪激动、剧烈运动、烟、酒、茶、咖啡刺激.b.病理:发热、贫血、休克、甲亢、心衰 临床表现:多属生理现象。无症状或者有心悸感 治疗:一般无需治疗，病理的可采用 B 受体阻滞 剂如普奈洛尔(心得安)减慢心率
  ECGResultTAC = 10,
/// supraventricular bradycaridia 室上性心动过缓(临床上低于 30 次每分钟) 正常成人的心率在每分钟 60~100 次之间，如果低于 30 次称为心动过缓。 病因:a、生理:健康的青年人，运动员等 b、病理:颅内高压、甲减、洋地黄中毒等 临床表现:多无症状，心排血量不足时头晕、乏力晕厥治疗:有症状可用阿托品等，用药症状不能缓解者可以安装心脏起搏器
  ECGResultBRD = 11,
/// missed beat 漏博 窦房结在一个不同长短时间内 不能产生冲动，导致心房和心室电活动和机械活 动暂停或者中断的现象 病因:a、迷走神经张力增高或者颈动脉窦过敏 b、急性下壁心肌梗死、窦房结变性与纤维化 c、脑血管病变、应用洋地黄或者乙酰胆碱等药物 临床表现:可发生头晕、黑朦、晕厥，严重者可 发生阿-斯综合征甚至死亡
  ECGResultMIS = 16,
/// 正常
  ECGResultOK = 22,
};

typedef SWIFT_ENUM(NSInteger, HealthDataAlarmType, open) {
/// 低心率
  HealthDataAlarmTypeLowHR = 0,
/// 高心率
  HealthDataAlarmTypeHighHR = 1,
/// 低舒张压
  HealthDataAlarmTypeLowDBP = 2,
/// 高舒张压
  HealthDataAlarmTypeHighDBP = 3,
/// 低收缩压
  HealthDataAlarmTypeLowSBP = 4,
/// 高收缩压
  HealthDataAlarmTypeHighSBP = 5,
/// 低血氧
  HealthDataAlarmTypeLowBO = 6,
/// 高体温
  HealthDataAlarmTypeHighTEMP = 7,
};

@class NSData;

@interface UIImage (SWIFT_EXTENSION(TrusangBluetooth))
/// 根据图片大小提取像素
/// \param size 图片大小
///
///
/// returns:
/// 像素数组
- (NSArray<NSNumber *> * _Nullable)extraPixelsIn:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nonnull)convertRGB565WithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

enum ZHJAlarmClockType : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJAlarmClock")
@interface ZHJAlarmClock : NSObject
/// 闹钟开关
@property (nonatomic) BOOL isOpen;
/// 时
@property (nonatomic) NSInteger hour;
/// 分
@property (nonatomic) NSInteger minute;
/// 闹钟类型
@property (nonatomic) enum ZHJAlarmClockType type;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 是否有效闹钟,无效闹钟相当于空闹钟，删除后此属性置为false
@property (nonatomic) BOOL isValid;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBaseProcessor")
@interface ZHJBaseProcessor : NSObject
@end

enum ZHJBLEError : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJAlarmClockProcessor")
@interface ZHJAlarmClockProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAlarmClockProcessor * _Nonnull shared;)
+ (ZHJAlarmClockProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备闹钟
/// \param alarmClockHandle 读取后的设备数据返回
///
- (void)readAlarmClockWithAlarmClockHandle:(void (^ _Nonnull)(NSArray<ZHJAlarmClock *> * _Nonnull))alarmClockHandle;
/// 写入闹钟
/// \param clocks 闹钟数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeAlarmClock:(NSArray<ZHJAlarmClock *> * _Nonnull)clocks setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJAlarmClockType, open) {
/// 默认
  ZHJAlarmClockTypeDefault = 0x00,
/// 喝水
  ZHJAlarmClockTypeDrink = 0x01,
/// 吃药
  ZHJAlarmClockTypeTakeMedicine = 0x02,
/// 吃饭
  ZHJAlarmClockTypeEat = 0x03,
/// 运动
  ZHJAlarmClockTypeSport = 0x04,
/// 睡觉
  ZHJAlarmClockTypeSleep = 0x05,
/// 起床
  ZHJAlarmClockTypeAwake = 0x06,
/// 约会
  ZHJAlarmClockTypeDate = 0x07,
/// 聚会
  ZHJAlarmClockTypeParty = 0x08,
/// 会议
  ZHJAlarmClockTypeMeeting = 0x09,
};


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJAutoSleepTime")
@interface ZHJAutoSleepTime : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 开始睡眠时间 小时
@property (nonatomic) NSInteger beginHour;
/// 开始睡眠时间 分
@property (nonatomic) NSInteger beginMinute;
/// 结束睡眠时间 小时
@property (nonatomic) NSInteger endHour;
/// 结束睡眠时间 分
@property (nonatomic) NSInteger endMinute;
/// 周期
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 勿扰模式
@property (nonatomic) BOOL notDisturb;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJAutoSleepTimeProcessor")
@interface ZHJAutoSleepTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJAutoSleepTimeProcessor * _Nonnull shared;)
+ (ZHJAutoSleepTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备自动睡眠时间设置
/// \param autoSleepTimeHandle 读取后的设备数据返回
///
- (void)readAutoSleepTimeWithAutoSleepTimeHandle:(void (^ _Nonnull)(NSArray<ZHJAutoSleepTime *> * _Nonnull))autoSleepTimeHandle;
/// 写入自动睡眠时间
/// \param autoSleepTime 自动睡眠时间数组对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSleepSetting:(NSArray<ZHJAutoSleepTime *> * _Nonnull)autoSleepTimes setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLEError, open) {
/// 正确(成功)
  ZHJBLEErrorCorrect = 0x00,
/// 命令错误
  ZHJBLEErrorCmd_incorrect = 0x01,
/// 校验码错误
  ZHJBLEErrorCheckNum_incorrect = 0x02,
/// 命令长度
  ZHJBLEErrorCmdLen_incorrect = 0x03,
/// 子命令错误
  ZHJBLEErrorSubCmd_incorrect = 0x04,
/// 数据无效
  ZHJBLEErrorData_invalid = 0x05,
};

@class CBCentralManager;
@class ZHJBTDevice;
enum ZHJBTManagerState : NSInteger;
@class CBPeripheral;
@class CBCharacteristic;

SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJBLEManagerProvider")
@interface ZHJBLEManagerProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBLEManagerProvider * _Nonnull shared;)
+ (ZHJBLEManagerProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CBCentralManager * _Nullable btManager;
@property (nonatomic, strong) ZHJBTDevice * _Nullable currentDevice;
@property (nonatomic, copy) NSArray<ZHJBTDevice *> * _Nonnull deviceArr;
/// 设备连接状态
@property (nonatomic) enum DeviceState deviceState;
/// 是否搜索包含处于DFU状态的设备,默认否
@property (nonatomic) BOOL canScanDFU;
/// 命令交互完成
@property (nonatomic) BOOL cmdDone;
/// 心电数据完成
@property (nonatomic) BOOL ecgCmdDone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取蓝牙中心管理者的状态（外部调用,poweron之后才可以执行搜索）
/// \param state 状态
///
- (void)bluetoothProviderManagerStateDidUpdateWithState:(void (^ _Nonnull)(enum ZHJBTManagerState))state;
/// 设置数据接收超时时长，默认30秒
/// \param seconds 超时时长，单位：秒
///
- (void)setDataReceiveTimeout:(NSInteger)seconds;
/// 清除重连设备
- (void)removeAutoReconnectDevice;
/// 重连
- (void)autoReconnectWithSuccess:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail;
/// 连接设备（外部调用）
- (void)connectDeviceWithDevice:(ZHJBTDevice * _Nonnull)device success:(void (^ _Nonnull)(CBPeripheral * _Nonnull))success fail:(void (^ _Nonnull)(CBPeripheral * _Nonnull, NSError * _Nullable))fail timeout:(void (^ _Nonnull)(void))timeout;
/// 断开当前设备（外部调用）
- (void)disconnectDeviceWithDisconnect:(void (^ _Nonnull)(CBPeripheral * _Nonnull))disconnect;
/// 搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
- (void)scanWithDiscover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 设定搜索时间来搜索设备,返回的设备包含已与ANCS配对的设备，当设备已与ANCS配对，device的isANCSAuthorized为true，开发者可根据device的isANCSAuthorized的属性来区分已配对还是未配对（外部调用）
/// \param seconds 超时时间
///
- (void)scanWithSeconds:(NSTimeInterval)seconds discover:(void (^ _Nonnull)(NSArray<ZHJBTDevice *> * _Nonnull))discover;
/// 停止搜索（外部调用）
- (void)stopScan;
/// 监听设备状态
/// \param stateUpdate 状态变化回调
///
- (void)deviceStateDidUpdatedWithStateUpdate:(void (^ _Nonnull)(enum DeviceState))stateUpdate;
/// 发现写数据服务特征通道
/// \param write 写数据的通道
///
- (void)discoverWriteCharacteristicWithWrite:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))write;
/// 发现读数据的服务特征通道
/// \param read 读数据的通道
///
- (void)discoverReadCharacteristicWithRead:(void (^ _Nonnull)(CBCharacteristic * _Nonnull))read;
@end


@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth))
/// 设置身体信息
/// \param age 年龄，默认25岁
///
/// \param gender 性别，0男，1女，默认男
///
/// \param height 身高，单位cm，默认170cm
///
/// \param weight 体重，单位kg，默认60kg
///
/// \param calculateStaticCalories 是否计算静态卡路里，默认不计算
///
- (void)setBodyInfoWithGender:(NSInteger)gender age:(NSInteger)age height:(CGFloat)height weight:(CGFloat)weight calculateRMR:(BOOL)calculateRMR;
@end

@class CBService;

@interface ZHJBLEManagerProvider (SWIFT_EXTENSION(TrusangBluetooth)) <CBCentralManagerDelegate, CBPeripheralDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

enum ZHJBLE_Read_CMD : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJBLEMessage")
@interface ZHJBLEMessage : NSObject
/// 功能命令
@property (nonatomic) enum ZHJBLE_Read_CMD cmd;
/// 状态码
@property (nonatomic) enum ZHJBLEError state;
/// 消息
@property (nonatomic, copy) NSString * _Nullable message;
@end

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Read_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Read_CMDDeviceInfo = 0x81,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Read_CMDDeviceConfig = 0x82,
/// 获取/设置个人信息
  ZHJBLE_Read_CMDUserInfo = 0x83,
/// 获取/设置设备时间
  ZHJBLE_Read_CMDSyncTime = 0x84,
/// 获取/设置设备闹钟
  ZHJBLE_Read_CMDAlarmClock = 0x85,
/// 获取/设置设备久坐提醒
  ZHJBLE_Read_CMDSedentary = 0x86,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Read_CMDSportTarget = 0x87,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Read_CMDAutoSleepTime = 0x88,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Read_CMDMessageNotice = 0x89,
/// 自定义消息
  ZHJBLE_Read_CMDMessage = 0x8A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Read_CMDFirmwareUpgrade = 0x8B,
/// 校验链接有效性(预留)
  ZHJBLE_Read_CMDVerifyLink = 0x8C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Read_CMDDeviceControl = 0x90,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Read_CMDStep_sleep = 0xA0,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Read_CMDHR_BP_BO = 0xA1,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Read_CMDECG = 0xA2,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Read_CMDSportMode = 0xA3,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Read_CMDUv = 0xA4,
/// 获取/设置天气预报数据
  ZHJBLE_Read_CMDWeather = 0xA5,
/// 清除设备相关记录数据
  ZHJBLE_Read_CMDClearDeviceRecord = 0xA6,
/// 设备电池电量
  ZHJBLE_Read_CMDBattery = 0xA7,
/// 设备硬件参数设置(预留)
  ZHJBLE_Read_CMDHardwareConfig = 0xA8,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Read_CMDHighPrecisionSleep = 0xA9,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Read_CMDRealTimeHealthData = 0xAA,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Read_CMDTemperature = 0xAC,
/// 表盘
  ZHJBLE_Read_CMDDial = 0xAD,
/// 事件提醒
  ZHJBLE_Read_CMDEventReminder = 0xAE,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Read_CMDDeviceFeature = 0xAF,
/// 新版久坐提醒
  ZHJBLE_Read_CMDSedentaryB = 0xC1,
/// 翻腕亮屏
  ZHJBLE_Read_CMDTurnWristWakeScreen = 0xC2,
/// 查询连接验证的类型
  ZHJBLE_Read_CMDConnectVeriticationType = 0xC3,
/// 新版表盘
  ZHJBLE_Read_CMDDialB = 0xC4,
/// 支持温度区间的天气
  ZHJBLE_Read_CMDWeatherB = 0xC5,
/// 未知命令（不处理）
  ZHJBLE_Read_CMDUnknow = 0x00,
};

typedef SWIFT_ENUM(NSInteger, ZHJBLE_Write_CMD, open) {
/// 获取设备信息(产品型号、版本号、MAC 地址)
  ZHJBLE_Write_CMDDeviceInfo = 0x01,
/// 获取/设置设备状态(屏幕亮度、界面主题、语言选择、单位选择)
  ZHJBLE_Write_CMDDeviceConfig = 0x02,
/// 获取/设置个人信息
  ZHJBLE_Write_CMDUserInfo = 0x03,
/// 获取/设置设备时间
  ZHJBLE_Write_CMDSyncTime = 0x04,
/// 获取/设置设备闹钟
  ZHJBLE_Write_CMDAlarmClock = 0x05,
/// 获取/设置设备久坐提醒
  ZHJBLE_Write_CMDSedentary = 0x06,
/// 获取/设置设备运动目标提醒
  ZHJBLE_Write_CMDSportTarget = 0x07,
/// 获取/设置设备自动睡眠时间
  ZHJBLE_Write_CMDAutoSleepTime = 0x08,
/// 获取/设置设备通知提醒等开关状态
  ZHJBLE_Write_CMDMessageNotice = 0x09,
/// 自定义消息
  ZHJBLE_Write_CMDMessage = 0x0A,
/// 进入固件升级模式(OTA)
  ZHJBLE_Write_CMDFirmwareUpgrade = 0x0B,
/// 校验链接有效性(预留)
  ZHJBLE_Write_CMDVerifyLink = 0x0C,
/// 设备发送控制指令(电话、SOS、拍照、音乐、查找手机、查找手环等)
  ZHJBLE_Write_CMDDeviceControl = 0x10,
/// 获取/操作计步、睡眠记录数据
  ZHJBLE_Write_CMDStep_sleep = 0x20,
/// 获取/操作心率、血压、血氧记录数据 Heart rate, blood pressure, blood oxygen
  ZHJBLE_Write_CMDHR_BP_BO = 0x21,
/// 获取/操作心电记录数据、实时数据
  ZHJBLE_Write_CMDECG = 0x22,
/// 获取/操作单次运动模式记录数据(跑步、游泳等)
  ZHJBLE_Write_CMDSportMode = 0x23,
/// 获取/设置 UV Senser 数据
  ZHJBLE_Write_CMDUv = 0x24,
/// 获取/设置天气预报数据
  ZHJBLE_Write_CMDWeather = 0x25,
/// 清除设备相关记录数据
  ZHJBLE_Write_CMDClearDeviceRecord = 0x26,
/// 设备电池电量
  ZHJBLE_Write_CMDBattery = 0x27,
/// 设备硬件参数设置(预留)
  ZHJBLE_Write_CMDHardwareConfig = 0x28,
/// 获取高精度下的睡眠数据(预留)
  ZHJBLE_Write_CMDHighPrecisionSleep = 0x29,
/// 获取体温（2020年03月11日17:33:43新增）
  ZHJBLE_Write_CMDTemperature = 0x2C,
/// 实时健康数据（报警，2020年12月10日17:21:30新增）
  ZHJBLE_Write_CMDRealTimeHealthData = 0x2A,
/// 表盘
  ZHJBLE_Write_CMDDial = 0x2D,
/// 事件提醒
  ZHJBLE_Write_CMDEventReminder = 0x2E,
/// 获取/设置设备功能配置列表(包含运动类型配置)
  ZHJBLE_Write_CMDDeviceFeature = 0x2F,
/// 新版久坐提醒
  ZHJBLE_Write_CMDSedentaryB = 0x41,
/// 翻腕亮屏
  ZHJBLE_Write_CMDTurnWristWakeScreen = 0x42,
/// 查询连接验证的类型
  ZHJBLE_Write_CMDConnectVeriticationType = 0x43,
/// 新版表盘
  ZHJBLE_Write_CMDDialB = 0x44,
/// 支持温度区间的天气
  ZHJBLE_Write_CMDWeatherB = 0x45,
/// 未知命令（不处理）
  ZHJBLE_Write_CMDUnknow = 0x00,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBOAlarm_t")
@interface ZHJBOAlarm_t : NSObject
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJBPAlarm_t")
@interface ZHJBPAlarm_t : NSObject
/// 舒张压高值
@property (nonatomic) NSInteger maxDBP;
/// 舒张压低值
@property (nonatomic) NSInteger minDBP;
/// 收缩压高值
@property (nonatomic) NSInteger maxSBP;
/// 收缩压低值
@property (nonatomic) NSInteger minSBP;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJBTDevice")
@interface ZHJBTDevice : NSObject
/// 设备名称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 设备UUID
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// 设备MAC地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 设备信号强度
@property (nonatomic, strong) NSNumber * _Nonnull rssi;
/// 设备版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 原始设备
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
/// 产品型号
@property (nonatomic, copy) NSString * _Nullable model;
/// 电量
@property (nonatomic) NSInteger power;
/// 是否已经连接
@property (nonatomic) BOOL isConnected;
/// 是否已与ANCS配对
@property (nonatomic) BOOL isANCSAuthorized;
/// 设备SN号
@property (nonatomic, copy) NSString * _Nonnull sn;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 蓝牙中心状态
typedef SWIFT_ENUM(NSInteger, ZHJBTManagerState, open) {
  ZHJBTManagerStateUnknown = 0,
  ZHJBTManagerStateResetting = 1,
  ZHJBTManagerStateUnsupported = 2,
  ZHJBTManagerStateUnauthorized = 3,
  ZHJBTManagerStatePoweredOff = 4,
  ZHJBTManagerStatePoweredOn = 5,
};



SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJBatteryProcessor")
@interface ZHJBatteryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJBatteryProcessor * _Nonnull shared;)
+ (ZHJBatteryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备电量
/// \param batteryHandle 电量数据返回
///
- (void)readBatteryPowerWithBatteryHandle:(void (^ _Nonnull)(NSInteger))batteryHandle;
@end

/// Api类型列表
typedef SWIFT_ENUM(NSInteger, ZHJBleApiCMD, open) {
/// 读取消息提醒设置
  ZHJBleApiCMDReadMessageNotice = 0,
/// 写入消息提醒设置
  ZHJBleApiCMDWriteMessageNotice = 1,
/// 读取历史运动模式数据
  ZHJBleApiCMDReadSportModeHistoryRecord = 2,
/// 清除全部运动记录
  ZHJBleApiCMDClearAllSportRecord = 3,
/// 恢复出厂设置
  ZHJBleApiCMDResetDevice = 4,
/// 重启设备
  ZHJBleApiCMDRebootDevice = 5,
/// 读取设备时间
  ZHJBleApiCMDReadDeviceTime = 6,
/// 写入时间
  ZHJBleApiCMDWriteTime = 7,
/// 读取设备久坐设置
  ZHJBleApiCMDReadSedentary = 8,
/// 写入久坐提醒
  ZHJBleApiCMDWriteSedentary = 9,
/// 读取设备运动目标信息
  ZHJBleApiCMDReadSportTarget = 10,
/// 写入运动目标
  ZHJBleApiCMDWriteSportTarget = 11,
/// 接收到设备主动发来的数据
  ZHJBleApiCMDReadDeviceControlRealTimeData = 12,
/// 查找设备
  ZHJBleApiCMDFindDevice = 13,
/// 拍照
  ZHJBleApiCMDTakePhoto = 14,
/// 退出拍照
  ZHJBleApiCMDTakePhotoCancel = 15,
/// 设置心率告警区间
  ZHJBleApiCMDSetHeartRateAlarmLimit = 16,
/// 设置心率自动检测
  ZHJBleApiCMDSetAutoDetectHeartRate = 17,
/// 开始心率检测
  ZHJBleApiCMDStartDetectHeartRate = 18,
/// 结束心率检测
  ZHJBleApiCMDEndDetectHeartRate = 19,
/// 读取当前设备心率血压血氧数据
  ZHJBleApiCMDReadCurrentHR_BP_BO = 20,
/// 获取手环心率高、低报警限制开启使能设置
  ZHJBleApiCMDReadHeartAlarmSetting = 21,
/// 获取手环自动心率采样设置
  ZHJBleApiCMDReadHeartTimingDetectSetting = 22,
/// 设置心率血压血氧校准值
  ZHJBleApiCMDSetHR_BP_BOCalibration = 23,
/// 读取心率血压血氧校准值
  ZHJBleApiCMDReadHR_BP_BOCalibration = 24,
/// 获取历史心率血压血氧记录
  ZHJBleApiCMDReadHR_BP_BOHistoryRecord = 25,
/// 开始心电
  ZHJBleApiCMDEcgStart = 26,
/// 结束心电
  ZHJBleApiCMDEcgEnd = 27,
/// 获取单次心电数据
  ZHJBleApiCMDReadEcgHistoryRecord = 28,
/// 读取个人信息
  ZHJBleApiCMDReadUserInfo = 29,
/// 写入个人信息
  ZHJBleApiCMDWriteUserInfo = 30,
/// 进入升级模式
  ZHJBleApiCMDStartFirmwareUpgrade = 31,
/// 读取设备电量
  ZHJBleApiCMDReadBatteryPower = 32,
/// 读取设备闹钟
  ZHJBleApiCMDReadAlarmClock = 33,
/// 写入闹钟
  ZHJBleApiCMDWriteAlarmClock = 34,
/// 读取设备信息
  ZHJBleApiCMDReadDeviceInfo = 35,
/// 读取设备自动睡眠时间设置
  ZHJBleApiCMDReadAutoSleepTime = 36,
/// 写入自动睡眠时间
  ZHJBleApiCMDWriteSleepSetting = 37,
/// 发送开启配对指令
  ZHJBleApiCMDEnablePair = 38,
/// 读取当前设备计步数据
  ZHJBleApiCMDReadCurrentStep = 39,
/// 读取历史计步睡眠数据记录
  ZHJBleApiCMDReadStepAndSleepHistoryRecord = 40,
/// 发送4位随机配对码
  ZHJBleApiCMDSendPairingCode = 41,
/// 关闭手环配对码页面
  ZHJBleApiCMDClosePairingCodeUI = 42,
/// 发送自定义消息
  ZHJBleApiCMDSendMessage = 43,
/// 读取设备基本配置信息
  ZHJBleApiCMDReadDeviceConfig = 44,
/// 写入设备配置
  ZHJBleApiCMDWriteDeviceConfig = 45,
/// 设置体温告警
  ZHJBleApiCMDSetTemperatureAlarmLimit = 46,
/// 设置体温自动检测
  ZHJBleApiCMDSetAutoDetectTemperature = 47,
/// 读取当前设备体温数据
  ZHJBleApiCMDReadCurrentTemperature = 48,
/// 获取手环体温高报警设置
  ZHJBleApiCMDReadTemperatureAlarmSetting = 49,
/// 获取手环自动体温采样设置
  ZHJBleApiCMDReadTemperatureTimingDetectSetting = 50,
/// 读取历史体温记录
  ZHJBleApiCMDReadTemperatureHistoryRecord = 51,
/// 读取运动模式配置
  ZHJBleApiCMDReadSportConfig = 52,
/// 写入运动模式配置
  ZHJBleApiCMDWriteSportConfig = 53,
/// 发送表盘
  ZHJBleApiCMDSendDial = 54,
/// 读取喝水提醒设置
  ZHJBleApiCMDReadDrinkWaterConfig = 55,
/// 写入运动模式配置
  ZHJBleApiCMDWriteDrinkWaterConfig = 56,
/// 读取实时健康数据
  ZHJBleApiCMDReadRealTimeHealthData = 57,
/// 清除体温历史记录
  ZHJBleApiCMDClearTemperatureRecord = 58,
/// 清除运动模式历史记录
  ZHJBleApiCMDClearSportModeRecord = 59,
/// 清除心率血压血氧历史记录
  ZHJBleApiCMDClearHR_BP_BORecord = 60,
/// 清除计步睡眠历史记录
  ZHJBleApiCMDClearStepAndSleepRecord = 61,
/// 发送天气
  ZHJBleApiCMDSyncWeather = 62,
/// 发送支持天气区间的天气
  ZHJBleApiCMDSyncWeatherB = 63,
/// 发送表盘(B类表盘)
  ZHJBleApiCMDSendDialB = 64,
/// 切换表盘(B类表盘)
  ZHJBleApiCMDSwitchDial = 65,
/// 删除表盘(B类表盘)
  ZHJBleApiCMDDeleteDial = 66,
/// 读取设备表盘配置信息（B类表盘，当前表盘和已安装表盘ID）
  ZHJBleApiCMDReadDialBaseInfo = 67,
};


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceDataBaseModel")
@interface ZHJDeviceDataBaseModel : NSObject
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 设备mac
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 日期
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 上传状态
@property (nonatomic) NSInteger uploadStatus;
/// 设备类型 0:手环，1：手机
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodOxygenDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJBloodOxygen")
@interface ZHJBloodOxygen : ZHJDeviceDataBaseModel
/// 最大血氧
@property (nonatomic) NSInteger max;
/// 最小血氧
@property (nonatomic) NSInteger min;
/// 平均血氧
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodOxygenDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJBloodOxygenDetail")
@interface ZHJBloodOxygenDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 血氧值
@property (nonatomic) NSInteger BO;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJBloodPressureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJBloodPressure")
@interface ZHJBloodPressure : ZHJDeviceDataBaseModel
/// 最大血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull max;
/// 最小血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull min;
/// 平均血压
@property (nonatomic, strong) ZHJBloodPressureDetail * _Nonnull avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJBloodPressureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJBloodPressureDetail")
@interface ZHJBloodPressureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 舒张压(diastolic blood pressure，DBP)
@property (nonatomic) NSInteger DBP;
/// 收缩压(systolic blood pressure ，SBP)
@property (nonatomic) NSInteger SBP;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJCallContrl, open) {
/// 无效
  ZHJCallContrlDefault = 0x00,
/// 接电话
  ZHJCallContrlAnswer = 0x01,
/// 挂断电话
  ZHJCallContrlHangUp = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJClearDeviceProcessor")
@interface ZHJClearDeviceProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJClearDeviceProcessor * _Nonnull shared;)
+ (ZHJClearDeviceProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 清除全部运动记录数据
- (void)clearAllSportRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 恢复出厂设置
- (void)resetDeviceWithResetHandle:(void (^ _Nonnull)(enum ZHJBLEError))resetHandle;
/// 重启设备
- (void)rebootDeviceWithRebootHandle:(void (^ _Nonnull)(enum ZHJBLEError))rebootHandle;
@end

enum ZHJlLanguage : NSInteger;
enum ZHJUnit : NSInteger;
enum ZHJTimeMode : NSInteger;
enum ZHJTemperatureUnit : NSInteger;
enum ZHJWearStyle : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJDeviceConfig")
@interface ZHJDeviceConfig : NSObject
/// 屏幕亮度
@property (nonatomic) NSInteger brightness;
/// 亮屏时长
@property (nonatomic) NSInteger brightDuration;
/// 主题皮肤
@property (nonatomic) NSInteger theme;
/// 语言选择
@property (nonatomic) enum ZHJlLanguage language;
/// 单位
@property (nonatomic) enum ZHJUnit unit;
/// 时间制式
@property (nonatomic) enum ZHJTimeMode timeMode;
/// 翻腕亮屏
@property (nonatomic) BOOL trunWrist;
/// 音乐控制
@property (nonatomic) BOOL musicCtrl;
/// 通知
@property (nonatomic) BOOL notice;
/// 温度单位
@property (nonatomic) enum ZHJTemperatureUnit temperatureUnit;
/// 佩戴方式
@property (nonatomic) enum ZHJWearStyle wearStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJDeviceConfigProcessor")
@interface ZHJDeviceConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceConfigProcessor * _Nonnull shared;)
+ (ZHJDeviceConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备基本配置信息
/// \param deviceConfigHandle 读取后的设备数据返回
///
- (void)readDeviceConfigWithDeviceConfigHandle:(void (^ _Nonnull)(ZHJDeviceConfig * _Nonnull))deviceConfigHandle;
/// 写入设备配置
/// \param config 配置对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDeviceConfig:(ZHJDeviceConfig * _Nonnull)config setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceControlProcessor")
@interface ZHJDeviceControlProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceControlProcessor * _Nonnull shared;)
+ (ZHJDeviceControlProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 接收到设备主动发来的数据
- (void)readDeviceControlRealTimeDataWithTakePhotoContrlHandle:(void (^ _Nonnull)(NSInteger))takePhotoContrlHandle musicContrlHandle:(void (^ _Nonnull)(NSInteger))musicContrlHandle findContrlHandle:(void (^ _Nonnull)(NSInteger))findContrlHandle;
/// 查找设备
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)findDeviceWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
/// 退出拍照
/// \param control 命令
///
/// \param writeHandle 写入后的设备数据返回
///
- (void)takePhotoCancelWithWriteHandle:(void (^ _Nonnull)(enum ZHJBLEError))writeHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJDeviceControlType, open) {
  ZHJDeviceControlTypeCall = 0,
  ZHJDeviceControlTypeSos = 1,
  ZHJDeviceControlTypePhoto = 2,
  ZHJDeviceControlTypeMusic = 3,
  ZHJDeviceControlTypeFind = 4,
  ZHJDeviceControlTypeQuickReply = 5,
  ZHJDeviceControlTypeFamilyCall = 6,
  ZHJDeviceControlTypeGps = 7,
  ZHJDeviceControlTypeDefault = 8,
};


@class ZHJSportConfig;

SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJDeviceFeatureProcessor")
@interface ZHJDeviceFeatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceFeatureProcessor * _Nonnull shared;)
+ (ZHJDeviceFeatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动模式配置
/// \param sportConfigHandle 读取后的设备数据返回
///
- (void)readSportConfigWithSportConfigHandle:(void (^ _Nonnull)(ZHJSportConfig * _Nonnull))sportConfigHandle;
/// 写入通知配置
/// \param sportConfig 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSportConfigWithSportConfig:(ZHJSportConfig * _Nonnull)sportConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDeviceFirmware")
@interface ZHJDeviceFirmware : NSObject
/// 版本号
@property (nonatomic, copy) NSString * _Nonnull version;
/// 升级包下载路径
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 文件名称
@property (nonatomic, copy) NSString * _Nonnull fileName;
/// 提示内容
@property (nonatomic, copy) NSString * _Nonnull tip;
/// 是否升级
@property (nonatomic) BOOL update;
/// 是否强制升级
@property (nonatomic) BOOL forceUpdate;
/// 设备类型 0 noridc,1手机，2.Telink
@property (nonatomic) NSInteger deviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJDeviceInfoProcessor")
@interface ZHJDeviceInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDeviceInfoProcessor * _Nonnull shared;)
+ (ZHJDeviceInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 手动读取设备信息
/// \param deviceInfoHandle 设备信息返回
///
- (void)readDeviceInfoWithDeviceInfoHandle:(void (^ _Nonnull)(ZHJBTDevice * _Nonnull))deviceInfoHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJDial")
@interface ZHJDial : NSObject
/// 背景图(后景)
@property (nonatomic, strong) UIImage * _Nullable image;
/// 背景图(后景)网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 模板图（前景）
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 模板图（前景）网络地址
@property (nonatomic, copy) NSString * _Nonnull templateUrl;
/// 表盘(模板前景)ID编号，设备自带需严格按照自带序号来填写
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1用户自定义
@property (nonatomic) NSInteger type;
/// 图片实际数据格式，0:16bit rgb(565)(默认) 1:16bit bgr(565)(预留) 2:24bit rgb(888)(预留)
@property (nonatomic) NSInteger format;
/// 主题背景图片尺寸
@property (nonatomic) CGSize imageSize;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响（服务器可忽略此属性）
@property (nonatomic) BOOL isSelected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJDialB")
@interface ZHJDialB : NSObject
/// 网络扩展属性， 服务器自增编号，用于上传表盘
@property (nonatomic) NSInteger serverId;
/// 网络扩展属性，分类ID
@property (nonatomic) NSInteger categoryId;
/// 网络扩展属性，设备适配ID，一个设备型号对应唯一的adapterId，用于查询该设备的表盘配置信息
@property (nonatomic) NSInteger adapterId;
/// 表盘编号
@property (nonatomic) NSInteger id;
/// 表盘类型，0设备自带，1自定义
@property (nonatomic) NSInteger type;
/// 表盘预览图网络地址
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
/// 表盘bin文件网络地址
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
/// 表盘文件数据，通过fileUrl获取
@property (nonatomic, copy) NSData * _Nonnull fileData;
/// 表盘物理尺寸，用于用户自动表盘时的发送
@property (nonatomic) CGSize dialSize;
/// 背景图(后景),  用于自定义表盘发送，如是用户自定义背景的表盘，则需要给此属性赋值
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
/// 扩展属性，模板图（前景，与backgroundImage叠加成一张表盘图片），  用于自定义表盘本地存储，不对表盘发送产生实质影响
@property (nonatomic, strong) UIImage * _Nullable templateImage;
/// 扩展属性，是否选中，由开发者自行设置，不对表盘发送产生实质影响
@property (nonatomic) BOOL isSelected;
/// 扩展属性，是否当前设备正在显示的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isCurrent;
/// 扩展属性，是否当前设备已安装并且存在在当前的设备的表盘，不对表盘发送产生实质影响
@property (nonatomic) BOOL isInstalled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialBCategory")
@interface ZHJDialBCategory : NSObject
/// 表盘类别id
@property (nonatomic) NSInteger id;
/// 标签名称
@property (nonatomic, copy) NSString * _Nonnull categoryName;
/// 表盘数组
@property (nonatomic, copy) NSArray<ZHJDialB *> * _Nonnull dials;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJDialBConfig")
@interface ZHJDialBConfig : NSObject
/// 适配ID，用于请求分类表盘的详细信息
@property (nonatomic) NSInteger adapterId;
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 设备分类
@property (nonatomic, copy) NSArray<ZHJDialBCategory *> * _Nonnull dialALables;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 手表当前显示的表盘
@property (nonatomic) NSInteger currentDialID;
/// 手表现有已安装的表盘
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull installedIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth17ZHJDialBProcessor")
@interface ZHJDialBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialBProcessor * _Nonnull shared;)
+ (ZHJDialBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备的表盘基础信息（表盘id与表盘状态）
/// \param dialBBaseInfoBlock 信息返回
///
- (void)readDialBaseInfoWithDialBBaseInfoBlock:(void (^ _Nonnull)(NSArray<ZHJDialB *> * _Nonnull))dialBBaseInfoBlock;
/// 删除表盘
/// \param dialID 表盘ID
///
/// \param setHandle 删除结果
///
- (void)deleteDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送表盘到设备
/// \param dial 表盘模型
///
/// \param progress 发送进度回调
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
- (void)sendDialWithDial:(ZHJDialB * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 切换表盘
/// \param dialID 表盘ID
///
/// \param setHandle 切换结果回调
///
- (void)switchDialWithDialID:(NSInteger)dialID setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJDialConfig")
@interface ZHJDialConfig : NSObject
/// 设备型号
@property (nonatomic, copy) NSString * _Nonnull model;
/// 表盘尺寸，例：80<em>160，240</em>240，中间用“|”符号隔开
@property (nonatomic, copy) NSString * _Nonnull dialSizeString;
/// 表盘形状0为长方形， 1为正方形，2为圆形
@property (nonatomic) NSInteger shape;
/// 表盘尺寸字符串
@property (nonatomic, copy) NSString * _Nonnull dialShapeString;
/// 设备表盘
@property (nonatomic, copy) NSArray<ZHJDial *> * _Nonnull details;
/// 表盘尺寸
@property (nonatomic) CGSize dialSize;
/// 模板
@property (nonatomic, copy) NSArray<DialTemplate *> * _Nonnull templates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;

SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJDialProcessor")
@interface ZHJDialProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDialProcessor * _Nonnull shared;)
+ (ZHJDialProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)sendDialWithDial:(ZHJDial * _Nonnull)dial progress:(void (^ _Nonnull)(double))progress success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 接收到蓝牙数据的通知处理
/// \param notify 通知数据
///
- (void)dataDidReceivedWithNotification:(NSNotification * _Nonnull)notification;
@end

@class ZHJTime;

SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJDrinkWaterConfig")
@interface ZHJDrinkWaterConfig : NSObject
/// 提醒时间段数组
@property (nonatomic, copy) NSArray<ZHJTime *> * _Nonnull reminderArray;
/// 提醒开关
@property (nonatomic) BOOL reminderSwitch;
/// 喝水目标
@property (nonatomic) NSInteger target;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 这个类能处理多类型事件，如有需要则要修改下参数命名等，暂只处理喝水
SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJDrinkWaterConfigProcessor")
@interface ZHJDrinkWaterConfigProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJDrinkWaterConfigProcessor * _Nonnull shared;)
+ (ZHJDrinkWaterConfigProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取事件提醒
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readDrinkWaterConfigWithDrinkWaterConfigHandle:(void (^ _Nonnull)(ZHJDrinkWaterConfig * _Nonnull))drinkWaterConfigHandle;
/// 写入提醒事件
/// \param sedentary 事件数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeDrinkWaterConfigWithDrinkWaterConfig:(ZHJDrinkWaterConfig * _Nonnull)drinkWaterConfig setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth6ZHJECG")
@interface ZHJECG : ZHJDeviceDataBaseModel
/// 心率
@property (nonatomic) NSInteger HR;
/// ecg数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull ecgValues;
/// 增益
@property (nonatomic) CGFloat gain;
/// 走速
@property (nonatomic) CGFloat speed;
/// 心电结果数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull results;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZHJECG (SWIFT_EXTENSION(TrusangBluetooth))
- (BOOL)isException SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth15ZHJECGProcessor")
@interface ZHJECGProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJECGProcessor * _Nonnull shared;)
+ (ZHJECGProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)ecgStartWithStartHandle:(void (^ _Nonnull)(enum ZHJBLEError))startHandle;
- (void)ecgEndWithEndHandle:(void (^ _Nonnull)(enum ZHJBLEError))endHandle;
/// 获取单次心电数据
/// \param ecgHandle 数据返回
///
- (void)readEcgHistoryRecordWithEcgHandle:(void (^ _Nonnull)(ZHJECG * _Nonnull))ecgHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
- (void)readECGWithMeasuring:(void (^ _Nonnull)(CGFloat))measuring;
- (void)readHeartRateWithHeartRate:(void (^ _Nonnull)(NSInteger))heartRate;
- (void)readECGStateWithMeasuringState:(void (^ _Nonnull)(enum ECGMeasuringState))measuringState;
- (void)readECGReportWithReport:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nonnull))report;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth22ZHJEnablePairProcessor")
@interface ZHJEnablePairProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJEnablePairProcessor * _Nonnull shared;)
+ (ZHJEnablePairProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送开启配对指令
- (void)enablePairWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJFamliyCallContrl, open) {
/// 无效
  ZHJFamliyCallContrlDefault = 0x00,
/// 开始呼叫
  ZHJFamliyCallContrlStart = 0x01,
/// 结束呼叫
  ZHJFamliyCallContrlEnd = 0x02,
};

typedef SWIFT_ENUM(NSInteger, ZHJFindContrl, open) {
/// 无效
  ZHJFindContrlDefault = 0x00,
/// 查找
  ZHJFindContrlFind = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth27ZHJFirmwareUpgradeProcessor")
@interface ZHJFirmwareUpgradeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJFirmwareUpgradeProcessor * _Nonnull shared;)
+ (ZHJFirmwareUpgradeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 进入升级模式
- (void)startFirmwareUpgradeWithReadHandle:(void (^ _Nonnull)(enum ZHJBLEError))readHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJGPSContrl, open) {
/// 无效
  ZHJGPSContrlDefault = 0x00,
/// 开启
  ZHJGPSContrlEnable = 0x01,
/// 关闭
  ZHJGPSContrlDisable = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHRAlarm_t")
@interface ZHJHRAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 低值
@property (nonatomic) NSInteger min;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJHRTimingDetect_t")
@interface ZHJHRTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJHeartRateDetail;
@class ZHJHeartRate;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJHR_BP_BOProcessor")
@interface ZHJHR_BP_BOProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJHR_BP_BOProcessor * _Nonnull shared;)
+ (ZHJHR_BP_BOProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除心率血压血氧历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearHR_BP_BORecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置心率告警区间
/// \param maxHR 最大心率
///
/// \param minHR 最小心率
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setHeartRateAlarmLimitWithMaxHR:(NSInteger)maxHR minHR:(NSInteger)minHR isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率、血压、血氧告警区间(与设置心率的方法二选一)
/// \param HRAlarm 心率告警模型
///
/// \param BPAlarm 血压告警模型
///
/// \param BOAlarm 血氧告警模型
///
/// \param setHandle 设置返回
///
- (void)setHR_BP_BOAlarmLimitWithHRAlarm:(ZHJHRAlarm_t * _Nonnull)HRAlarm BPAlarm:(ZHJBPAlarm_t * _Nonnull)BPAlarm BOAlarm:(ZHJBOAlarm_t * _Nonnull)BOAlarm setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置心率自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectHeartRateWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 开始心率检测
/// \param setHandle 设置返回
///
- (void)startDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 结束心率检测
/// \param setHandle 设置返回
///
- (void)endDetectHeartRateWithSetHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备心率血压血氧数据
/// \param currentStepHandle 当前心率血压血氧数据返回
///
- (void)readCurrentHR_BP_BOWithCurrentDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull))currentDataHandle;
/// 获取手环心率高、低报警限制开启使能设置
/// \param HRAlarmHandle 设置返回
///
- (void)readHeartAlarmSettingWithHRAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull))HRAlarmHandle;
/// 获取手环心率、血压、血氧报警限制开启使能设置
/// \param alarmHandle 设置返回
///
- (void)readHR_BP_BOAlarmSettingWithAlarmHandle:(void (^ _Nonnull)(ZHJHRAlarm_t * _Nonnull, ZHJBPAlarm_t * _Nonnull, ZHJBOAlarm_t * _Nonnull))alarmHandle;
/// 获取手环自动心率采样设置
/// \param HRTimingDetectHandle 设置返回
///
- (void)readHeartTimingDetectSettingWithHRTimingDetectHandle:(void (^ _Nonnull)(ZHJHRTimingDetect_t * _Nonnull))HRTimingDetectHandle;
/// 设置心率、舒张压、收缩压、血氧校准值
/// \param HR 心率
///
/// \param DBP 舒张压
///
/// \param SBP 收缩压
///
/// \param BO 血氧
///
/// \param setHandle 设置结果回调
///
- (void)setHR_BP_BOCalibrationWithHR:(NSInteger)HR DBP:(NSInteger)DBP SBP:(NSInteger)SBP BO:(NSInteger)BO setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取心率血压血氧校准数据
/// \param currentStepHandle 依次返回心率、舒张压、收缩压、血氧校准值
///
- (void)readHR_BP_BOCalibrationWithHR_BP_BOCalibrationHandle:(void (^ _Nonnull)(NSInteger, NSInteger, NSInteger, NSInteger))HR_BP_BOCalibrationHandle;
/// 获取历史心率血压血氧记录
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readHR_BP_BOHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJHeartRate * _Nonnull, ZHJBloodPressure * _Nonnull, ZHJBloodOxygen * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJHR_BP_BOSelectType, open) {
/// 获取当前心率、血压、血氧数据(设备显示)
  ZHJHR_BP_BOSelectTypeCurrentHR_BP_BO = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJHR_BP_BOSelectTypeHistoryHR_BP_BO = 0x01,
/// 清除所有数据
  ZHJHR_BP_BOSelectTypeClearAll = 0x02,
/// 设置心率高、低限制开启使能
  ZHJHR_BP_BOSelectTypeHR_Max_Min = 0x03,
/// 设置自动心率采样
  ZHJHR_BP_BOSelectTypeAutoDetect_HR = 0x04,
/// APP 设置设备进入心率检测模式
  ZHJHR_BP_BOSelectTypeStartDetect_HR = 0x05,
/// APP 设置设备退出心率检测模式
  ZHJHR_BP_BOSelectTypeEndDetect_HR = 0x06,
/// 获取手环心率高、低限制开启使能设置
  ZHJHR_BP_BOSelectTypeGET_HR_Max_Min = 0x07,
/// 获取手环自动心率采样设置
  ZHJHR_BP_BOSelectTypeGET_autoDetect_HR = 0x08,
  ZHJHR_BP_BOSelectTypeHR_BP_BOCalibration = 0x09,
/// 获取心率血压血氧校准值
  ZHJHR_BP_BOSelectTypeGET_HR_BP_BOCalibration = 0x0a,
};


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHealthDataAlarm")
@interface ZHJHealthDataAlarm : NSObject
/// 报警数据类型
@property (nonatomic) enum HealthDataAlarmType type;
/// 值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJHeartRate")
@interface ZHJHeartRate : ZHJDeviceDataBaseModel
/// 最大心率
@property (nonatomic) NSInteger max;
/// 最小心率
@property (nonatomic) NSInteger min;
/// 平均心率
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJHeartRateDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJHeartRateDetail")
@interface ZHJHeartRateDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 心率值
@property (nonatomic) NSInteger HR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth16ZHJMessageNotice")
@interface ZHJMessageNotice : NSObject
@property (nonatomic) BOOL twitter;
@property (nonatomic) BOOL facebook;
@property (nonatomic) BOOL email;
@property (nonatomic) BOOL sms;
@property (nonatomic) BOOL incoming;
@property (nonatomic) BOOL whatsapp;
@property (nonatomic) BOOL line;
@property (nonatomic) BOOL skype;
@property (nonatomic) BOOL qq;
@property (nonatomic) BOOL wechat;
@property (nonatomic) BOOL instagram;
@property (nonatomic) BOOL linkedin;
@property (nonatomic) BOOL messenger;
@property (nonatomic) BOOL vk;
@property (nonatomic) BOOL viber;
@property (nonatomic) BOOL dingtalk;
@property (nonatomic) BOOL telegram;
@property (nonatomic) BOOL sinaweibo;
@property (nonatomic) BOOL kakao;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth25ZHJMessageNoticeProcessor")
@interface ZHJMessageNoticeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageNoticeProcessor * _Nonnull shared;)
+ (ZHJMessageNoticeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取消息通知配置(暂时支持16种应用消息)
/// \param messageNoticeHandle 读取后的设备数据返回
///
- (void)readMessageNoticeWithMessageNoticeHandle:(void (^ _Nonnull)(ZHJMessageNotice * _Nonnull))messageNoticeHandle;
/// 写入通知配置
/// \param notice 通知配置
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeMessageNotice:(ZHJMessageNotice * _Nonnull)notice setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMessageNoticeType, open) {
  ZHJMessageNoticeTypeTwitter = 0,
  ZHJMessageNoticeTypeFacebook = 1,
  ZHJMessageNoticeTypeEmail = 2,
  ZHJMessageNoticeTypeSms = 3,
  ZHJMessageNoticeTypeIncoming = 4,
  ZHJMessageNoticeTypeWhatsapp = 5,
  ZHJMessageNoticeTypeLine = 6,
  ZHJMessageNoticeTypeSkype = 7,
  ZHJMessageNoticeTypeQq = 8,
  ZHJMessageNoticeTypeWechat = 9,
  ZHJMessageNoticeTypeInstagram = 10,
  ZHJMessageNoticeTypeLinkedin = 11,
  ZHJMessageNoticeTypeMessager = 12,
  ZHJMessageNoticeTypeVk = 13,
  ZHJMessageNoticeTypeViber = 14,
  ZHJMessageNoticeTypeDingtalk = 15,
  ZHJMessageNoticeTypeTelegram = 16,
  ZHJMessageNoticeTypeSinaweibo = 17,
};


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJMessageProcessor")
@interface ZHJMessageProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJMessageProcessor * _Nonnull shared;)
+ (ZHJMessageProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送自定义消息
- (void)sendMessageWithMessage:(NSString * _Nonnull)message setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 发送震动
- (void)sendVibrate;
@end

typedef SWIFT_ENUM(NSInteger, ZHJMusicContrl, open) {
/// 无效
  ZHJMusicContrlDefault = 0x00,
/// 播放/暂停
  ZHJMusicContrlPlayPause = 0x01,
/// 上一首
  ZHJMusicContrlPrevious = 0x02,
/// 下一首
  ZHJMusicContrlNext = 0x03,
/// 停止
  ZHJMusicContrlStop = 0x04,
/// 音量+
  ZHJMusicContrlVolumePlus = 0x05,
/// 音量-
  ZHJMusicContrlVolumeDecrease = 0x06,
};


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJPairingCodeProcessor")
@interface ZHJPairingCodeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJPairingCodeProcessor * _Nonnull shared;)
+ (ZHJPairingCodeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送4位随机配对码
- (NSString * _Nonnull)sendPairingCodeWithPairResult:(void (^ _Nonnull)(enum ZHJBLEError))pairResult SWIFT_WARN_UNUSED_RESULT;
/// 关闭手环配对码页面
/// 关闭手环配对码页面
/// \param pairCodeError 配对码是否错误（由APP来判断）
///
/// \param setHandle 设备回应
///
- (void)closePairingCodeUIWithPairCodeError:(BOOL)pairCodeError setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJPhotoContrl, open) {
/// 无效
  ZHJPhotoContrlDefault = 0x00,
/// 开始拍照
  ZHJPhotoContrlStart = 0x01,
/// 拍照
  ZHJPhotoContrlTakePhoto = 0x02,
/// 结束拍照
  ZHJPhotoContrlEnd = 0x03,
};

typedef SWIFT_ENUM(NSInteger, ZHJQuickReplyContrl, open) {
/// 无效
  ZHJQuickReplyContrlDefault = 0x00,
/// 开始回复
  ZHJQuickReplyContrlStart = 0x01,
/// 取消回复
  ZHJQuickReplyContrlCancel = 0x02,
};

@class ZHJStepDetail;
@class ZHJTemperatureDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth30ZHJRealTimeHealthDataProcessor")
@interface ZHJRealTimeHealthDataProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJRealTimeHealthDataProcessor * _Nonnull shared;)
+ (ZHJRealTimeHealthDataProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取实时健康数据
/// \param readHealthDataHandle 实时健康数据回调
///
- (void)readRealTimeHealthDataWithReadHealthDataHandle:(void (^ _Nonnull)(ZHJHeartRateDetail * _Nonnull, ZHJBloodPressureDetail * _Nonnull, ZHJBloodOxygenDetail * _Nonnull, ZHJStepDetail * _Nonnull, ZHJTemperatureDetail * _Nonnull))readHealthDataHandle;
/// 接收实时健康数据预警
/// \param alarms 预警数据数组
///
/// \param healthDataAlarmHandle 预警回调
///
- (void)realTimeHealthDataAlarmDidReceivedWithHealthDataAlarmHandle:(void (^ _Nonnull)(NSArray<ZHJHealthDataAlarm *> * _Nonnull))healthDataAlarmHandle;
@end

enum ZHJServerStatusCode : NSInteger;

SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSDKNetworkService")
@interface ZHJSDKNetworkService : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSDKNetworkService * _Nonnull shared;)
+ (ZHJSDKNetworkService * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 查询固件升级信息
/// \param model 设备型号
///
/// \param version 设备固件版本号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectFirmwareUpgradeWithModel:(NSString * _Nonnull)model version:(NSString * _Nonnull)version success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDeviceFirmware * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置信息
/// \param model 设备型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
///
/// returns:
/// “”
- (void)selectDialConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param model 型号
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)selectDialBConfigWithModel:(NSString * _Nonnull)model success:(void (^ _Nonnull)(enum ZHJServerStatusCode, ZHJDialBConfig * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// 查询表盘配置
/// \param adapterId 型号适配ID
///
/// \param categoryId 分类ID
///
/// \param success 成功回调
///
/// \param failure 失败回调
///
- (void)getDialBFromCategoryWithAdapterId:(NSInteger)adapterId categoryId:(NSInteger)categoryId success:(void (^ _Nonnull)(enum ZHJServerStatusCode, NSArray<ZHJDialB *> * _Nullable))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJServerStatusCode, open) {
/// 初始状态，默认
  ZHJServerStatusCodeDefault = 0,
/// 请求成功
  ZHJServerStatusCodeDone = 200,
/// 请求失败
  ZHJServerStatusCodeFail = 500,
};

typedef SWIFT_ENUM(NSInteger, ZHJSOSContrl, open) {
/// 无效
  ZHJSOSContrlDefault = 0x00,
/// 呼叫SOS
  ZHJSOSContrlAnswer = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSedentary")
@interface ZHJSedentary : NSObject
/// 开关
@property (nonatomic) BOOL isOpen;
/// 生效开始时间（小时）
@property (nonatomic) NSInteger beginTime;
/// 生效结束时间（小时）
@property (nonatomic) NSInteger endTime;
/// 周期(每天默认都是false)
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull cycle;
/// 检测周期（单位5分钟） 范围0~255，当为0时由设备自行决策检测时间
@property (nonatomic) NSInteger intervals;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSedentaryProcessor")
@interface ZHJSedentaryProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSedentaryProcessor * _Nonnull shared;)
+ (ZHJSedentaryProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备久坐设置
/// \param sedentaryHandle 读取后的设备数据返回
///
- (void)readSedentaryWithSedentaryHandle:(void (^ _Nonnull)(ZHJSedentary * _Nonnull))sedentaryHandle;
/// 写入久坐提醒
/// \param sedentary 久坐数据
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeSedentary:(ZHJSedentary * _Nonnull)sedentary setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSex, open) {
/// 男
  ZHJSexMale = 0x00,
/// 女
  ZHJSexFemale = 0x01,
/// 未知其他
  ZHJSexUnknow = 0x02,
};

@class ZHJSleepDetail;

SWIFT_CLASS("_TtC16TrusangBluetooth8ZHJSleep")
@interface ZHJSleep : ZHJDeviceDataBaseModel
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJSleepDetail *> * _Nonnull details;
/// 入睡睡眠时长
@property (nonatomic) NSInteger beginDuration;
/// 浅睡时长
@property (nonatomic) NSInteger lightDuration;
/// 深睡时长
@property (nonatomic) NSInteger deepDuration;
/// 清醒时长
@property (nonatomic) NSInteger awakeDuration;
/// 快速眼动时长
@property (nonatomic) NSInteger REMDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSleepDetail")
@interface ZHJSleepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 睡眠类型 ZHJSleepType
@property (nonatomic) NSInteger type;
/// 时长单位分
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSleepType, open) {
/// 入睡
  ZHJSleepTypeBegin = 0x01,
/// 浅睡
  ZHJSleepTypeLight = 0x02,
/// 深睡
  ZHJSleepTypeDeep = 0x03,
/// 清醒
  ZHJSleepTypeAwake = 0x04,
/// 快速眼动睡眠
  ZHJSleepTypeREM = 0x05,
};


/// 用于自定义手环运动模式
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportConfig")
@interface ZHJSportConfig : NSObject
/// 步行(室外)
@property (nonatomic) BOOL walk;
/// 跑步(室外)
@property (nonatomic) BOOL run;
/// 游泳
@property (nonatomic) BOOL swim;
/// 骑行(室外)
@property (nonatomic) BOOL ride;
/// 室内跑步
@property (nonatomic) BOOL indoorRun;
/// 自由训练
@property (nonatomic) BOOL freeTrain;
/// 足球
@property (nonatomic) BOOL football;
/// 篮球
@property (nonatomic) BOOL basketball;
/// 羽毛球
@property (nonatomic) BOOL badminton;
/// 跳绳
@property (nonatomic) BOOL ropeSkip;
/// 俯卧撑
@property (nonatomic) BOOL pushUps;
/// 仰卧起坐
@property (nonatomic) BOOL sitUps;
/// 登山
@property (nonatomic) BOOL climb;
/// 网球
@property (nonatomic) BOOL tennis;
/// 高强度训练
@property (nonatomic) BOOL HIT;
/// 室内骑行
@property (nonatomic) BOOL indoorBike;
/// 健身
@property (nonatomic) BOOL fitness;
/// 橄榄球
@property (nonatomic) BOOL rugby;
/// 高尔夫球
@property (nonatomic) BOOL golf;
/// 动感单车
@property (nonatomic) BOOL happyBike;
/// 举重
@property (nonatomic) BOOL weightlift;
/// 轮滑
@property (nonatomic) BOOL rollerSkate;
/// 跳舞
@property (nonatomic) BOOL dance;
/// 瑜伽
@property (nonatomic) BOOL yoga;
/// 室内步行
@property (nonatomic) BOOL indoorWalk;
/// 徒步
@property (nonatomic) BOOL onFoot;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth12ZHJSportMode")
@interface ZHJSportMode : ZHJDeviceDataBaseModel
/// 运动类型 ZHJSportModeType
@property (nonatomic) NSInteger sportType;
/// 时长
@property (nonatomic) NSInteger duration;
/// 步数
@property (nonatomic) NSInteger step;
/// 心率
@property (nonatomic) NSInteger heartRate;
/// 配速
@property (nonatomic) NSInteger pace;
/// 速度
@property (nonatomic) NSInteger speed;
/// 卡路里
@property (nonatomic) NSInteger calories;
/// 距离
@property (nonatomic) NSInteger distance;
/// 采样间隔
@property (nonatomic) NSInteger interval;
/// 心率详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull heartRateArr;
/// 计步详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull stepArr;
/// 配速详情数组
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull paceArr;
/// 经纬度数组 字符串数组 [纬度|经度, 纬度|经度, 纬度|经度]
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull coordinateArr;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeDataType, open) {
/// 单次运动数据总记录
  ZHJSportModeDataTypeSummary = 0x00,
/// 单次采样间隔数据(详情)
  ZHJSportModeDataTypeDetail = 0x01,
/// 传输完成
  ZHJSportModeDataTypeDone = 0x02,
/// 无运动记录
  ZHJSportModeDataTypeNoRecord = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJSportModeProcessor")
@interface ZHJSportModeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportModeProcessor * _Nonnull shared;)
+ (ZHJSportModeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除运动历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearSportModeRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 获取单次运动模式数据
/// \param sportModeHandle 数据返回
///
- (void)readSportModeHistoryRecordWithSportModeHandle:(void (^ _Nonnull)(ZHJSportMode * _Nullable))sportModeHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportModeType, open) {
/// 🚶步行
  ZHJSportModeTypeWalk = 0x00,
/// 🏃跑步
  ZHJSportModeTypeRun = 0x01,
/// 🏊‍♀️游泳
  ZHJSportModeTypeSwim = 0x02,
/// 🚴骑行
  ZHJSportModeTypeRide = 0x03,
/// 🏠室内跑
  ZHJSportModeTypeIndoorRun = 0x04,
/// 🏋自由训练
  ZHJSportModeTypeFreeTrain = 0x05,
/// ⚽️足球
  ZHJSportModeTypeFootball = 0x06,
/// 🏀篮球
  ZHJSportModeTypeBasketball = 0x07,
/// 🏸羽毛球
  ZHJSportModeTypeBadminton = 0x08,
/// 跳绳
  ZHJSportModeTypeRopeSkip = 0x09,
/// 俯卧撑
  ZHJSportModeTypePushUps = 0x0A,
/// 仰卧起坐
  ZHJSportModeTypeSitUps = 0x0B,
/// 登山
  ZHJSportModeTypeClimb = 0x0C,
/// 网球
  ZHJSportModeTypeTennis = 0x0D,
/// 高强度训练
  ZHJSportModeTypeHIT = 0x0E,
/// 室内骑行
  ZHJSportModeTypeIndoorBike = 0x0F,
/// 健身
  ZHJSportModeTypeFitness = 0x10,
/// 橄榄球
  ZHJSportModeTypeRugby = 0x11,
/// 高尔夫球
  ZHJSportModeTypeGolf = 0x12,
/// 动感单车
  ZHJSportModeTypeHappyBike = 0x13,
/// 举重
  ZHJSportModeTypeWeightlift = 0x14,
/// 轮滑
  ZHJSportModeTypeRollerSkate = 0x15,
/// 跳舞
  ZHJSportModeTypeDance = 0x16,
/// 瑜伽
  ZHJSportModeTypeYoga = 0x17,
/// 室内步行
  ZHJSportModeTypeIndoorWalk = 0x18,
/// 徒步
  ZHJSportModeTypeOnFoot = 0x19,
/// 棒球
  ZHJSportModeTypeBaseball = 0x1A,
/// 滑板
  ZHJSportModeTypeSkateboard = 0x1B,
/// 冰球
  ZHJSportModeTypeIceHockey = 0x1C,
/// 滑雪
  ZHJSportModeTypeSkiing = 0x1D,
/// 赛车
  ZHJSportModeTypeRacingCar = 0x1E,
/// 健走
  ZHJSportModeTypeFastWalking = 0x1F,
/// 椭圆机
  ZHJSportModeTypeEllipticalMachine = 0x20,
/// 力量训练
  ZHJSportModeTypeStrengthTraining = 0x21,
/// 划船机
  ZHJSportModeTypeRowingMachine = 0x22,
/// 平板支撑
  ZHJSportModeTypePlankExercise = 0x23,
/// 开合跳
  ZHJSportModeTypeJumpingMovement = 0x24,
/// 波比跳
  ZHJSportModeTypeBobbyJump = 0x25,
/// 深蹲
  ZHJSportModeTypeSquatMovement = 0x26,
/// 高抬腿运动
  ZHJSportModeTypeHighLegLiftExercise = 0x27,
/// 臂力训练
  ZHJSportModeTypeArmStrengthTraining = 0x28,
/// 腿部训练
  ZHJSportModeTypeLegTraining = 0x29,
/// 踏步机
  ZHJSportModeTypeStepper = 0x2A,
/// 漫步器
  ZHJSportModeTypeWalker = 0x2B,
/// 健身操
  ZHJSportModeTypeAerobics = 0x2C,
/// 团体操
  ZHJSportModeTypeGroupGymnastics = 0x2D,
/// 普拉提
  ZHJSportModeTypePilates = 0x2E,
/// Cross fit
  ZHJSportModeTypeCrossFit = 0x2F,
/// 功能性训练
  ZHJSportModeTypeFunctionalTraining = 0x30,
/// 体能训练
  ZHJSportModeTypePhysicaTraining = 0x31,
/// 跆拳道
  ZHJSportModeTypeTaekwondo = 0x32,
/// 拳击
  ZHJSportModeTypeBoxing = 0x33,
/// 自由搏击
  ZHJSportModeTypeFreeSparring = 0x34,
/// 空手道
  ZHJSportModeTypeKarate = 0x35,
/// 击剑
  ZHJSportModeTypeFencing = 0x36,
/// 核心训练
  ZHJSportModeTypeCoreTraining = 0x37,
/// 搏击操
  ZHJSportModeTypeFightTraining = 0x38,
/// 剑道
  ZHJSportModeTypeKendo = 0x39,
/// 单杠
  ZHJSportModeTypeHorizontalBar = 0x3A,
/// 双杠
  ZHJSportModeTypeParallelBars = 0x3B,
/// 肚皮舞
  ZHJSportModeTypeBellyDance = 0x3C,
/// 爵士舞
  ZHJSportModeTypeJazz = 0x3D,
/// 拉丁舞
  ZHJSportModeTypeLatinDance = 0x3E,
/// 芭蕾
  ZHJSportModeTypeBallet = 0x3F,
/// 街舞
  ZHJSportModeTypeStreetDance = 0x40,
/// 广场舞
  ZHJSportModeTypeSquareDance = 0x41,
/// 武术
  ZHJSportModeTypeMartialArts = 0x42,
/// 太极拳
  ZHJSportModeTypeTaiChi = 0x43,
/// 呼啦圈
  ZHJSportModeTypeHulaHoop = 0x44,
/// 飞盘
  ZHJSportModeTypeFrisbee = 0x45,
/// 飞镖
  ZHJSportModeTypeDarts = 0x46,
/// 射箭
  ZHJSportModeTypeArchery = 0x47,
/// 骑马
  ZHJSportModeTypeHorseRiding = 0x48,
/// 对战游戏
  ZHJSportModeTypeBattleGame = 0x49,
/// 放风筝
  ZHJSportModeTypeFlyKite = 0x4A,
/// 拔河
  ZHJSportModeTypeTugOfWar = 0x4B,
/// 秋千
  ZHJSportModeTypeSwing = 0x4C,
/// 爬楼
  ZHJSportModeTypeClimbStairs = 0x4D,
/// 障碍赛
  ZHJSportModeTypeObstacleCourse = 0x4E,
/// 钓鱼
  ZHJSportModeTypeFishing = 0x4F,
/// 乒乓球
  ZHJSportModeTypePingpong = 0x50,
/// 台球
  ZHJSportModeTypeBilliards = 0x51,
/// 保龄球
  ZHJSportModeTypeBowling = 0x52,
/// 排球
  ZHJSportModeTypeVolleyball = 0x53,
/// 毽球
  ZHJSportModeTypeShuttlecock = 0x54,
/// 手球
  ZHJSportModeTypeHandball = 0x55,
/// 垒球
  ZHJSportModeTypeSoftball = 0x56,
/// 板球
  ZHJSportModeTypeCricketBall = 0x57,
/// 沙滩足球
  ZHJSportModeTypeBeachFootball = 0x58,
/// 门球
  ZHJSportModeTypeCroquet = 0x59,
/// 曲棍球
  ZHJSportModeTypeHockey = 0x5A,
/// 壁球
  ZHJSportModeTypeSquash = 0x5B,
/// 藤球
  ZHJSportModeTypeSepakTakraw = 0x5C,
/// 躲避球
  ZHJSportModeTypeDodgeBall = 0x5D,
/// 滑冰
  ZHJSportModeTypeSkate = 0x5E,
/// 冰壶
  ZHJSportModeTypeCurling = 0x5F,
/// 雪车
  ZHJSportModeTypeSnowCar = 0x60,
/// 雪橇
  ZHJSportModeTypeSled = 0x61,
/// 冬季两项
  ZHJSportModeTypeBiathlon = 0x62,
/// 攀岩
  ZHJSportModeTypeRockClimbing = 0x63,
/// 蹦极
  ZHJSportModeTypeBungeeJumping = 0x64,
/// 跑酷
  ZHJSportModeTypeParkour = 0x65,
/// BMX
  ZHJSportModeTypeBMX = 0x66,
/// 定向越野
  ZHJSportModeTypeOrienteering = 0x67,
/// 跳伞
  ZHJSportModeTypeParachute = 0x68,
/// 其他
  ZHJSportModeTypeDefault = 0xFF,
};

@class ZHJSportTargetInfo;

/// 设备运动目标
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJSportTarget")
@interface ZHJSportTarget : NSObject
/// 睡眠目标(单位小时)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull sleepTarget;
/// 计步目标
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull stepTarget;
/// 卡路里目标(单位大卡)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull caloriesTarget;
/// 距离目标(单位 KM)
@property (nonatomic, strong) ZHJSportTargetInfo * _Nonnull distanceTarget;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth18ZHJSportTargetInfo")
@interface ZHJSportTargetInfo : NSObject
/// 是否开启
@property (nonatomic) BOOL enable;
/// 目标值
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJSportTargetProcessor")
@interface ZHJSportTargetProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSportTargetProcessor * _Nonnull shared;)
+ (ZHJSportTargetProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备运动目标信息
/// \param sportTargetHandle 读取后的设备数据返回
///
- (void)readSportTargetWithSportTargetHandle:(void (^ _Nonnull)(ZHJSportTarget * _Nonnull))sportTargetHandle;
/// 写入运动目标
/// \param target 运动目标
///
/// \param setHandel 写入后的设备数据返回
///
- (void)writeSportTarget:(ZHJSportTarget * _Nonnull)target setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJSportTargetType, open) {
/// 睡眠目标
  ZHJSportTargetTypeSleep = 0,
/// 步数目标
  ZHJSportTargetTypeStep = 1,
/// 卡路里目标
  ZHJSportTargetTypeCalories = 2,
/// 距离目标
  ZHJSportTargetTypeDistance = 3,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJStep")
@interface ZHJStep : ZHJDeviceDataBaseModel
/// 总步数
@property (nonatomic) NSInteger step;
/// 总卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 总距离 单位米
@property (nonatomic) CGFloat distance;
/// 睡眠详情
@property (nonatomic, copy) NSArray<ZHJStepDetail *> * _Nonnull details;
/// 运动时长 单位分钟
@property (nonatomic) NSInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepDataType, open) {
/// 走路
  ZHJStepAndSleepDataTypeWalk = 0x00,
/// 跑步
  ZHJStepAndSleepDataTypeRun = 0x01,
/// 慢跑
  ZHJStepAndSleepDataTypeSlowRun = 0x02,
/// 睡眠相关数据（睡眠标志)
  ZHJStepAndSleepDataTypeSleep = 0x0F,
};


SWIFT_CLASS("_TtC16TrusangBluetooth24ZHJStepAndSleepProcessor")
@interface ZHJStepAndSleepProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJStepAndSleepProcessor * _Nonnull shared;)
+ (ZHJStepAndSleepProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除计步睡眠历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearStepAndSleepRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 读取当前设备计步数据
/// \param currentStepHandle 当前计步数据返回
///
- (void)readCurrentStepWithCurrentStepHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull))currentStepHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDataHandle 历史数据返回
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readStepAndSleepHistoryRecordWithDate:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJStep * _Nonnull, ZHJSleep * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJStepAndSleepSelectType, open) {
/// 当前计步
  ZHJStepAndSleepSelectTypeCurrentStep = 0x00,
/// 历史计步和睡眠
  ZHJStepAndSleepSelectTypeHistoryStepAndSleep = 0x01,
/// 清除所有计步和睡眠数据
  ZHJStepAndSleepSelectTypeClearAll = 0x02,
/// 最近的一次睡眠数据（暂时没用）
  ZHJStepAndSleepSelectTypeRecentSleep = 0x03,
};


SWIFT_CLASS("_TtC16TrusangBluetooth13ZHJStepDetail")
@interface ZHJStepDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 计步类型 ZHJStepAndSleepDataType
@property (nonatomic) NSInteger type;
/// 卡路里 单位千卡
@property (nonatomic) CGFloat calories;
/// 距离 单位米
@property (nonatomic) CGFloat distance;
/// 步数
@property (nonatomic) NSInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJSyncTime")
@interface ZHJSyncTime : NSObject
/// 年
@property (nonatomic) NSInteger year;
/// 月
@property (nonatomic) NSInteger month;
/// 日
@property (nonatomic) NSInteger day;
/// 小时
@property (nonatomic) NSInteger hour;
/// 分钟
@property (nonatomic) NSInteger minute;
/// 秒
@property (nonatomic) NSInteger second;
/// 时区
@property (nonatomic) NSInteger timeZone;
@end

@class NSDate;

@interface ZHJSyncTime (SWIFT_EXTENSION(TrusangBluetooth))
- (nonnull instancetype)init:(NSDate * _Nonnull)date;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJSyncTimeProcessor")
@interface ZHJSyncTimeProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJSyncTimeProcessor * _Nonnull shared;)
+ (ZHJSyncTimeProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取设备时间
/// \param syncTimeHandle 读取后的设备数据返回
///
- (void)readDeviceTimeWithSyncTimeHandle:(void (^ _Nonnull)(ZHJSyncTime * _Nonnull))syncTimeHandle;
/// 写入时间
/// \param time 时间
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeTime:(ZHJSyncTime * _Nonnull)time setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


/// 温度（单位0.01,如365，就是3.65℃）
SWIFT_CLASS("_TtC16TrusangBluetooth14ZHJTemperature")
@interface ZHJTemperature : ZHJDeviceDataBaseModel
/// 额头温度（历史数据只有手腕）
/// 最高温度
@property (nonatomic) NSInteger max;
/// 最低温度
@property (nonatomic) NSInteger min;
/// 平均温度
@property (nonatomic) NSInteger avg;
/// 详情
@property (nonatomic, copy) NSArray<ZHJTemperatureDetail *> * _Nonnull details;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth21ZHJTemperatureAlarm_t")
@interface ZHJTemperatureAlarm_t : NSObject
/// 高值
@property (nonatomic) NSInteger max;
/// 是否开启了警报
@property (nonatomic) BOOL alarmEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJTemperatureDetail")
@interface ZHJTemperatureDetail : NSObject
/// 时间
@property (nonatomic, copy) NSString * _Nonnull dateTime;
/// 手腕体温
@property (nonatomic) NSInteger wristTemperature;
/// 额头体温
@property (nonatomic) NSInteger headTemperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZHJTemperatureTimingDetect_t;

SWIFT_CLASS("_TtC16TrusangBluetooth23ZHJTemperatureProcessor")
@interface ZHJTemperatureProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJTemperatureProcessor * _Nonnull shared;)
+ (ZHJTemperatureProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 删除体温历史记录
/// \param clearHandle 删除结果返回
///
- (void)clearTemperatureRecordWithClearHandle:(void (^ _Nonnull)(enum ZHJBLEError))clearHandle;
/// 设置体温告警
/// \param maxTemperature 报警体温值
///
/// \param isOn 开关
///
/// \param setHandle 设置返回
///
- (void)setTemperatureAlarmLimitWithMaxTemperature:(NSInteger)maxTemperature isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 设置体温自动检测
/// \param interval 间隔时间
///
/// \param isOn 开关
///
- (void)setAutoDetectTemperatureWithInterval:(NSInteger)interval isOn:(BOOL)isOn setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
/// 读取当前设备体温数据
/// \param currentDataHandle 当前体温数据返回
///
- (void)readCurrentTemperatureWithCurrentDataHandle:(void (^ _Nonnull)(ZHJTemperatureDetail * _Nonnull))currentDataHandle;
/// 获取手环体温高报警设置
/// \param temperatureAlarmHandle 设置返回
///
- (void)readTemperatureAlarmSettingWithTemperatureAlarmHandle:(void (^ _Nonnull)(ZHJTemperatureAlarm_t * _Nonnull))temperatureAlarmHandle;
/// 获取手环自动体温采样设置
/// \param temperatureTimingDetectHandle 设置返回
///
- (void)readTemperatureTimingDetectSettingWithTemperatureTimingDetectHandle:(void (^ _Nonnull)(ZHJTemperatureTimingDetect_t * _Nonnull))temperatureTimingDetectHandle;
/// 获取某一天的历史记录数据
/// \param date 日期yyyy-mm-dd
///
/// \param historyDoneHandle 数据返回完毕回调
///
/// \param historyDoneHandle 数据返回完毕回调
///
- (void)readTemperatureHistoryRecord:(NSString * _Nonnull)date historyDataHandle:(void (^ _Nonnull)(ZHJTemperature * _Nonnull))historyDataHandle historyDoneHandle:(void (^ _Nonnull)(id _Nonnull))historyDoneHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureSelectType, open) {
/// 获取当前人体温度数据(设备显示)
  ZHJTemperatureSelectTypeCurrent = 0x00,
/// 获取历史数据(以天为单位获取)
  ZHJTemperatureSelectTypeHistory = 0x01,
/// 清除所有数据
  ZHJTemperatureSelectTypeClearAll = 0x02,
/// 设置温度报警
  ZHJTemperatureSelectTypeSetAlarm = 0x03,
/// 设置自动温度采样
  ZHJTemperatureSelectTypeSetAutoDetect = 0x04,
/// 获取手环温度报警设置
  ZHJTemperatureSelectTypeGetAlarm = 0x05,
/// 获取手环自动体温采样设置
  ZHJTemperatureSelectTypeGetAutoDetect = 0x06,
/// APP 设置设备进入体温检测模式
  ZHJTemperatureSelectTypeStartDetect = 0x07,
/// APP 设置设备退出体温检测模式
  ZHJTemperatureSelectTypeEndDetect = 0x08,
};


SWIFT_CLASS("_TtC16TrusangBluetooth28ZHJTemperatureTimingDetect_t")
@interface ZHJTemperatureTimingDetect_t : NSObject
/// 间隔
@property (nonatomic) NSInteger interval;
/// 是否开启
@property (nonatomic) BOOL detectEnable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTemperatureUnit, open) {
/// 摄氏（默认）
  ZHJTemperatureUnitCelsius = 0x00,
/// 华氏
  ZHJTemperatureUnitFahrenheit = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth7ZHJTime")
@interface ZHJTime : NSObject
@property (nonatomic) NSInteger year;
@property (nonatomic) NSInteger month;
@property (nonatomic) NSInteger day;
@property (nonatomic) NSInteger hour;
@property (nonatomic) NSInteger minute;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ZHJTimeMode, open) {
/// 24小时制（默认）
  ZHJTimeModeHour24 = 0x00,
/// 12小时制
  ZHJTimeModeHour12 = 0x01,
};

typedef SWIFT_ENUM(NSInteger, ZHJUnit, open) {
/// 公制（默认）
  ZHJUnitMetric = 0x00,
/// 英制
  ZHJUnitImperial = 0x01,
};


SWIFT_CLASS("_TtC16TrusangBluetooth11ZHJUserInfo")
@interface ZHJUserInfo : NSObject
/// 设备mac地址
@property (nonatomic, copy) NSString * _Nonnull mac;
/// 用户ID
@property (nonatomic) NSInteger mid;
/// 性别(默认男，0男,1女)
@property (nonatomic) NSInteger sex;
/// 年龄 (0x06~0x64,默认 20)
@property (nonatomic) NSInteger age;
/// 身高（单位 cm，默认 170)
@property (nonatomic) NSInteger height;
/// 体重(单位 0.1kg，默认 600)
@property (nonatomic) NSInteger weight;
/// 身高描述
@property (nonatomic, copy) NSString * _Nonnull heightDesc;
/// 体重描述
@property (nonatomic, copy) NSString * _Nonnull weightDesc;
/// 生日
@property (nonatomic, copy) NSString * _Nonnull birthday;
/// 昵称
@property (nonatomic, copy) NSString * _Nonnull name;
/// 单位0公制 1英制
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJUserInfoProcessor")
@interface ZHJUserInfoProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJUserInfoProcessor * _Nonnull shared;)
+ (ZHJUserInfoProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 读取个人信息
/// \param userInfoHandle 读取后的设备数据返回
///
- (void)readUserInfoWithUserInfoHandle:(void (^ _Nonnull)(ZHJUserInfo * _Nonnull))userInfoHandle;
/// 写入个人信息
/// \param info 个人信息对象
///
/// \param setHandle 写入后的设备数据返回
///
- (void)writeUserInfo:(ZHJUserInfo * _Nonnull)info setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJWearStyle, open) {
/// 左手（默认）
  ZHJWearStyleLeftHand = 0x01,
/// 右手
  ZHJWearStyleRightHand = 0x02,
};


SWIFT_CLASS("_TtC16TrusangBluetooth10ZHJWeather")
@interface ZHJWeather : NSObject
/// 温度
@property (nonatomic, copy) NSString * _Nonnull temp;
/// 最低温度
@property (nonatomic, copy) NSString * _Nonnull temp_min;
/// 最高温度
@property (nonatomic, copy) NSString * _Nonnull temp_max;
/// 天气状态代号
@property (nonatomic, copy) NSString * _Nonnull weatherConditionCode;
/// 单位,0摄氏，1华氏
@property (nonatomic) NSInteger unit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth20ZHJWeatherBProcessor")
@interface ZHJWeatherBProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherBProcessor * _Nonnull shared;)
+ (ZHJWeatherBProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备,支持今天的天气类型，温度，最低温和最高温，支持明天的天气类型，最低温和最高温，支持后天的天气类型，最低温和最高温
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end


SWIFT_CLASS("_TtC16TrusangBluetooth19ZHJWeatherProcessor")
@interface ZHJWeatherProcessor : ZHJBaseProcessor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZHJWeatherProcessor * _Nonnull shared;)
+ (ZHJWeatherProcessor * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 发送天气到设备
/// \param today 今天的天气
///
/// \param tomorrow 明天的天气
///
/// \param dayAfterTomorrow 后天的天气
///
/// \param tempUnit 温度单位
///
/// \param setHandle 设置结果
///
- (void)syncWeatherWithToday:(ZHJWeather * _Nonnull)today tomorrow:(ZHJWeather * _Nonnull)tomorrow dayAfterTomorrow:(ZHJWeather * _Nonnull)dayAfterTomorrow tempUnit:(enum ZHJTemperatureUnit)tempUnit setHandle:(void (^ _Nonnull)(enum ZHJBLEError))setHandle;
@end

typedef SWIFT_ENUM(NSInteger, ZHJlLanguage, open) {
/// 🇬🇧英语（默认）
  ZHJlLanguageEnglish = 0x00,
/// 🇨🇳中文
  ZHJlLanguageChinese = 0x01,
/// 🇷🇺俄语
  ZHJlLanguageRussian = 0x02,
/// 🇺🇦乌克兰语
  ZHJlLanguageUkrainian = 0x03,
/// 🇫🇷法语
  ZHJlLanguageFrench = 0x04,
/// 🇪🇸西班牙语
  ZHJlLanguageSpanish = 0x05,
/// 🇵🇹葡萄牙语
  ZHJlLanguagePortuguese = 0x06,
/// 🇩🇪德语
  ZHJlLanguageGerman = 0x07,
/// 🇯🇵日语
  ZHJlLanguageJapan = 0x08,
/// 🇵🇱波兰语
  ZHJlLanguagePoland = 0x09,
/// 🇮🇹意大利语
  ZHJlLanguageItaly = 0x0A,
/// 🇷🇴罗马尼亚语
  ZHJlLanguageRomania = 0x0B,
/// 🇨🇳繁体中文
  ZHJlLanguageTd_chinese = 0x0C,
/// 🇰🇷韩语
  ZHJlLanguageKorean = 0x0D,
/// 🇹🇭泰语
  ZHJlLanguageThai = 0x0E,
/// 🇳🇱荷兰语
  ZHJlLanguageNetherlands = 0x0F,
/// 🇹🇷土耳其语
  ZHJlLanguageTurkish = 0x10,
/// 🇸🇦阿拉伯语
  ZHJlLanguageArabic = 0x11,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
